{"env_info": "sys.platform: linux\nPython: 3.6.12 |Anaconda, Inc.| (default, Sep  8 2020, 23:10:56) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.130\nGCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\nPyTorch: 1.4.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CUDA Runtime 10.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.1\n  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.5.0\nOpenCV: 4.4.0\nMMCV: 1.1.5\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.0\nMMDetection: 2.5.0+", "config": "model = dict(\n    type='FasterRCNN',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet_carafed',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=80,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))))\ntrain_cfg = dict(\n    rpn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.7,\n            neg_iou_thr=0.3,\n            min_pos_iou=0.3,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=256,\n            pos_fraction=0.5,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    rpn_proposal=dict(\n        nms_across_levels=False,\n        nms_pre=2000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0.5,\n            match_low_quality=False,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=512,\n            pos_fraction=0.25,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=True),\n        pos_weight=-1,\n        debug=False))\ntest_cfg = dict(\n    rpn=dict(\n        nms_across_levels=False,\n        nms_pre=1000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'CocoDataset'\ndata_root = '../data/coco/'\nannotations_root = '../data/coco/annotations/'\nimage_root = '../data/coco/'\nimg_scale = (1333, 800)\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=0,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/instances_train2017.json',\n        img_prefix='../data/coco/train2017',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/instances_val2017.json',\n        img_prefix='../data/coco/val2017',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/image_info_test-dev2017.json',\n        img_prefix='../data/coco/test2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\ntotal_epochs = 24\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/carafed_coco_faster_r50_2x'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "carafed_coco_faster_r50_2x.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 8626, "data_time": 0.22085, "loss_rpn_cls": 0.42213, "loss_rpn_bbox": 0.10232, "loss_cls": 1.34023, "acc": 86.3125, "loss_bbox": 0.10334, "loss": 1.96802, "time": 0.65514}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 8626, "data_time": 0.14667, "loss_rpn_cls": 0.26483, "loss_rpn_bbox": 0.09378, "loss_cls": 0.54939, "acc": 94.71948, "loss_bbox": 0.176, "loss": 1.084, "time": 0.55742}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 8626, "data_time": 0.14949, "loss_rpn_cls": 0.2625, "loss_rpn_bbox": 0.09715, "loss_cls": 0.54101, "acc": 94.43457, "loss_bbox": 0.18335, "loss": 1.08401, "time": 0.5579}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 8626, "data_time": 0.15411, "loss_rpn_cls": 0.27374, "loss_rpn_bbox": 0.10061, "loss_cls": 0.4979, "acc": 94.03345, "loss_bbox": 0.19772, "loss": 1.06998, "time": 0.56029}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 8626, "data_time": 0.1522, "loss_rpn_cls": 0.27429, "loss_rpn_bbox": 0.1027, "loss_cls": 0.46753, "acc": 94.36792, "loss_bbox": 0.185, "loss": 1.02951, "time": 0.56129}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 8626, "data_time": 0.14845, "loss_rpn_cls": 0.26392, "loss_rpn_bbox": 0.09751, "loss_cls": 0.45984, "acc": 94.27075, "loss_bbox": 0.19068, "loss": 1.01195, "time": 0.56322}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 8626, "data_time": 0.14606, "loss_rpn_cls": 0.24851, "loss_rpn_bbox": 0.095, "loss_cls": 0.46604, "acc": 94.16357, "loss_bbox": 0.19931, "loss": 1.00886, "time": 0.56173}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 8626, "data_time": 0.14709, "loss_rpn_cls": 0.25797, "loss_rpn_bbox": 0.09762, "loss_cls": 0.45969, "acc": 93.94922, "loss_bbox": 0.20352, "loss": 1.01881, "time": 0.55816}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 8626, "data_time": 0.14762, "loss_rpn_cls": 0.22126, "loss_rpn_bbox": 0.09747, "loss_cls": 0.44902, "acc": 93.73706, "loss_bbox": 0.21537, "loss": 0.98311, "time": 0.55866}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 8626, "data_time": 0.14884, "loss_rpn_cls": 0.2284, "loss_rpn_bbox": 0.09423, "loss_cls": 0.43667, "acc": 93.89429, "loss_bbox": 0.20691, "loss": 0.9662, "time": 0.55765}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 8626, "data_time": 0.14788, "loss_rpn_cls": 0.22041, "loss_rpn_bbox": 0.09078, "loss_cls": 0.43199, "acc": 93.89746, "loss_bbox": 0.20684, "loss": 0.95001, "time": 0.55467}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 8626, "data_time": 0.1554, "loss_rpn_cls": 0.21914, "loss_rpn_bbox": 0.09374, "loss_cls": 0.44663, "acc": 93.75098, "loss_bbox": 0.20964, "loss": 0.96915, "time": 0.56362}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 8626, "data_time": 0.15103, "loss_rpn_cls": 0.22812, "loss_rpn_bbox": 0.09808, "loss_cls": 0.42208, "acc": 93.97583, "loss_bbox": 0.20011, "loss": 0.9484, "time": 0.55854}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 8626, "data_time": 0.14976, "loss_rpn_cls": 0.22123, "loss_rpn_bbox": 0.09575, "loss_cls": 0.41534, "acc": 93.74585, "loss_bbox": 0.20858, "loss": 0.9409, "time": 0.56302}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 8626, "data_time": 0.15153, "loss_rpn_cls": 0.22382, "loss_rpn_bbox": 0.09508, "loss_cls": 0.43318, "acc": 93.4502, "loss_bbox": 0.21982, "loss": 0.9719, "time": 0.56217}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 8626, "data_time": 0.15007, "loss_rpn_cls": 0.20306, "loss_rpn_bbox": 0.09423, "loss_cls": 0.42921, "acc": 93.40259, "loss_bbox": 0.22312, "loss": 0.94961, "time": 0.5624}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.02, "memory": 8626, "data_time": 0.1504, "loss_rpn_cls": 0.21264, "loss_rpn_bbox": 0.094, "loss_cls": 0.40006, "acc": 93.98218, "loss_bbox": 0.19831, "loss": 0.905, "time": 0.55807}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.02, "memory": 8626, "data_time": 0.14824, "loss_rpn_cls": 0.20016, "loss_rpn_bbox": 0.0928, "loss_cls": 0.41537, "acc": 93.67114, "loss_bbox": 0.21129, "loss": 0.91963, "time": 0.55778}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.02, "memory": 8626, "data_time": 0.15161, "loss_rpn_cls": 0.20245, "loss_rpn_bbox": 0.09155, "loss_cls": 0.41548, "acc": 93.69775, "loss_bbox": 0.21181, "loss": 0.9213, "time": 0.55835}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.02, "memory": 8626, "data_time": 0.14606, "loss_rpn_cls": 0.20434, "loss_rpn_bbox": 0.09269, "loss_cls": 0.42226, "acc": 93.44409, "loss_bbox": 0.21963, "loss": 0.93893, "time": 0.55833}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.02, "memory": 8626, "data_time": 0.15292, "loss_rpn_cls": 0.19611, "loss_rpn_bbox": 0.08949, "loss_cls": 0.43634, "acc": 93.23486, "loss_bbox": 0.22712, "loss": 0.94906, "time": 0.56294}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.02, "memory": 8626, "data_time": 0.15045, "loss_rpn_cls": 0.17316, "loss_rpn_bbox": 0.08665, "loss_cls": 0.43265, "acc": 93.16016, "loss_bbox": 0.2334, "loss": 0.92586, "time": 0.55835}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.02, "memory": 8626, "data_time": 0.15616, "loss_rpn_cls": 0.19108, "loss_rpn_bbox": 0.09573, "loss_cls": 0.43796, "acc": 93.22192, "loss_bbox": 0.22875, "loss": 0.95352, "time": 0.56227}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.02, "memory": 8626, "data_time": 0.1546, "loss_rpn_cls": 0.19827, "loss_rpn_bbox": 0.09574, "loss_cls": 0.42769, "acc": 93.10645, "loss_bbox": 0.22719, "loss": 0.94889, "time": 0.55737}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.02, "memory": 8626, "data_time": 0.15517, "loss_rpn_cls": 0.18232, "loss_rpn_bbox": 0.08758, "loss_cls": 0.4393, "acc": 93.16797, "loss_bbox": 0.23232, "loss": 0.94152, "time": 0.55839}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.02, "memory": 8626, "data_time": 0.15158, "loss_rpn_cls": 0.1767, "loss_rpn_bbox": 0.08789, "loss_cls": 0.43173, "acc": 93.22461, "loss_bbox": 0.22759, "loss": 0.92391, "time": 0.55913}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.02, "memory": 8626, "data_time": 0.14984, "loss_rpn_cls": 0.19559, "loss_rpn_bbox": 0.09548, "loss_cls": 0.44058, "acc": 92.87793, "loss_bbox": 0.23894, "loss": 0.97059, "time": 0.55838}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.02, "memory": 8626, "data_time": 0.15463, "loss_rpn_cls": 0.18069, "loss_rpn_bbox": 0.08717, "loss_cls": 0.42809, "acc": 93.14771, "loss_bbox": 0.23228, "loss": 0.92824, "time": 0.56255}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.02, "memory": 8626, "data_time": 0.15178, "loss_rpn_cls": 0.17895, "loss_rpn_bbox": 0.08967, "loss_cls": 0.44151, "acc": 92.71045, "loss_bbox": 0.24434, "loss": 0.95447, "time": 0.55833}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.02, "memory": 8626, "data_time": 0.14636, "loss_rpn_cls": 0.18874, "loss_rpn_bbox": 0.0965, "loss_cls": 0.4558, "acc": 92.63501, "loss_bbox": 0.24776, "loss": 0.9888, "time": 0.56232}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.02, "memory": 8626, "data_time": 0.15239, "loss_rpn_cls": 0.16242, "loss_rpn_bbox": 0.08745, "loss_cls": 0.43534, "acc": 92.94629, "loss_bbox": 0.23549, "loss": 0.92071, "time": 0.55849}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.02, "memory": 8627, "data_time": 0.15021, "loss_rpn_cls": 0.18074, "loss_rpn_bbox": 0.09209, "loss_cls": 0.45385, "acc": 92.6792, "loss_bbox": 0.24456, "loss": 0.97124, "time": 0.55642}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 0.02, "memory": 8627, "data_time": 0.14873, "loss_rpn_cls": 0.16691, "loss_rpn_bbox": 0.08783, "loss_cls": 0.43384, "acc": 92.87354, "loss_bbox": 0.23696, "loss": 0.92554, "time": 0.55947}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.02, "memory": 8627, "data_time": 0.14763, "loss_rpn_cls": 0.16692, "loss_rpn_bbox": 0.08498, "loss_cls": 0.45902, "acc": 92.48999, "loss_bbox": 0.24961, "loss": 0.96054, "time": 0.56092}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 0.02, "memory": 8627, "data_time": 0.1447, "loss_rpn_cls": 0.17015, "loss_rpn_bbox": 0.08947, "loss_cls": 0.47539, "acc": 92.229, "loss_bbox": 0.26153, "loss": 0.99654, "time": 0.55805}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.02, "memory": 8627, "data_time": 0.1534, "loss_rpn_cls": 0.17732, "loss_rpn_bbox": 0.0912, "loss_cls": 0.4469, "acc": 92.74731, "loss_bbox": 0.2427, "loss": 0.95812, "time": 0.55981}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 0.02, "memory": 8627, "data_time": 0.15296, "loss_rpn_cls": 0.16275, "loss_rpn_bbox": 0.09077, "loss_cls": 0.44959, "acc": 92.61865, "loss_bbox": 0.24552, "loss": 0.94863, "time": 0.56201}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 0.02, "memory": 8627, "data_time": 0.14773, "loss_rpn_cls": 0.16037, "loss_rpn_bbox": 0.08663, "loss_cls": 0.44272, "acc": 92.71387, "loss_bbox": 0.24205, "loss": 0.93176, "time": 0.56207}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 0.02, "memory": 8627, "data_time": 0.15502, "loss_rpn_cls": 0.15357, "loss_rpn_bbox": 0.0894, "loss_cls": 0.46309, "acc": 92.1084, "loss_bbox": 0.26401, "loss": 0.97006, "time": 0.55945}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 0.02, "memory": 8627, "data_time": 0.15462, "loss_rpn_cls": 0.16056, "loss_rpn_bbox": 0.08486, "loss_cls": 0.46491, "acc": 92.15234, "loss_bbox": 0.26056, "loss": 0.9709, "time": 0.56184}
{"mode": "train", "epoch": 1, "iter": 2050, "lr": 0.02, "memory": 8627, "data_time": 0.15416, "loss_rpn_cls": 0.16066, "loss_rpn_bbox": 0.08882, "loss_cls": 0.4506, "acc": 92.4165, "loss_bbox": 0.25221, "loss": 0.95229, "time": 0.56009}
{"mode": "train", "epoch": 1, "iter": 2100, "lr": 0.02, "memory": 8627, "data_time": 0.15062, "loss_rpn_cls": 0.1535, "loss_rpn_bbox": 0.08254, "loss_cls": 0.44289, "acc": 92.59058, "loss_bbox": 0.24586, "loss": 0.92479, "time": 0.56281}
{"mode": "train", "epoch": 1, "iter": 2150, "lr": 0.02, "memory": 8627, "data_time": 0.15129, "loss_rpn_cls": 0.15607, "loss_rpn_bbox": 0.08389, "loss_cls": 0.44701, "acc": 92.39331, "loss_bbox": 0.25124, "loss": 0.93821, "time": 0.55715}
{"mode": "train", "epoch": 1, "iter": 2200, "lr": 0.02, "memory": 8627, "data_time": 0.15097, "loss_rpn_cls": 0.15395, "loss_rpn_bbox": 0.09066, "loss_cls": 0.45201, "acc": 92.35938, "loss_bbox": 0.25101, "loss": 0.94763, "time": 0.5614}
{"mode": "train", "epoch": 1, "iter": 2250, "lr": 0.02, "memory": 8627, "data_time": 0.15678, "loss_rpn_cls": 0.14944, "loss_rpn_bbox": 0.08559, "loss_cls": 0.44837, "acc": 92.51294, "loss_bbox": 0.24505, "loss": 0.92845, "time": 0.56374}
{"mode": "train", "epoch": 1, "iter": 2300, "lr": 0.02, "memory": 8627, "data_time": 0.15576, "loss_rpn_cls": 0.14794, "loss_rpn_bbox": 0.08637, "loss_cls": 0.46216, "acc": 91.93896, "loss_bbox": 0.26561, "loss": 0.96209, "time": 0.55943}
{"mode": "train", "epoch": 1, "iter": 2350, "lr": 0.02, "memory": 8627, "data_time": 0.15211, "loss_rpn_cls": 0.14561, "loss_rpn_bbox": 0.08498, "loss_cls": 0.44457, "acc": 92.36182, "loss_bbox": 0.25174, "loss": 0.9269, "time": 0.56117}
{"mode": "train", "epoch": 1, "iter": 2400, "lr": 0.02, "memory": 8627, "data_time": 0.15084, "loss_rpn_cls": 0.14573, "loss_rpn_bbox": 0.08678, "loss_cls": 0.46323, "acc": 92.03564, "loss_bbox": 0.26247, "loss": 0.95821, "time": 0.5582}
{"mode": "train", "epoch": 1, "iter": 2450, "lr": 0.02, "memory": 8627, "data_time": 0.14664, "loss_rpn_cls": 0.14951, "loss_rpn_bbox": 0.08486, "loss_cls": 0.46499, "acc": 91.95117, "loss_bbox": 0.26518, "loss": 0.96455, "time": 0.55764}
{"mode": "train", "epoch": 1, "iter": 2500, "lr": 0.02, "memory": 8627, "data_time": 0.14988, "loss_rpn_cls": 0.1493, "loss_rpn_bbox": 0.0829, "loss_cls": 0.45676, "acc": 92.05444, "loss_bbox": 0.25766, "loss": 0.94662, "time": 0.55832}
{"mode": "train", "epoch": 1, "iter": 2550, "lr": 0.02, "memory": 8627, "data_time": 0.15271, "loss_rpn_cls": 0.14238, "loss_rpn_bbox": 0.08258, "loss_cls": 0.45367, "acc": 92.12891, "loss_bbox": 0.25682, "loss": 0.93545, "time": 0.56085}
{"mode": "train", "epoch": 1, "iter": 2600, "lr": 0.02, "memory": 8627, "data_time": 0.14997, "loss_rpn_cls": 0.14571, "loss_rpn_bbox": 0.0824, "loss_cls": 0.46438, "acc": 91.9502, "loss_bbox": 0.26357, "loss": 0.95605, "time": 0.5593}
{"mode": "train", "epoch": 1, "iter": 2650, "lr": 0.02, "memory": 8627, "data_time": 0.14632, "loss_rpn_cls": 0.15425, "loss_rpn_bbox": 0.08503, "loss_cls": 0.45896, "acc": 91.92578, "loss_bbox": 0.26356, "loss": 0.9618, "time": 0.55739}
{"mode": "train", "epoch": 1, "iter": 2700, "lr": 0.02, "memory": 8627, "data_time": 0.15241, "loss_rpn_cls": 0.14715, "loss_rpn_bbox": 0.08618, "loss_cls": 0.46122, "acc": 91.71582, "loss_bbox": 0.26827, "loss": 0.96283, "time": 0.55892}
{"mode": "train", "epoch": 1, "iter": 2750, "lr": 0.02, "memory": 8627, "data_time": 0.15246, "loss_rpn_cls": 0.13764, "loss_rpn_bbox": 0.08062, "loss_cls": 0.44062, "acc": 92.10913, "loss_bbox": 0.25413, "loss": 0.91301, "time": 0.56334}
{"mode": "train", "epoch": 1, "iter": 2800, "lr": 0.02, "memory": 8627, "data_time": 0.14966, "loss_rpn_cls": 0.13828, "loss_rpn_bbox": 0.08215, "loss_cls": 0.44161, "acc": 92.16846, "loss_bbox": 0.25198, "loss": 0.91402, "time": 0.55608}
{"mode": "train", "epoch": 1, "iter": 2850, "lr": 0.02, "memory": 8627, "data_time": 0.14161, "loss_rpn_cls": 0.13981, "loss_rpn_bbox": 0.08381, "loss_cls": 0.46158, "acc": 91.77222, "loss_bbox": 0.26607, "loss": 0.95126, "time": 0.55886}
{"mode": "train", "epoch": 1, "iter": 2900, "lr": 0.02, "memory": 8627, "data_time": 0.14774, "loss_rpn_cls": 0.13498, "loss_rpn_bbox": 0.08198, "loss_cls": 0.44859, "acc": 91.9834, "loss_bbox": 0.25791, "loss": 0.92346, "time": 0.56031}
{"mode": "train", "epoch": 1, "iter": 2950, "lr": 0.02, "memory": 8627, "data_time": 0.15527, "loss_rpn_cls": 0.13224, "loss_rpn_bbox": 0.08444, "loss_cls": 0.45094, "acc": 91.89795, "loss_bbox": 0.26083, "loss": 0.92845, "time": 0.56128}
{"mode": "train", "epoch": 1, "iter": 3000, "lr": 0.02, "memory": 8627, "data_time": 0.14286, "loss_rpn_cls": 0.14458, "loss_rpn_bbox": 0.08989, "loss_cls": 0.44897, "acc": 91.97363, "loss_bbox": 0.25691, "loss": 0.94036, "time": 0.55821}
{"mode": "train", "epoch": 1, "iter": 3050, "lr": 0.02, "memory": 8627, "data_time": 0.14945, "loss_rpn_cls": 0.14592, "loss_rpn_bbox": 0.08342, "loss_cls": 0.46771, "acc": 91.56836, "loss_bbox": 0.27253, "loss": 0.96958, "time": 0.56032}
{"mode": "train", "epoch": 1, "iter": 3100, "lr": 0.02, "memory": 8627, "data_time": 0.14539, "loss_rpn_cls": 0.13657, "loss_rpn_bbox": 0.08036, "loss_cls": 0.43908, "acc": 92.05371, "loss_bbox": 0.25693, "loss": 0.91295, "time": 0.56186}
{"mode": "train", "epoch": 1, "iter": 3150, "lr": 0.02, "memory": 8627, "data_time": 0.14963, "loss_rpn_cls": 0.12774, "loss_rpn_bbox": 0.08352, "loss_cls": 0.45241, "acc": 91.84741, "loss_bbox": 0.26495, "loss": 0.92862, "time": 0.55892}
{"mode": "train", "epoch": 1, "iter": 3200, "lr": 0.02, "memory": 8627, "data_time": 0.15004, "loss_rpn_cls": 0.14133, "loss_rpn_bbox": 0.08263, "loss_cls": 0.44795, "acc": 91.89624, "loss_bbox": 0.26101, "loss": 0.93292, "time": 0.56353}
{"mode": "train", "epoch": 1, "iter": 3250, "lr": 0.02, "memory": 8627, "data_time": 0.1499, "loss_rpn_cls": 0.12796, "loss_rpn_bbox": 0.08019, "loss_cls": 0.47126, "acc": 91.177, "loss_bbox": 0.2836, "loss": 0.96301, "time": 0.56242}
{"mode": "train", "epoch": 1, "iter": 3300, "lr": 0.02, "memory": 8627, "data_time": 0.15553, "loss_rpn_cls": 0.13663, "loss_rpn_bbox": 0.08481, "loss_cls": 0.45887, "acc": 91.5332, "loss_bbox": 0.27181, "loss": 0.95213, "time": 0.56068}
{"mode": "train", "epoch": 1, "iter": 3350, "lr": 0.02, "memory": 8627, "data_time": 0.15647, "loss_rpn_cls": 0.13312, "loss_rpn_bbox": 0.07645, "loss_cls": 0.44281, "acc": 91.92212, "loss_bbox": 0.26031, "loss": 0.91269, "time": 0.5594}
{"mode": "train", "epoch": 1, "iter": 3400, "lr": 0.02, "memory": 8627, "data_time": 0.14872, "loss_rpn_cls": 0.13468, "loss_rpn_bbox": 0.08632, "loss_cls": 0.4378, "acc": 91.83545, "loss_bbox": 0.26068, "loss": 0.91948, "time": 0.55578}
{"mode": "train", "epoch": 1, "iter": 3450, "lr": 0.02, "memory": 8627, "data_time": 0.14898, "loss_rpn_cls": 0.13206, "loss_rpn_bbox": 0.08479, "loss_cls": 0.44635, "acc": 91.65771, "loss_bbox": 0.26756, "loss": 0.93076, "time": 0.55539}
{"mode": "train", "epoch": 1, "iter": 3500, "lr": 0.02, "memory": 8627, "data_time": 0.153, "loss_rpn_cls": 0.13825, "loss_rpn_bbox": 0.08067, "loss_cls": 0.44516, "acc": 91.70776, "loss_bbox": 0.26305, "loss": 0.92713, "time": 0.55821}
{"mode": "train", "epoch": 1, "iter": 3550, "lr": 0.02, "memory": 8627, "data_time": 0.15676, "loss_rpn_cls": 0.12841, "loss_rpn_bbox": 0.08148, "loss_cls": 0.46566, "acc": 91.33765, "loss_bbox": 0.27728, "loss": 0.95283, "time": 0.56114}
{"mode": "train", "epoch": 1, "iter": 3600, "lr": 0.02, "memory": 8627, "data_time": 0.15112, "loss_rpn_cls": 0.12955, "loss_rpn_bbox": 0.07812, "loss_cls": 0.44511, "acc": 91.58325, "loss_bbox": 0.26654, "loss": 0.91933, "time": 0.56205}
