{"env_info": "sys.platform: linux\nPython: 3.7.9 (default, Aug 31 2020, 12:42:55) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.130\nGCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\nPyTorch: 1.4.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CUDA Runtime 10.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.1\n  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.5.0\nOpenCV: 4.4.0\nMMCV: 1.1.5\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.0\nMMDetection: 2.5.0+", "config": "dataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nannotations_root = 'annotations/'\nimage_root = '/root/userfolder/data/TCTAnnotatedData/'\nclasses = ('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n           'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n           'dysbacteriosis_herpes_act', 'ec')\nimg_norm_cfg = dict(\n    mean=[102.9801, 115.9465, 122.7717], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(1333, 640), (1333, 800)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[102.9801, 115.9465, 122.7717],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=0,\n    train=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='annotations/train30000-cat10.json',\n        img_prefix='/root/userfolder/data/TCTAnnotatedData/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(1333, 640), (1333, 800)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='annotations/val10000-cat10.json',\n        img_prefix='/root/userfolder/data/TCTAnnotatedData/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='annotations/test10000-cat10.json',\n        img_prefix='/root/userfolder/data/TCTAnnotatedData/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(\n    type='SGD',\n    lr=0.01,\n    momentum=0.9,\n    weight_decay=0.0001,\n    paramwise_cfg=dict(bias_lr_mult=2.0, bias_decay_mult=0.0))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='constant',\n    warmup_iters=500,\n    warmup_ratio=0.3333333333333333,\n    step=[16, 22])\ntotal_epochs = 24\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nmodel = dict(\n    type='FCOS',\n    pretrained='icode/moco_v2_800ep_pretrain_rename.pth',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='caffe'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs=True,\n        extra_convs_on_inputs=False,\n        num_outs=5,\n        relu_before_extra_convs=True),\n    bbox_head=dict(\n        type='FCOSHead',\n        num_classes=10,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        strides=[8, 16, 32, 64, 128],\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='IoULoss', loss_weight=1.0),\n        loss_centerness=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)))\ntrain_cfg = dict(\n    assigner=dict(\n        type='MaxIoUAssigner',\n        pos_iou_thr=0.5,\n        neg_iou_thr=0.4,\n        min_pos_iou=0,\n        ignore_iof_thr=-1),\n    allowed_border=-1,\n    pos_weight=-1,\n    debug=False)\ntest_cfg = dict(\n    nms_pre=1000,\n    min_bbox_size=0,\n    score_thr=0.05,\n    nms=dict(type='nms', iou_threshold=0.5),\n    max_per_img=100)\nwork_dir = './work_dirs/fcos_r50_caffe_fpn_gn-head_mstrain_640-800_4x4_2x_coco_moco'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "fcos_r50_caffe_fpn_gn-head_mstrain_640-800_4x4_2x_coco_moco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00333, "memory": 6007, "data_time": 1.03871, "loss_cls": 0.85634, "loss_bbox": 1.35087, "loss_centerness": 0.65775, "loss": 2.86496, "grad_norm": 18.81336, "time": 1.64689}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00333, "memory": 6016, "data_time": 0.9823, "loss_cls": 0.76588, "loss_bbox": 0.92396, "loss_centerness": 0.65347, "loss": 2.34331, "grad_norm": 5.3768, "time": 1.57096}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00333, "memory": 6018, "data_time": 0.96152, "loss_cls": 0.76493, "loss_bbox": 0.91237, "loss_centerness": 0.65249, "loss": 2.32979, "grad_norm": 3.79739, "time": 1.5625}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00333, "memory": 6018, "data_time": 0.98986, "loss_cls": 0.74878, "loss_bbox": 0.88683, "loss_centerness": 0.6528, "loss": 2.28841, "grad_norm": 3.03249, "time": 1.5694}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00333, "memory": 6024, "data_time": 0.99858, "loss_cls": 0.7504, "loss_bbox": 0.895, "loss_centerness": 0.65268, "loss": 2.29808, "grad_norm": 3.32263, "time": 1.56902}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00333, "memory": 6024, "data_time": 0.96868, "loss_cls": 0.75634, "loss_bbox": 0.9019, "loss_centerness": 0.6532, "loss": 2.31144, "grad_norm": 3.41164, "time": 1.56407}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00333, "memory": 6024, "data_time": 0.96322, "loss_cls": 0.74876, "loss_bbox": 0.89439, "loss_centerness": 0.65249, "loss": 2.29564, "grad_norm": 3.58805, "time": 1.56733}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00333, "memory": 6024, "data_time": 0.99026, "loss_cls": 0.74606, "loss_bbox": 0.89364, "loss_centerness": 0.65295, "loss": 2.29265, "grad_norm": 3.06237, "time": 1.57076}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00333, "memory": 6024, "data_time": 1.02702, "loss_cls": 0.74355, "loss_bbox": 0.88763, "loss_centerness": 0.65274, "loss": 2.28392, "grad_norm": 3.21227, "time": 1.61764}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00333, "memory": 6024, "data_time": 0.98948, "loss_cls": 0.73951, "loss_bbox": 0.88504, "loss_centerness": 0.65279, "loss": 2.27734, "grad_norm": 3.08084, "time": 1.57296}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.01, "memory": 6024, "data_time": 1.02378, "loss_cls": 0.75531, "loss_bbox": 0.95905, "loss_centerness": 0.65279, "loss": 2.36715, "grad_norm": 5.83253, "time": 1.57322}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.01, "memory": 6024, "data_time": 0.99368, "loss_cls": 0.74744, "loss_bbox": 1.02541, "loss_centerness": 0.65361, "loss": 2.42646, "grad_norm": 6.21183, "time": 1.57877}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.01, "memory": 6024, "data_time": 1.00069, "loss_cls": 0.75547, "loss_bbox": 0.95013, "loss_centerness": 0.65299, "loss": 2.35858, "grad_norm": 3.85338, "time": 1.57668}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.01, "memory": 6024, "data_time": 0.98854, "loss_cls": 0.74974, "loss_bbox": 0.90862, "loss_centerness": 0.65314, "loss": 2.31149, "grad_norm": 3.33909, "time": 1.57187}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.01, "memory": 6024, "data_time": 0.9933, "loss_cls": 0.74248, "loss_bbox": 0.93001, "loss_centerness": 0.65272, "loss": 2.32521, "grad_norm": 4.16173, "time": 1.55916}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.01, "memory": 6024, "data_time": 0.96501, "loss_cls": 0.70883, "loss_bbox": 0.91214, "loss_centerness": 0.65035, "loss": 2.27132, "grad_norm": 5.33999, "time": 1.56907}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.01, "memory": 6024, "data_time": 0.98981, "loss_cls": 0.69802, "loss_bbox": 0.87015, "loss_centerness": 0.64582, "loss": 2.21399, "grad_norm": 5.99917, "time": 1.55452}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.01, "memory": 6024, "data_time": 0.99326, "loss_cls": 0.67539, "loss_bbox": 0.86498, "loss_centerness": 0.64131, "loss": 2.18167, "grad_norm": 5.97579, "time": 1.56959}
{"mode": "val", "epoch": 1, "iter": 938, "lr": 0.01, "bbox_mAP": 0.001, "bbox_mAP_50": 0.003, "bbox_mAP_75": 0.0, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.001, "bbox_mAP_copypaste": "0.001 0.003 0.000 -1.000 0.000 0.001"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.01, "memory": 6024, "data_time": 0.71649, "loss_cls": 0.65656, "loss_bbox": 0.77515, "loss_centerness": 0.63317, "loss": 2.06488, "grad_norm": 4.97599, "time": 1.30125}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.01, "memory": 6024, "data_time": 0.68652, "loss_cls": 0.63436, "loss_bbox": 0.78458, "loss_centerness": 0.63154, "loss": 2.05049, "grad_norm": 4.98836, "time": 1.25828}
