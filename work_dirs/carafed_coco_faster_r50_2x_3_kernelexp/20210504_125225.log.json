{"env_info": "sys.platform: linux\nPython: 3.6.12 |Anaconda, Inc.| (default, Sep  8 2020, 23:10:56) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.130\nGCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\nPyTorch: 1.4.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CUDA Runtime 10.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.1\n  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.5.0\nOpenCV: 4.4.0\nMMCV: 1.1.5\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.0\nMMDetection: 2.5.0+", "config": "model = dict(\n    type='FasterRCNN',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet_carafed_3_kernelexp',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=80,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))))\ntrain_cfg = dict(\n    rpn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.7,\n            neg_iou_thr=0.3,\n            min_pos_iou=0.3,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=256,\n            pos_fraction=0.5,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    rpn_proposal=dict(\n        nms_across_levels=False,\n        nms_pre=2000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0.5,\n            match_low_quality=False,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=512,\n            pos_fraction=0.25,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=True),\n        pos_weight=-1,\n        debug=False))\ntest_cfg = dict(\n    rpn=dict(\n        nms_across_levels=False,\n        nms_pre=1000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'CocoDataset'\ndata_root = '../data/coco/'\nannotations_root = '../data/coco/annotations/'\nimage_root = '../data/coco/'\nimg_scale = (1333, 800)\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=0,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/instances_train2017.json',\n        img_prefix='../data/coco/train2017',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/instances_val2017.json',\n        img_prefix='../data/coco/val2017',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/image_info_test-dev2017.json',\n        img_prefix='../data/coco/test2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\ntotal_epochs = 24\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/carafed_coco_faster_r50_2x_3_kernelexp'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "carafed_coco_faster_r50_2x_3_kernelexp.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 8655, "data_time": 0.20037, "loss_rpn_cls": 0.41187, "loss_rpn_bbox": 0.10815, "loss_cls": 1.32428, "acc": 87.59375, "loss_bbox": 0.12266, "loss": 1.96696, "time": 0.71824}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 8656, "data_time": 0.12829, "loss_rpn_cls": 0.26424, "loss_rpn_bbox": 0.0929, "loss_cls": 0.612, "acc": 94.54956, "loss_bbox": 0.18208, "loss": 1.15122, "time": 0.57513}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 8656, "data_time": 0.12817, "loss_rpn_cls": 0.26227, "loss_rpn_bbox": 0.0973, "loss_cls": 0.59737, "acc": 94.42236, "loss_bbox": 0.1828, "loss": 1.13975, "time": 0.58133}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 8656, "data_time": 0.12689, "loss_rpn_cls": 0.2713, "loss_rpn_bbox": 0.10056, "loss_cls": 0.53087, "acc": 94.03589, "loss_bbox": 0.19774, "loss": 1.10047, "time": 0.57875}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 8656, "data_time": 0.13313, "loss_rpn_cls": 0.2721, "loss_rpn_bbox": 0.10265, "loss_cls": 0.47248, "acc": 94.36304, "loss_bbox": 0.18513, "loss": 1.03237, "time": 0.57458}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 8656, "data_time": 0.13026, "loss_rpn_cls": 0.26663, "loss_rpn_bbox": 0.09822, "loss_cls": 0.4785, "acc": 94.24365, "loss_bbox": 0.19237, "loss": 1.03572, "time": 0.57857}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 8656, "data_time": 0.12582, "loss_rpn_cls": 0.24841, "loss_rpn_bbox": 0.09645, "loss_cls": 0.47021, "acc": 94.34717, "loss_bbox": 0.19043, "loss": 1.0055, "time": 0.57857}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 8656, "data_time": 0.13217, "loss_rpn_cls": 0.26226, "loss_rpn_bbox": 0.09865, "loss_cls": 0.44429, "acc": 94.01636, "loss_bbox": 0.2001, "loss": 1.0053, "time": 0.57923}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 8656, "data_time": 0.12786, "loss_rpn_cls": 0.23457, "loss_rpn_bbox": 0.09864, "loss_cls": 0.44568, "acc": 93.97949, "loss_bbox": 0.20526, "loss": 0.98414, "time": 0.57994}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 8656, "data_time": 0.13142, "loss_rpn_cls": 0.23141, "loss_rpn_bbox": 0.09463, "loss_cls": 0.41893, "acc": 93.95142, "loss_bbox": 0.20444, "loss": 0.94942, "time": 0.57799}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 8656, "data_time": 0.12997, "loss_rpn_cls": 0.22971, "loss_rpn_bbox": 0.09224, "loss_cls": 0.41996, "acc": 94.01953, "loss_bbox": 0.20239, "loss": 0.9443, "time": 0.57686}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 8656, "data_time": 0.12878, "loss_rpn_cls": 0.23313, "loss_rpn_bbox": 0.09525, "loss_cls": 0.42427, "acc": 93.87305, "loss_bbox": 0.20512, "loss": 0.95777, "time": 0.57898}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 8656, "data_time": 0.13138, "loss_rpn_cls": 0.24294, "loss_rpn_bbox": 0.09954, "loss_cls": 0.40464, "acc": 94.04126, "loss_bbox": 0.19742, "loss": 0.94455, "time": 0.57571}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 8656, "data_time": 0.12562, "loss_rpn_cls": 0.23247, "loss_rpn_bbox": 0.0973, "loss_cls": 0.40577, "acc": 93.89624, "loss_bbox": 0.20121, "loss": 0.93675, "time": 0.57773}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 8656, "data_time": 0.12971, "loss_rpn_cls": 0.23216, "loss_rpn_bbox": 0.09641, "loss_cls": 0.41712, "acc": 93.646, "loss_bbox": 0.21215, "loss": 0.95783, "time": 0.57827}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 8656, "data_time": 0.13012, "loss_rpn_cls": 0.21539, "loss_rpn_bbox": 0.09616, "loss_cls": 0.41048, "acc": 93.54712, "loss_bbox": 0.21647, "loss": 0.9385, "time": 0.57803}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.02, "memory": 8656, "data_time": 0.13029, "loss_rpn_cls": 0.22363, "loss_rpn_bbox": 0.0956, "loss_cls": 0.38256, "acc": 94.18286, "loss_bbox": 0.19011, "loss": 0.8919, "time": 0.57816}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.02, "memory": 8656, "data_time": 0.12785, "loss_rpn_cls": 0.20723, "loss_rpn_bbox": 0.09363, "loss_cls": 0.40559, "acc": 93.77417, "loss_bbox": 0.2073, "loss": 0.91376, "time": 0.57786}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.02, "memory": 8656, "data_time": 0.1346, "loss_rpn_cls": 0.20674, "loss_rpn_bbox": 0.09272, "loss_cls": 0.41306, "acc": 93.71167, "loss_bbox": 0.21051, "loss": 0.92303, "time": 0.57947}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.02, "memory": 8656, "data_time": 0.12351, "loss_rpn_cls": 0.20654, "loss_rpn_bbox": 0.09309, "loss_cls": 0.42126, "acc": 93.43896, "loss_bbox": 0.2187, "loss": 0.93958, "time": 0.57896}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.02, "memory": 8656, "data_time": 0.12698, "loss_rpn_cls": 0.19651, "loss_rpn_bbox": 0.09126, "loss_cls": 0.4369, "acc": 93.28516, "loss_bbox": 0.22452, "loss": 0.94919, "time": 0.57827}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.02, "memory": 8656, "data_time": 0.13426, "loss_rpn_cls": 0.18767, "loss_rpn_bbox": 0.08778, "loss_cls": 0.42256, "acc": 93.41943, "loss_bbox": 0.22293, "loss": 0.92094, "time": 0.5787}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.02, "memory": 8656, "data_time": 0.13137, "loss_rpn_cls": 0.20604, "loss_rpn_bbox": 0.09698, "loss_cls": 0.42556, "acc": 93.53003, "loss_bbox": 0.21594, "loss": 0.94453, "time": 0.57873}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.02, "memory": 8656, "data_time": 0.13132, "loss_rpn_cls": 0.21258, "loss_rpn_bbox": 0.09761, "loss_cls": 0.41801, "acc": 93.36743, "loss_bbox": 0.21704, "loss": 0.94524, "time": 0.57679}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.02, "memory": 8656, "data_time": 0.1278, "loss_rpn_cls": 0.19471, "loss_rpn_bbox": 0.0878, "loss_cls": 0.43021, "acc": 93.34692, "loss_bbox": 0.22488, "loss": 0.93761, "time": 0.57842}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.02, "memory": 8656, "data_time": 0.12681, "loss_rpn_cls": 0.18644, "loss_rpn_bbox": 0.08943, "loss_cls": 0.43075, "acc": 93.30908, "loss_bbox": 0.22334, "loss": 0.92995, "time": 0.57964}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.02, "memory": 8656, "data_time": 0.12848, "loss_rpn_cls": 0.20081, "loss_rpn_bbox": 0.09623, "loss_cls": 0.44205, "acc": 92.95264, "loss_bbox": 0.23674, "loss": 0.97583, "time": 0.5787}
