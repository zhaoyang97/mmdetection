{"env_info": "sys.platform: linux\nPython: 3.6.12 |Anaconda, Inc.| (default, Sep  8 2020, 23:10:56) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.130\nGCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\nPyTorch: 1.4.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CUDA Runtime 10.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.1\n  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.5.0\nOpenCV: 4.4.0\nMMCV: 1.1.5\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.0\nMMDetection: 2.5.0+", "config": "model = dict(\n    type='FasterRCNN',\n    pretrained='icode/moco_v2_800ep_pretrain_rename.pth',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='caffe'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=20,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))))\ntrain_cfg = dict(\n    rpn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.7,\n            neg_iou_thr=0.3,\n            min_pos_iou=0.3,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=256,\n            pos_fraction=0.5,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    rpn_proposal=dict(\n        nms_across_levels=False,\n        nms_pre=2000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0.5,\n            match_low_quality=False,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=512,\n            pos_fraction=0.25,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=True),\n        pos_weight=-1,\n        debug=False))\ntest_cfg = dict(\n    rpn=dict(\n        nms_across_levels=False,\n        nms_pre=1000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'VOCDataset'\ndata_root = '/root/userfolder/data/voc0712/VOCdevkit/'\nimg_norm_cfg = dict(\n    mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[103.53, 116.28, 123.675],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=0,\n    train=dict(\n        type='RepeatDataset',\n        times=3,\n        dataset=dict(\n            type='VOCDataset',\n            ann_file=[\n                '/root/userfolder/data/voc0712/VOCdevkit/VOC2007/ImageSets/Main/trainval.txt',\n                '/root/userfolder/data/voc0712/VOCdevkit/VOC2012/ImageSets/Main/trainval.txt'\n            ],\n            img_prefix=[\n                '/root/userfolder/data/voc0712/VOCdevkit/VOC2007/',\n                '/root/userfolder/data/voc0712/VOCdevkit/VOC2012/'\n            ],\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations', with_bbox=True),\n                dict(type='Resize', img_scale=(1000, 600), keep_ratio=True),\n                dict(type='RandomFlip', flip_ratio=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size_divisor=32),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n            ]),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='VOCDataset',\n        ann_file=\n        '/root/userfolder/data/voc0712/VOCdevkit/VOC2007/ImageSets/Main/test.txt',\n        img_prefix='/root/userfolder/data/voc0712/VOCdevkit/VOC2007/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='VOCDataset',\n        ann_file=\n        '/root/userfolder/data/voc0712/VOCdevkit/VOC2007/ImageSets/Main/test.txt',\n        img_prefix='/root/userfolder/data/voc0712/VOCdevkit/VOC2007/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='mAP')\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\noptimizer = dict(type='SGD', lr=0.0025, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\ntotal_epochs = 24\nwork_dir = './work_dirs/faster_rcnn_r50_caffe_fpn_2x_voc_mocov2_800ep'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "faster_rcnn_r50_caffe_fpn_2x_voc_mocov2_800ep.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00025, "memory": 2469, "data_time": 0.13099, "loss_rpn_cls": 0.6917, "loss_rpn_bbox": 0.02326, "loss_cls": 2.8895, "acc": 61.59277, "loss_bbox": 0.00171, "loss": 3.60616, "time": 0.42897}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0005, "memory": 2469, "data_time": 0.07203, "loss_rpn_cls": 0.34123, "loss_rpn_bbox": 0.0289, "loss_cls": 0.73487, "acc": 98.29492, "loss_bbox": 0.05863, "loss": 1.16364, "time": 0.30078}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00075, "memory": 2469, "data_time": 0.0724, "loss_rpn_cls": 0.0922, "loss_rpn_bbox": 0.02468, "loss_cls": 0.37299, "acc": 96.80078, "loss_bbox": 0.12524, "loss": 0.61511, "time": 0.30521}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.001, "memory": 2469, "data_time": 0.06953, "loss_rpn_cls": 0.07799, "loss_rpn_bbox": 0.02079, "loss_cls": 0.38593, "acc": 96.49609, "loss_bbox": 0.13891, "loss": 0.62362, "time": 0.30691}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00125, "memory": 2469, "data_time": 0.06936, "loss_rpn_cls": 0.07628, "loss_rpn_bbox": 0.0222, "loss_cls": 0.31792, "acc": 96.17383, "loss_bbox": 0.14938, "loss": 0.56578, "time": 0.30197}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.0015, "memory": 2469, "data_time": 0.07165, "loss_rpn_cls": 0.07023, "loss_rpn_bbox": 0.01888, "loss_cls": 0.33153, "acc": 96.22852, "loss_bbox": 0.14934, "loss": 0.56997, "time": 0.30603}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00175, "memory": 2469, "data_time": 0.07189, "loss_rpn_cls": 0.07863, "loss_rpn_bbox": 0.02436, "loss_cls": 0.34052, "acc": 95.16797, "loss_bbox": 0.19033, "loss": 0.63384, "time": 0.30748}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.002, "memory": 2469, "data_time": 0.07302, "loss_rpn_cls": 0.07911, "loss_rpn_bbox": 0.02137, "loss_cls": 0.29996, "acc": 95.83008, "loss_bbox": 0.16202, "loss": 0.56245, "time": 0.29915}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00225, "memory": 2469, "data_time": 0.0672, "loss_rpn_cls": 0.07515, "loss_rpn_bbox": 0.0218, "loss_cls": 0.30317, "acc": 95.90625, "loss_bbox": 0.16134, "loss": 0.56146, "time": 0.31625}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.0025, "memory": 2469, "data_time": 0.06978, "loss_rpn_cls": 0.07817, "loss_rpn_bbox": 0.02424, "loss_cls": 0.30749, "acc": 95.48828, "loss_bbox": 0.17922, "loss": 0.58913, "time": 0.29506}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.0025, "memory": 2469, "data_time": 0.07427, "loss_rpn_cls": 0.05724, "loss_rpn_bbox": 0.01788, "loss_cls": 0.26203, "acc": 95.99805, "loss_bbox": 0.15969, "loss": 0.49684, "time": 0.2992}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.0025, "memory": 2469, "data_time": 0.07071, "loss_rpn_cls": 0.06114, "loss_rpn_bbox": 0.02152, "loss_cls": 0.3001, "acc": 95.58984, "loss_bbox": 0.17755, "loss": 0.5603, "time": 0.29632}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.0025, "memory": 2469, "data_time": 0.06906, "loss_rpn_cls": 0.06222, "loss_rpn_bbox": 0.02202, "loss_cls": 0.28568, "acc": 95.65039, "loss_bbox": 0.17262, "loss": 0.54254, "time": 0.30172}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.0025, "memory": 2469, "data_time": 0.06956, "loss_rpn_cls": 0.05985, "loss_rpn_bbox": 0.02395, "loss_cls": 0.30585, "acc": 95.39746, "loss_bbox": 0.18244, "loss": 0.57208, "time": 0.3002}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.0025, "memory": 2469, "data_time": 0.06758, "loss_rpn_cls": 0.05571, "loss_rpn_bbox": 0.02053, "loss_cls": 0.30833, "acc": 95.24414, "loss_bbox": 0.19114, "loss": 0.57571, "time": 0.30059}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.0025, "memory": 2469, "data_time": 0.06855, "loss_rpn_cls": 0.06232, "loss_rpn_bbox": 0.02201, "loss_cls": 0.26747, "acc": 95.58105, "loss_bbox": 0.17335, "loss": 0.52516, "time": 0.29576}
