{"env_info": "sys.platform: linux\nPython: 3.6.12 |Anaconda, Inc.| (default, Sep  8 2020, 23:10:56) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: GeForce RTX 2080 Ti\nCUDA_HOME: None\nGCC: gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44)\nPyTorch: 1.4.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CUDA Runtime 10.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.1\n  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.5.0\nOpenCV: 4.5.1\nMMCV: 1.1.6\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.0\nMMDetection: 2.5.0+", "config": "model = dict(\n    type='FasterRCNN',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN_CARAFE_se_3',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5,\n        start_level=0,\n        end_level=-1,\n        norm_cfg=None,\n        act_cfg=None,\n        order=('conv', 'norm', 'act'),\n        upsample_cfg=dict(\n            type='carafe',\n            up_kernel=5,\n            up_group=1,\n            encoder_kernel=3,\n            encoder_dilation=1,\n            compressed_channels=64)),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=80,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))))\ntrain_cfg = dict(\n    rpn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.7,\n            neg_iou_thr=0.3,\n            min_pos_iou=0.3,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=256,\n            pos_fraction=0.5,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    rpn_proposal=dict(\n        nms_across_levels=False,\n        nms_pre=2000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0.5,\n            match_low_quality=False,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=512,\n            pos_fraction=0.25,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=True),\n        pos_weight=-1,\n        debug=False))\ntest_cfg = dict(\n    rpn=dict(\n        nms_across_levels=False,\n        nms_pre=1000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'CocoDataset'\ndata_root = '../data/coco/'\nannotations_root = '../data/coco/annotations/'\nimage_root = '../data/coco/'\nimg_scale = (1333, 800)\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=64),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=64),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=0,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/instances_train2017.json',\n        img_prefix='../data/coco/train2017',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=64),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/instances_val2017.json',\n        img_prefix='../data/coco/val2017',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=64),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/image_info_test-dev2017.json',\n        img_prefix='../data/coco/test2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=64),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\ntotal_epochs = 12\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/coco_carafe_se_3'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "coco_carafe_se_3.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 4268, "data_time": 0.21129, "loss_rpn_cls": 0.50307, "loss_rpn_bbox": 0.11771, "loss_cls": 1.56544, "acc": 84.75293, "loss_bbox": 0.07239, "loss": 2.25862, "time": 0.53853}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 4268, "data_time": 0.09543, "loss_rpn_cls": 0.22813, "loss_rpn_bbox": 0.0854, "loss_cls": 0.54373, "acc": 94.72314, "loss_bbox": 0.1771, "loss": 1.03435, "time": 0.40965}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 4268, "data_time": 0.09486, "loss_rpn_cls": 0.18827, "loss_rpn_bbox": 0.09486, "loss_cls": 0.4534, "acc": 93.79053, "loss_bbox": 0.20983, "loss": 0.94637, "time": 0.40734}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 4268, "data_time": 0.09506, "loss_rpn_cls": 0.15254, "loss_rpn_bbox": 0.09205, "loss_cls": 0.43727, "acc": 93.6084, "loss_bbox": 0.22382, "loss": 0.90569, "time": 0.41115}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 4268, "data_time": 0.09617, "loss_rpn_cls": 0.16442, "loss_rpn_bbox": 0.1017, "loss_cls": 0.48937, "acc": 92.67432, "loss_bbox": 0.25089, "loss": 1.00637, "time": 0.41148}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 4268, "data_time": 0.09557, "loss_rpn_cls": 0.12336, "loss_rpn_bbox": 0.09134, "loss_cls": 0.49557, "acc": 92.28613, "loss_bbox": 0.28174, "loss": 0.99201, "time": 0.41173}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 4268, "data_time": 0.09432, "loss_rpn_cls": 0.1431, "loss_rpn_bbox": 0.10003, "loss_cls": 0.50197, "acc": 92.03467, "loss_bbox": 0.27934, "loss": 1.02443, "time": 0.41521}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 4268, "data_time": 0.09859, "loss_rpn_cls": 0.12711, "loss_rpn_bbox": 0.08589, "loss_cls": 0.46691, "acc": 92.36328, "loss_bbox": 0.27643, "loss": 0.95635, "time": 0.41524}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 4268, "data_time": 0.10006, "loss_rpn_cls": 0.11675, "loss_rpn_bbox": 0.08896, "loss_cls": 0.51581, "acc": 91.52734, "loss_bbox": 0.30423, "loss": 1.02574, "time": 0.41624}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 4268, "data_time": 0.09877, "loss_rpn_cls": 0.12675, "loss_rpn_bbox": 0.09453, "loss_cls": 0.52549, "acc": 91.24658, "loss_bbox": 0.30407, "loss": 1.05084, "time": 0.41838}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 4268, "data_time": 0.09736, "loss_rpn_cls": 0.14115, "loss_rpn_bbox": 0.10266, "loss_cls": 0.53043, "acc": 90.88818, "loss_bbox": 0.31694, "loss": 1.09118, "time": 0.40997}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 4268, "data_time": 0.09383, "loss_rpn_cls": 0.11312, "loss_rpn_bbox": 0.08674, "loss_cls": 0.46449, "acc": 92.08398, "loss_bbox": 0.2784, "loss": 0.94274, "time": 0.41438}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 4268, "data_time": 0.09224, "loss_rpn_cls": 0.11417, "loss_rpn_bbox": 0.09741, "loss_cls": 0.478, "acc": 91.77197, "loss_bbox": 0.28606, "loss": 0.97564, "time": 0.41442}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 4268, "data_time": 0.09103, "loss_rpn_cls": 0.11101, "loss_rpn_bbox": 0.08734, "loss_cls": 0.47344, "acc": 91.4624, "loss_bbox": 0.30189, "loss": 0.97369, "time": 0.41514}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 4268, "data_time": 0.0942, "loss_rpn_cls": 0.10867, "loss_rpn_bbox": 0.08818, "loss_cls": 0.47456, "acc": 91.47266, "loss_bbox": 0.30903, "loss": 0.98043, "time": 0.41226}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 4268, "data_time": 0.09618, "loss_rpn_cls": 0.08365, "loss_rpn_bbox": 0.08217, "loss_cls": 0.48148, "acc": 90.66211, "loss_bbox": 0.33375, "loss": 0.98104, "time": 0.41544}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.02, "memory": 4268, "data_time": 0.09606, "loss_rpn_cls": 0.0949, "loss_rpn_bbox": 0.08444, "loss_cls": 0.4962, "acc": 90.39258, "loss_bbox": 0.33784, "loss": 1.01338, "time": 0.41584}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.02, "memory": 4268, "data_time": 0.10069, "loss_rpn_cls": 0.09498, "loss_rpn_bbox": 0.08581, "loss_cls": 0.484, "acc": 90.38086, "loss_bbox": 0.33978, "loss": 1.00458, "time": 0.4211}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.02, "memory": 4268, "data_time": 0.09799, "loss_rpn_cls": 0.08904, "loss_rpn_bbox": 0.08271, "loss_cls": 0.48475, "acc": 90.13184, "loss_bbox": 0.34394, "loss": 1.00045, "time": 0.42034}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.02, "memory": 4268, "data_time": 0.09529, "loss_rpn_cls": 0.0902, "loss_rpn_bbox": 0.08054, "loss_cls": 0.48338, "acc": 90.62695, "loss_bbox": 0.33294, "loss": 0.98705, "time": 0.41813}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.02, "memory": 4268, "data_time": 0.09365, "loss_rpn_cls": 0.07917, "loss_rpn_bbox": 0.07277, "loss_cls": 0.44489, "acc": 90.78076, "loss_bbox": 0.32143, "loss": 0.91827, "time": 0.41996}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.02, "memory": 4268, "data_time": 0.1017, "loss_rpn_cls": 0.0878, "loss_rpn_bbox": 0.08279, "loss_cls": 0.47299, "acc": 90.21338, "loss_bbox": 0.3415, "loss": 0.98507, "time": 0.41469}
