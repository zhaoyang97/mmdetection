2021-03-22 10:05:48,334 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.6.12 |Anaconda, Inc.| (default, Sep  8 2020, 23:10:56) [GCC 7.3.0]
CUDA available: True
GPU 0,1,2,3: GeForce RTX 2080 Ti
CUDA_HOME: None
GCC: gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44)
PyTorch: 1.4.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CUDA Runtime 10.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.1
  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

TorchVision: 0.5.0
OpenCV: 4.5.1
MMCV: 1.1.6
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 10.0
MMDetection: 2.5.0+
------------------------------------------------------------

2021-03-22 10:05:48,651 - mmdet - INFO - Distributed training: True
2021-03-22 10:05:48,912 - mmdet - INFO - Config:
model = dict(
    type='FasterRCNN',
    pretrained='torchvision://resnet50',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch'),
    neck=dict(
        type='FPN_CARAFE_se_3',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5,
        start_level=0,
        end_level=-1,
        norm_cfg=None,
        act_cfg=None,
        order=('conv', 'norm', 'act'),
        upsample_cfg=dict(
            type='carafe',
            up_kernel=5,
            up_group=1,
            encoder_kernel=3,
            encoder_dilation=1,
            compressed_channels=64)),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
    roi_head=dict(
        type='StandardRoIHead',
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=dict(
            type='Shared2FCBBoxHead',
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=80,
            bbox_coder=dict(
                type='DeltaXYWHBBoxCoder',
                target_means=[0.0, 0.0, 0.0, 0.0],
                target_stds=[0.1, 0.1, 0.2, 0.2]),
            reg_class_agnostic=False,
            loss_cls=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', loss_weight=1.0))))
train_cfg = dict(
    rpn=dict(
        assigner=dict(
            type='MaxIoUAssigner',
            pos_iou_thr=0.7,
            neg_iou_thr=0.3,
            min_pos_iou=0.3,
            match_low_quality=True,
            ignore_iof_thr=-1),
        sampler=dict(
            type='RandomSampler',
            num=256,
            pos_fraction=0.5,
            neg_pos_ub=-1,
            add_gt_as_proposals=False),
        allowed_border=-1,
        pos_weight=-1,
        debug=False),
    rpn_proposal=dict(
        nms_across_levels=False,
        nms_pre=2000,
        nms_post=1000,
        max_num=1000,
        nms_thr=0.7,
        min_bbox_size=0),
    rcnn=dict(
        assigner=dict(
            type='MaxIoUAssigner',
            pos_iou_thr=0.5,
            neg_iou_thr=0.5,
            min_pos_iou=0.5,
            match_low_quality=False,
            ignore_iof_thr=-1),
        sampler=dict(
            type='RandomSampler',
            num=512,
            pos_fraction=0.25,
            neg_pos_ub=-1,
            add_gt_as_proposals=True),
        pos_weight=-1,
        debug=False))
test_cfg = dict(
    rpn=dict(
        nms_across_levels=False,
        nms_pre=1000,
        nms_post=1000,
        max_num=1000,
        nms_thr=0.7,
        min_bbox_size=0),
    rcnn=dict(
        score_thr=0.05,
        nms=dict(type='nms', iou_threshold=0.5),
        max_per_img=100))
dataset_type = 'CocoDataset'
data_root = '../data/coco/'
annotations_root = '../data/coco/annotations/'
image_root = '../data/coco/'
img_scale = (1333, 800)
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=64),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=64),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=0,
    train=dict(
        type='CocoDataset',
        ann_file='../data/coco/annotations/instances_train2017.json',
        img_prefix='../data/coco/train2017',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=64),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file='../data/coco/annotations/instances_val2017.json',
        img_prefix='../data/coco/val2017',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=64),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file='../data/coco/annotations/image_info_test-dev2017.json',
        img_prefix='../data/coco/test2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=64),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='bbox')
optimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001,
    step=[8, 11])
total_epochs = 12
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = './work_dirs/coco_carafe_se_3'
gpu_ids = range(0, 1)

2021-03-22 10:05:49,388 - mmdet - INFO - load model from: torchvision://resnet50
2021-03-22 10:05:53,285 - mmdet - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

2021-03-22 10:06:12,538 - mmdet - INFO - Start running, host: zhaoyang@node02, work_dir: /home/zhaoyang/container/mmdetection/work_dirs/coco_carafe_se_3
2021-03-22 10:06:12,539 - mmdet - INFO - workflow: [('train', 1)], max: 12 epochs
2021-03-22 10:06:39,498 - mmdet - INFO - Epoch [1][50/14659]	lr: 1.978e-03, eta: 1 day, 2:18:25, time: 0.539, data_time: 0.211, memory: 4268, loss_rpn_cls: 0.5031, loss_rpn_bbox: 0.1177, loss_cls: 1.5654, acc: 84.7529, loss_bbox: 0.0724, loss: 2.2586
2021-03-22 10:06:59,982 - mmdet - INFO - Epoch [1][100/14659]	lr: 3.976e-03, eta: 23:09:09, time: 0.410, data_time: 0.095, memory: 4268, loss_rpn_cls: 0.2281, loss_rpn_bbox: 0.0854, loss_cls: 0.5437, acc: 94.7231, loss_bbox: 0.1771, loss: 1.0344
2021-03-22 10:07:20,350 - mmdet - INFO - Epoch [1][150/14659]	lr: 5.974e-03, eta: 22:03:34, time: 0.407, data_time: 0.095, memory: 4268, loss_rpn_cls: 0.1883, loss_rpn_bbox: 0.0949, loss_cls: 0.4534, acc: 93.7905, loss_bbox: 0.2098, loss: 0.9464
2021-03-22 10:07:40,930 - mmdet - INFO - Epoch [1][200/14659]	lr: 7.972e-03, eta: 21:33:24, time: 0.411, data_time: 0.095, memory: 4268, loss_rpn_cls: 0.1525, loss_rpn_bbox: 0.0921, loss_cls: 0.4373, acc: 93.6084, loss_bbox: 0.2238, loss: 0.9057
2021-03-22 10:08:01,494 - mmdet - INFO - Epoch [1][250/14659]	lr: 9.970e-03, eta: 21:15:22, time: 0.411, data_time: 0.096, memory: 4268, loss_rpn_cls: 0.1644, loss_rpn_bbox: 0.1017, loss_cls: 0.4894, acc: 92.6743, loss_bbox: 0.2509, loss: 1.0064
2021-03-22 10:08:22,075 - mmdet - INFO - Epoch [1][300/14659]	lr: 1.197e-02, eta: 21:03:20, time: 0.412, data_time: 0.096, memory: 4268, loss_rpn_cls: 0.1234, loss_rpn_bbox: 0.0913, loss_cls: 0.4956, acc: 92.2861, loss_bbox: 0.2817, loss: 0.9920
2021-03-22 10:08:42,850 - mmdet - INFO - Epoch [1][350/14659]	lr: 1.397e-02, eta: 20:56:06, time: 0.415, data_time: 0.094, memory: 4268, loss_rpn_cls: 0.1431, loss_rpn_bbox: 0.1000, loss_cls: 0.5020, acc: 92.0347, loss_bbox: 0.2793, loss: 1.0244
2021-03-22 10:09:03,596 - mmdet - INFO - Epoch [1][400/14659]	lr: 1.596e-02, eta: 20:50:36, time: 0.415, data_time: 0.099, memory: 4268, loss_rpn_cls: 0.1271, loss_rpn_bbox: 0.0859, loss_cls: 0.4669, acc: 92.3633, loss_bbox: 0.2764, loss: 0.9563
2021-03-22 10:09:24,432 - mmdet - INFO - Epoch [1][450/14659]	lr: 1.796e-02, eta: 20:46:35, time: 0.416, data_time: 0.100, memory: 4268, loss_rpn_cls: 0.1168, loss_rpn_bbox: 0.0890, loss_cls: 0.5158, acc: 91.5273, loss_bbox: 0.3042, loss: 1.0257
2021-03-22 10:09:45,344 - mmdet - INFO - Epoch [1][500/14659]	lr: 1.996e-02, eta: 20:43:55, time: 0.418, data_time: 0.099, memory: 4268, loss_rpn_cls: 0.1268, loss_rpn_bbox: 0.0945, loss_cls: 0.5255, acc: 91.2466, loss_bbox: 0.3041, loss: 1.0508
2021-03-22 10:10:05,841 - mmdet - INFO - Epoch [1][550/14659]	lr: 2.000e-02, eta: 20:39:26, time: 0.410, data_time: 0.097, memory: 4268, loss_rpn_cls: 0.1412, loss_rpn_bbox: 0.1027, loss_cls: 0.5304, acc: 90.8882, loss_bbox: 0.3169, loss: 1.0912
2021-03-22 10:10:26,548 - mmdet - INFO - Epoch [1][600/14659]	lr: 2.000e-02, eta: 20:36:43, time: 0.414, data_time: 0.094, memory: 4268, loss_rpn_cls: 0.1131, loss_rpn_bbox: 0.0867, loss_cls: 0.4645, acc: 92.0840, loss_bbox: 0.2784, loss: 0.9427
2021-03-22 10:10:47,279 - mmdet - INFO - Epoch [1][650/14659]	lr: 2.000e-02, eta: 20:34:23, time: 0.414, data_time: 0.092, memory: 4268, loss_rpn_cls: 0.1142, loss_rpn_bbox: 0.0974, loss_cls: 0.4780, acc: 91.7720, loss_bbox: 0.2861, loss: 0.9756
2021-03-22 10:11:08,038 - mmdet - INFO - Epoch [1][700/14659]	lr: 2.000e-02, eta: 20:32:28, time: 0.415, data_time: 0.091, memory: 4268, loss_rpn_cls: 0.1110, loss_rpn_bbox: 0.0873, loss_cls: 0.4734, acc: 91.4624, loss_bbox: 0.3019, loss: 0.9737
2021-03-22 10:11:28,664 - mmdet - INFO - Epoch [1][750/14659]	lr: 2.000e-02, eta: 20:30:13, time: 0.412, data_time: 0.094, memory: 4268, loss_rpn_cls: 0.1087, loss_rpn_bbox: 0.0882, loss_cls: 0.4746, acc: 91.4727, loss_bbox: 0.3090, loss: 0.9804
2021-03-22 10:11:49,421 - mmdet - INFO - Epoch [1][800/14659]	lr: 2.000e-02, eta: 20:28:46, time: 0.415, data_time: 0.096, memory: 4268, loss_rpn_cls: 0.0837, loss_rpn_bbox: 0.0822, loss_cls: 0.4815, acc: 90.6621, loss_bbox: 0.3337, loss: 0.9810
2021-03-22 10:12:10,216 - mmdet - INFO - Epoch [1][850/14659]	lr: 2.000e-02, eta: 20:27:32, time: 0.416, data_time: 0.096, memory: 4268, loss_rpn_cls: 0.0949, loss_rpn_bbox: 0.0844, loss_cls: 0.4962, acc: 90.3926, loss_bbox: 0.3378, loss: 1.0134
2021-03-22 10:12:31,287 - mmdet - INFO - Epoch [1][900/14659]	lr: 2.000e-02, eta: 20:27:14, time: 0.421, data_time: 0.101, memory: 4268, loss_rpn_cls: 0.0950, loss_rpn_bbox: 0.0858, loss_cls: 0.4840, acc: 90.3809, loss_bbox: 0.3398, loss: 1.0046
2021-03-22 10:12:52,278 - mmdet - INFO - Epoch [1][950/14659]	lr: 2.000e-02, eta: 20:26:49, time: 0.420, data_time: 0.098, memory: 4268, loss_rpn_cls: 0.0890, loss_rpn_bbox: 0.0827, loss_cls: 0.4847, acc: 90.1318, loss_bbox: 0.3439, loss: 1.0004
2021-03-22 10:13:13,198 - mmdet - INFO - Exp name: coco_carafe_se_3.py
2021-03-22 10:13:13,198 - mmdet - INFO - Epoch [1][1000/14659]	lr: 2.000e-02, eta: 20:26:06, time: 0.418, data_time: 0.095, memory: 4268, loss_rpn_cls: 0.0902, loss_rpn_bbox: 0.0805, loss_cls: 0.4834, acc: 90.6270, loss_bbox: 0.3329, loss: 0.9871
2021-03-22 10:13:34,189 - mmdet - INFO - Epoch [1][1050/14659]	lr: 2.000e-02, eta: 20:25:39, time: 0.420, data_time: 0.094, memory: 4268, loss_rpn_cls: 0.0792, loss_rpn_bbox: 0.0728, loss_cls: 0.4449, acc: 90.7808, loss_bbox: 0.3214, loss: 0.9183
2021-03-22 10:13:54,920 - mmdet - INFO - Epoch [1][1100/14659]	lr: 2.000e-02, eta: 20:24:32, time: 0.415, data_time: 0.102, memory: 4268, loss_rpn_cls: 0.0878, loss_rpn_bbox: 0.0828, loss_cls: 0.4730, acc: 90.2134, loss_bbox: 0.3415, loss: 0.9851
