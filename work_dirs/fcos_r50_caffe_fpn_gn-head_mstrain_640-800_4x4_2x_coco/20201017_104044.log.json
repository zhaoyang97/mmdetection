{"env_info": "sys.platform: linux\nPython: 3.7.9 (default, Aug 31 2020, 12:42:55) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.130\nGCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\nPyTorch: 1.4.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CUDA Runtime 10.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.1\n  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.5.0\nOpenCV: 4.4.0\nMMCV: 1.1.5\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.0\nMMDetection: 2.5.0+", "config": "dataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nannotations_root = 'annotations/'\nimage_root = '/root/userfolder/data/TCTAnnotatedData/'\nclasses = ('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n           'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n           'dysbacteriosis_herpes_act', 'ec')\nimg_norm_cfg = dict(\n    mean=[102.9801, 115.9465, 122.7717], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(1333, 640), (1333, 800)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[102.9801, 115.9465, 122.7717],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=4,\n    train=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='annotations/train30000-cat10.json',\n        img_prefix='/root/userfolder/data/TCTAnnotatedData/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(1333, 640), (1333, 800)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='annotations/val10000-cat10.json',\n        img_prefix='/root/userfolder/data/TCTAnnotatedData/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='annotations/test10000-cat10.json',\n        img_prefix='/root/userfolder/data/TCTAnnotatedData/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(\n    type='SGD',\n    lr=0.01,\n    momentum=0.9,\n    weight_decay=0.0001,\n    paramwise_cfg=dict(bias_lr_mult=2.0, bias_decay_mult=0.0))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='constant',\n    warmup_iters=500,\n    warmup_ratio=0.3333333333333333,\n    step=[16, 22])\ntotal_epochs = 24\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nmodel = dict(\n    type='FCOS',\n    pretrained='open-mmlab://detectron/resnet50_caffe',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='caffe'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs=True,\n        extra_convs_on_inputs=False,\n        num_outs=5,\n        relu_before_extra_convs=True),\n    bbox_head=dict(\n        type='FCOSHead',\n        num_classes=10,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        strides=[8, 16, 32, 64, 128],\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='IoULoss', loss_weight=1.0),\n        loss_centerness=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)))\ntrain_cfg = dict(\n    assigner=dict(\n        type='MaxIoUAssigner',\n        pos_iou_thr=0.5,\n        neg_iou_thr=0.4,\n        min_pos_iou=0,\n        ignore_iof_thr=-1),\n    allowed_border=-1,\n    pos_weight=-1,\n    debug=False)\ntest_cfg = dict(\n    nms_pre=1000,\n    min_bbox_size=0,\n    score_thr=0.05,\n    nms=dict(type='nms', iou_threshold=0.5),\n    max_per_img=100)\nwork_dir = './work_dirs/fcos_r50_caffe_fpn_gn-head_mstrain_640-800_4x4_2x_coco'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "fcos_r50_caffe_fpn_gn-head_mstrain_640-800_4x4_2x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00333, "memory": 6007, "data_time": 0.42542, "loss_cls": 0.87326, "loss_bbox": 1.56572, "loss_centerness": 0.6531, "loss": 3.09209, "grad_norm": 16.43502, "time": 0.96931}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00333, "memory": 6011, "data_time": 0.02912, "loss_cls": 0.64326, "loss_bbox": 0.76998, "loss_centerness": 0.63602, "loss": 2.04925, "grad_norm": 5.67651, "time": 0.53401}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00333, "memory": 6018, "data_time": 0.02576, "loss_cls": 0.59382, "loss_bbox": 0.66544, "loss_centerness": 0.61661, "loss": 1.87587, "grad_norm": 6.30937, "time": 0.52818}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00333, "memory": 6018, "data_time": 0.02667, "loss_cls": 0.54585, "loss_bbox": 0.60522, "loss_centerness": 0.61332, "loss": 1.76439, "grad_norm": 5.41943, "time": 0.52693}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00333, "memory": 6024, "data_time": 0.02678, "loss_cls": 0.51595, "loss_bbox": 0.58918, "loss_centerness": 0.6069, "loss": 1.71203, "grad_norm": 5.72319, "time": 0.52585}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00333, "memory": 6024, "data_time": 0.02413, "loss_cls": 0.51141, "loss_bbox": 0.60165, "loss_centerness": 0.60401, "loss": 1.71706, "grad_norm": 7.03473, "time": 0.52345}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00333, "memory": 6024, "data_time": 0.02293, "loss_cls": 0.49343, "loss_bbox": 0.56687, "loss_centerness": 0.6018, "loss": 1.6621, "grad_norm": 5.97774, "time": 0.52254}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00333, "memory": 6024, "data_time": 0.02139, "loss_cls": 0.47616, "loss_bbox": 0.53407, "loss_centerness": 0.59859, "loss": 1.60882, "grad_norm": 5.03717, "time": 0.51999}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00333, "memory": 6024, "data_time": 0.02227, "loss_cls": 0.46189, "loss_bbox": 0.53309, "loss_centerness": 0.59964, "loss": 1.59463, "grad_norm": 5.26933, "time": 0.52323}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00333, "memory": 6024, "data_time": 0.0239, "loss_cls": 0.45581, "loss_bbox": 0.50857, "loss_centerness": 0.5985, "loss": 1.56288, "grad_norm": 4.76724, "time": 0.526}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.01, "memory": 6024, "data_time": 0.02227, "loss_cls": 0.4959, "loss_bbox": 0.81216, "loss_centerness": 0.60206, "loss": 1.91012, "grad_norm": 8.64427, "time": 0.52133}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.01, "memory": 6024, "data_time": 0.02394, "loss_cls": 0.48026, "loss_bbox": 0.85515, "loss_centerness": 0.59914, "loss": 1.93455, "grad_norm": 8.78171, "time": 0.523}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.01, "memory": 6024, "data_time": 0.0222, "loss_cls": 0.48296, "loss_bbox": 0.67586, "loss_centerness": 0.60192, "loss": 1.76075, "grad_norm": 7.60927, "time": 0.52296}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.01, "memory": 6024, "data_time": 0.02284, "loss_cls": 0.4539, "loss_bbox": 0.58207, "loss_centerness": 0.59705, "loss": 1.63301, "grad_norm": 6.46657, "time": 0.52206}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.01, "memory": 6024, "data_time": 0.02288, "loss_cls": 0.43964, "loss_bbox": 0.81069, "loss_centerness": 0.59646, "loss": 1.84679, "grad_norm": 7.54846, "time": 0.52019}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.01, "memory": 6024, "data_time": 0.02204, "loss_cls": 0.43069, "loss_bbox": 0.51504, "loss_centerness": 0.59288, "loss": 1.53861, "grad_norm": 5.12071, "time": 0.52073}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.01, "memory": 6024, "data_time": 0.02256, "loss_cls": 0.43773, "loss_bbox": 0.55172, "loss_centerness": 0.59235, "loss": 1.58179, "grad_norm": 6.4825, "time": 0.52134}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.01, "memory": 6024, "data_time": 0.02138, "loss_cls": 0.41562, "loss_bbox": 0.52127, "loss_centerness": 0.59193, "loss": 1.52881, "grad_norm": 6.06011, "time": 0.52255}
{"mode": "val", "epoch": 1, "iter": 938, "lr": 0.01, "bbox_mAP": 0.098, "bbox_mAP_50": 0.24, "bbox_mAP_75": 0.058, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.012, "bbox_mAP_l": 0.108, "bbox_mAP_copypaste": "0.098 0.240 0.058 -1.000 0.012 0.108"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.01, "memory": 6024, "data_time": 0.36923, "loss_cls": 0.40681, "loss_bbox": 0.51878, "loss_centerness": 0.59085, "loss": 1.51645, "grad_norm": 6.08115, "time": 0.87442}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.01, "memory": 6024, "data_time": 0.03064, "loss_cls": 0.41872, "loss_bbox": 0.53577, "loss_centerness": 0.59133, "loss": 1.54581, "grad_norm": 6.28504, "time": 0.53664}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.01, "memory": 6024, "data_time": 0.0296, "loss_cls": 0.40443, "loss_bbox": 0.45124, "loss_centerness": 0.59189, "loss": 1.44756, "grad_norm": 5.1718, "time": 0.53514}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.01, "memory": 6024, "data_time": 0.02877, "loss_cls": 0.41375, "loss_bbox": 0.46782, "loss_centerness": 0.59074, "loss": 1.47231, "grad_norm": 5.32824, "time": 0.53276}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.01, "memory": 6024, "data_time": 0.02801, "loss_cls": 0.39993, "loss_bbox": 0.44033, "loss_centerness": 0.59035, "loss": 1.43061, "grad_norm": 5.02757, "time": 0.53392}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.01, "memory": 6024, "data_time": 0.02632, "loss_cls": 0.39762, "loss_bbox": 0.4472, "loss_centerness": 0.58987, "loss": 1.43469, "grad_norm": 5.13808, "time": 0.52677}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.01, "memory": 6024, "data_time": 0.0227, "loss_cls": 0.38971, "loss_bbox": 0.42626, "loss_centerness": 0.58871, "loss": 1.40468, "grad_norm": 4.75759, "time": 0.52338}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.01, "memory": 6024, "data_time": 0.02318, "loss_cls": 0.39116, "loss_bbox": 0.42982, "loss_centerness": 0.5882, "loss": 1.40917, "grad_norm": 5.24297, "time": 0.52293}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 0.01, "memory": 6024, "data_time": 0.02263, "loss_cls": 0.38003, "loss_bbox": 0.50904, "loss_centerness": 0.58849, "loss": 1.47757, "grad_norm": 6.0512, "time": 0.52169}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.01, "memory": 6024, "data_time": 0.02366, "loss_cls": 0.38648, "loss_bbox": 0.45998, "loss_centerness": 0.58802, "loss": 1.43448, "grad_norm": 5.31591, "time": 0.52212}
{"mode": "train", "epoch": 2, "iter": 550, "lr": 0.01, "memory": 6024, "data_time": 0.02369, "loss_cls": 0.38019, "loss_bbox": 0.50532, "loss_centerness": 0.58839, "loss": 1.47389, "grad_norm": 5.78638, "time": 0.52317}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.01, "memory": 6024, "data_time": 0.02314, "loss_cls": 0.37303, "loss_bbox": 0.45556, "loss_centerness": 0.58739, "loss": 1.41597, "grad_norm": 5.36205, "time": 0.52282}
{"mode": "train", "epoch": 2, "iter": 650, "lr": 0.01, "memory": 6024, "data_time": 0.0222, "loss_cls": 0.38647, "loss_bbox": 0.4604, "loss_centerness": 0.58883, "loss": 1.4357, "grad_norm": 5.47072, "time": 0.52276}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.01, "memory": 6024, "data_time": 0.02261, "loss_cls": 0.37717, "loss_bbox": 0.41114, "loss_centerness": 0.58685, "loss": 1.37516, "grad_norm": 4.58888, "time": 0.52389}
{"mode": "train", "epoch": 2, "iter": 750, "lr": 0.01, "memory": 6024, "data_time": 0.02232, "loss_cls": 0.37255, "loss_bbox": 0.38636, "loss_centerness": 0.58745, "loss": 1.34636, "grad_norm": 3.63593, "time": 0.52396}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.01, "memory": 6024, "data_time": 0.02376, "loss_cls": 0.36835, "loss_bbox": 0.41526, "loss_centerness": 0.58676, "loss": 1.37038, "grad_norm": 4.87142, "time": 0.52448}
{"mode": "train", "epoch": 2, "iter": 850, "lr": 0.01, "memory": 6024, "data_time": 0.02264, "loss_cls": 0.36171, "loss_bbox": 0.47507, "loss_centerness": 0.58673, "loss": 1.42351, "grad_norm": 5.83711, "time": 0.52047}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.01, "memory": 6024, "data_time": 0.02415, "loss_cls": 0.37291, "loss_bbox": 0.40442, "loss_centerness": 0.58583, "loss": 1.36316, "grad_norm": 4.51413, "time": 0.52375}
{"mode": "val", "epoch": 2, "iter": 938, "lr": 0.01, "bbox_mAP": 0.147, "bbox_mAP_50": 0.318, "bbox_mAP_75": 0.114, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.027, "bbox_mAP_l": 0.159, "bbox_mAP_copypaste": "0.147 0.318 0.114 -1.000 0.027 0.159"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.01, "memory": 6024, "data_time": 0.39934, "loss_cls": 0.35993, "loss_bbox": 0.37951, "loss_centerness": 0.58695, "loss": 1.32638, "grad_norm": 3.63805, "time": 0.91068}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.01, "memory": 6024, "data_time": 0.06025, "loss_cls": 0.3614, "loss_bbox": 0.37295, "loss_centerness": 0.58417, "loss": 1.31853, "grad_norm": 3.96593, "time": 0.57477}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.01, "memory": 6024, "data_time": 0.05652, "loss_cls": 0.35912, "loss_bbox": 0.50105, "loss_centerness": 0.58432, "loss": 1.44449, "grad_norm": 5.88628, "time": 0.57213}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.01, "memory": 6024, "data_time": 0.05492, "loss_cls": 0.35447, "loss_bbox": 0.4539, "loss_centerness": 0.58568, "loss": 1.39405, "grad_norm": 5.30339, "time": 0.57231}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.01, "memory": 6024, "data_time": 0.05611, "loss_cls": 0.35475, "loss_bbox": 0.38397, "loss_centerness": 0.58389, "loss": 1.32261, "grad_norm": 3.78934, "time": 0.57344}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.01, "memory": 6024, "data_time": 0.05562, "loss_cls": 0.35131, "loss_bbox": 0.39304, "loss_centerness": 0.58366, "loss": 1.328, "grad_norm": 4.2735, "time": 0.57322}
{"mode": "train", "epoch": 3, "iter": 350, "lr": 0.01, "memory": 6024, "data_time": 0.05143, "loss_cls": 0.35416, "loss_bbox": 0.37213, "loss_centerness": 0.58419, "loss": 1.31047, "grad_norm": 3.80627, "time": 0.57596}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.01, "memory": 6024, "data_time": 0.0563, "loss_cls": 0.3584, "loss_bbox": 0.4052, "loss_centerness": 0.5853, "loss": 1.34891, "grad_norm": 4.64093, "time": 0.58958}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.01, "memory": 6024, "data_time": 0.04922, "loss_cls": 0.35556, "loss_bbox": 0.36188, "loss_centerness": 0.58519, "loss": 1.30263, "grad_norm": 3.48017, "time": 0.56882}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.01, "memory": 6024, "data_time": 0.04977, "loss_cls": 0.35352, "loss_bbox": 0.36906, "loss_centerness": 0.5849, "loss": 1.30749, "grad_norm": 3.82364, "time": 0.56443}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.01, "memory": 6024, "data_time": 0.04539, "loss_cls": 0.35794, "loss_bbox": 0.35495, "loss_centerness": 0.58363, "loss": 1.29652, "grad_norm": 3.3226, "time": 0.5595}
{"mode": "train", "epoch": 3, "iter": 600, "lr": 0.01, "memory": 6024, "data_time": 0.04694, "loss_cls": 0.35453, "loss_bbox": 0.40844, "loss_centerness": 0.58515, "loss": 1.34813, "grad_norm": 4.82195, "time": 0.55873}
{"mode": "train", "epoch": 3, "iter": 650, "lr": 0.01, "memory": 6029, "data_time": 0.04742, "loss_cls": 0.34894, "loss_bbox": 0.39653, "loss_centerness": 0.58561, "loss": 1.33108, "grad_norm": 4.49949, "time": 0.55827}
{"mode": "train", "epoch": 3, "iter": 700, "lr": 0.01, "memory": 6029, "data_time": 0.04786, "loss_cls": 0.34664, "loss_bbox": 0.35338, "loss_centerness": 0.5844, "loss": 1.28442, "grad_norm": 3.34018, "time": 0.55931}
{"mode": "train", "epoch": 3, "iter": 750, "lr": 0.01, "memory": 6029, "data_time": 0.04854, "loss_cls": 0.33565, "loss_bbox": 0.34856, "loss_centerness": 0.58259, "loss": 1.26679, "grad_norm": 3.21932, "time": 0.55873}
{"mode": "train", "epoch": 3, "iter": 800, "lr": 0.01, "memory": 6029, "data_time": 0.04748, "loss_cls": 0.34401, "loss_bbox": 0.34928, "loss_centerness": 0.58352, "loss": 1.27681, "grad_norm": 3.39581, "time": 0.55751}
{"mode": "train", "epoch": 3, "iter": 850, "lr": 0.01, "memory": 6029, "data_time": 0.04604, "loss_cls": 0.34713, "loss_bbox": 0.4144, "loss_centerness": 0.58468, "loss": 1.34621, "grad_norm": 4.97967, "time": 0.5577}
{"mode": "train", "epoch": 3, "iter": 900, "lr": 0.01, "memory": 6029, "data_time": 0.04999, "loss_cls": 0.34493, "loss_bbox": 0.37593, "loss_centerness": 0.58515, "loss": 1.30601, "grad_norm": 4.1821, "time": 0.56118}
