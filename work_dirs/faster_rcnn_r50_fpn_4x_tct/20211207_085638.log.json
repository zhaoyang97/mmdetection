{"env_info": "sys.platform: linux\nPython: 3.7.9 (default, Aug 31 2020, 12:42:55) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.130\nGCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\nPyTorch: 1.6.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.5.0 (Git Hash e2ac1fac44c5078ca927cb9b90e1b3066a0b2ed0)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.7.0\nOpenCV: 3.4.2\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.2\nMMDetection: 2.12.0+", "config": "model = dict(\n    type='FasterRCNN',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=10,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))))\ntrain_cfg = dict(\n    rpn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.7,\n            neg_iou_thr=0.3,\n            min_pos_iou=0.3,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=256,\n            pos_fraction=0.5,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    rpn_proposal=dict(\n        nms_across_levels=False,\n        nms_pre=2000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0.5,\n            match_low_quality=False,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=512,\n            pos_fraction=0.25,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=True),\n        pos_weight=-1,\n        debug=False))\ntest_cfg = dict(\n    rpn=dict(\n        nms_across_levels=False,\n        nms_pre=1000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nannotations_root = '../data/TCT_30000/'\nimage_root = '../data/TCT_30000/'\nclasses = ('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n           'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n           'dysbacteriosis_herpes_act', 'ec')\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=0,\n    train=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='../data/TCT_30000/train30000-cat10.json',\n        img_prefix='../data/TCT_30000/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='../data/TCT_30000/val10000-cat10.json',\n        img_prefix='../data/TCT_30000/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='../data/TCT_30000/test10000-cat10.json',\n        img_prefix='../data/TCT_30000/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\nshcedule_times = 4\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[32, 40, 44])\nrunner = dict(type='EpochBasedRunner', max_epochs=48)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/faster_rcnn_r50_fpn_4x_tct'\ngpu_ids = range(0, 4)\n", "seed": null, "exp_name": "faster_rcnn_r50_fpn_4x_tct.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 3718, "data_time": 0.36818, "loss_rpn_cls": 0.57049, "loss_rpn_bbox": 0.04584, "loss_cls": 0.50028, "acc": 88.80664, "loss_bbox": 0.04903, "loss": 1.16564, "time": 0.69351}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00199, "memory": 3720, "data_time": 0.31902, "loss_rpn_cls": 0.22162, "loss_rpn_bbox": 0.04691, "loss_cls": 0.13139, "acc": 98.11719, "loss_bbox": 0.05037, "loss": 0.45029, "time": 0.62175}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00299, "memory": 3720, "data_time": 0.33267, "loss_rpn_cls": 0.1693, "loss_rpn_bbox": 0.04198, "loss_cls": 0.22965, "acc": 96.31104, "loss_bbox": 0.12002, "loss": 0.56095, "time": 0.62616}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00399, "memory": 3720, "data_time": 0.32288, "loss_rpn_cls": 0.13922, "loss_rpn_bbox": 0.04014, "loss_cls": 0.31467, "acc": 94.27734, "loss_bbox": 0.19571, "loss": 0.68973, "time": 0.62751}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00499, "memory": 3720, "data_time": 0.33108, "loss_rpn_cls": 0.1191, "loss_rpn_bbox": 0.04074, "loss_cls": 0.33238, "acc": 93.51562, "loss_bbox": 0.21556, "loss": 0.70778, "time": 0.62768}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00598, "memory": 3720, "data_time": 0.329, "loss_rpn_cls": 0.1088, "loss_rpn_bbox": 0.03926, "loss_cls": 0.35155, "acc": 92.80078, "loss_bbox": 0.22879, "loss": 0.72841, "time": 0.62135}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00698, "memory": 3720, "data_time": 0.33582, "loss_rpn_cls": 0.09576, "loss_rpn_bbox": 0.03534, "loss_cls": 0.35815, "acc": 92.07715, "loss_bbox": 0.24743, "loss": 0.73668, "time": 0.62567}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00798, "memory": 3720, "data_time": 0.33012, "loss_rpn_cls": 0.08574, "loss_rpn_bbox": 0.03614, "loss_cls": 0.35002, "acc": 91.84131, "loss_bbox": 0.24904, "loss": 0.72094, "time": 0.62774}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00898, "memory": 3720, "data_time": 0.33371, "loss_rpn_cls": 0.07923, "loss_rpn_bbox": 0.03579, "loss_cls": 0.37636, "acc": 91.07373, "loss_bbox": 0.27027, "loss": 0.76164, "time": 0.6268}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00998, "memory": 3720, "data_time": 0.32596, "loss_rpn_cls": 0.08572, "loss_rpn_bbox": 0.03747, "loss_cls": 0.38495, "acc": 90.71924, "loss_bbox": 0.26491, "loss": 0.77306, "time": 0.62276}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.01, "memory": 3720, "data_time": 0.33594, "loss_rpn_cls": 0.07813, "loss_rpn_bbox": 0.03303, "loss_cls": 0.3689, "acc": 91.06104, "loss_bbox": 0.25795, "loss": 0.73801, "time": 0.62875}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.01, "memory": 3720, "data_time": 0.33148, "loss_rpn_cls": 0.0771, "loss_rpn_bbox": 0.03441, "loss_cls": 0.3563, "acc": 91.05811, "loss_bbox": 0.24432, "loss": 0.71212, "time": 0.62537}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.01, "memory": 3720, "data_time": 0.33985, "loss_rpn_cls": 0.06845, "loss_rpn_bbox": 0.03382, "loss_cls": 0.36201, "acc": 90.34033, "loss_bbox": 0.26516, "loss": 0.72944, "time": 0.63186}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.01, "memory": 3720, "data_time": 0.33576, "loss_rpn_cls": 0.0727, "loss_rpn_bbox": 0.03284, "loss_cls": 0.32749, "acc": 91.10693, "loss_bbox": 0.24071, "loss": 0.67374, "time": 0.63178}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.01, "memory": 3720, "data_time": 0.34087, "loss_rpn_cls": 0.07239, "loss_rpn_bbox": 0.03398, "loss_cls": 0.34068, "acc": 91.10205, "loss_bbox": 0.24004, "loss": 0.6871, "time": 0.62979}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.01, "memory": 3720, "data_time": 0.32555, "loss_rpn_cls": 0.06545, "loss_rpn_bbox": 0.03286, "loss_cls": 0.3612, "acc": 89.86816, "loss_bbox": 0.26766, "loss": 0.72717, "time": 0.62332}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.01, "memory": 3720, "data_time": 0.35255, "loss_rpn_cls": 0.06228, "loss_rpn_bbox": 0.02931, "loss_cls": 0.36191, "acc": 89.79053, "loss_bbox": 0.26683, "loss": 0.72033, "time": 0.64449}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.01, "memory": 3720, "data_time": 0.33754, "loss_rpn_cls": 0.06741, "loss_rpn_bbox": 0.03298, "loss_cls": 0.36631, "acc": 90.03125, "loss_bbox": 0.25594, "loss": 0.72263, "time": 0.63314}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.01, "memory": 3720, "data_time": 0.32445, "loss_rpn_cls": 0.0635, "loss_rpn_bbox": 0.03122, "loss_cls": 0.35267, "acc": 90.12695, "loss_bbox": 0.25957, "loss": 0.70697, "time": 0.62343}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.01, "memory": 3720, "data_time": 0.32157, "loss_rpn_cls": 0.06069, "loss_rpn_bbox": 0.03184, "loss_cls": 0.33337, "acc": 90.41992, "loss_bbox": 0.25274, "loss": 0.67863, "time": 0.61902}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.01, "memory": 3720, "data_time": 0.31657, "loss_rpn_cls": 0.05806, "loss_rpn_bbox": 0.03085, "loss_cls": 0.34078, "acc": 89.84863, "loss_bbox": 0.26692, "loss": 0.69661, "time": 0.61329}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.01, "memory": 3720, "data_time": 0.32429, "loss_rpn_cls": 0.05975, "loss_rpn_bbox": 0.03001, "loss_cls": 0.32335, "acc": 90.64941, "loss_bbox": 0.24206, "loss": 0.65516, "time": 0.61772}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.01, "memory": 3720, "data_time": 0.33501, "loss_rpn_cls": 0.06011, "loss_rpn_bbox": 0.03174, "loss_cls": 0.33651, "acc": 90.25098, "loss_bbox": 0.24672, "loss": 0.67509, "time": 0.62736}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.01, "memory": 3720, "data_time": 0.32148, "loss_rpn_cls": 0.05517, "loss_rpn_bbox": 0.02876, "loss_cls": 0.3338, "acc": 90.14844, "loss_bbox": 0.25413, "loss": 0.67186, "time": 0.62}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.01, "memory": 3720, "data_time": 0.32457, "loss_rpn_cls": 0.0608, "loss_rpn_bbox": 0.02936, "loss_cls": 0.32874, "acc": 90.40625, "loss_bbox": 0.24239, "loss": 0.66129, "time": 0.6183}
