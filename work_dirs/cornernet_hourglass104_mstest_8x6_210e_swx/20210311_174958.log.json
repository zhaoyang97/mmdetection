{"env_info": "sys.platform: linux\nPython: 3.6.12 |Anaconda, Inc.| (default, Sep  8 2020, 23:10:56) [GCC 7.3.0]\nCUDA available: True\nGPU 0: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.130\nGCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\nPyTorch: 1.4.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CUDA Runtime 10.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.1\n  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.5.0\nOpenCV: 4.4.0\nMMCV: 1.1.5\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.0\nMMDetection: 2.5.0+", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ndataset_type = 'COCODataset'\ndata_root = 'data/coco/'\nannotations_root = 'annotations/'\nimage_root = '../data/TCTAnnotatedData/'\nclasses = ('normal', 'ascus', 'asch', 'lsil', 'hsil', 'agc', 'adenocarcinoma',\n           'vaginalis', 'monilia', 'dysbacteriosis')\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='PhotoMetricDistortion',\n        brightness_delta=32,\n        contrast_range=(0.5, 1.5),\n        saturation_range=(0.5, 1.5),\n        hue_delta=18),\n    dict(\n        type='RandomCenterCropPad',\n        crop_size=(511, 511),\n        ratios=(0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3),\n        test_mode=False,\n        test_pad_mode=None,\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Resize', img_scale=(511, 511), keep_ratio=False),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(\n        type='MultiScaleFlipAug',\n        scale_factor=1.0,\n        flip=True,\n        transforms=[\n            dict(type='Resize'),\n            dict(\n                type='RandomCenterCropPad',\n                crop_size=None,\n                ratios=None,\n                border=None,\n                test_mode=True,\n                test_pad_mode=['logical_or', 127],\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(\n                type='Collect',\n                keys=['img'],\n                meta_keys=('filename', 'ori_shape', 'img_shape', 'pad_shape',\n                           'scale_factor', 'flip', 'img_norm_cfg', 'border'))\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=0,\n    train=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil', 'agc',\n                 'adenocarcinoma', 'vaginalis', 'monilia', 'dysbacteriosis'),\n        ann_file='/root/userfolder/data/VOC2019/coco_train.json',\n        img_prefix='/root/userfolder/data/VOC2019/JPEGImages/',\n        pipeline=[\n            dict(type='LoadImageFromFile', to_float32=True),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='PhotoMetricDistortion',\n                brightness_delta=32,\n                contrast_range=(0.5, 1.5),\n                saturation_range=(0.5, 1.5),\n                hue_delta=18),\n            dict(\n                type='RandomCenterCropPad',\n                crop_size=(511, 511),\n                ratios=(0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3),\n                test_mode=False,\n                test_pad_mode=None,\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Resize', img_scale=(511, 511), keep_ratio=False),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil', 'agc',\n                 'adenocarcinoma', 'vaginalis', 'monilia', 'dysbacteriosis'),\n        ann_file='/root/userfolder/data/VOC2019/coco_test.json',\n        img_prefix='/root/userfolder/data/VOC2019/JPEGImages/',\n        pipeline=[\n            dict(type='LoadImageFromFile', to_float32=True),\n            dict(\n                type='MultiScaleFlipAug',\n                scale_factor=1.0,\n                flip=True,\n                transforms=[\n                    dict(type='Resize'),\n                    dict(\n                        type='RandomCenterCropPad',\n                        crop_size=None,\n                        ratios=None,\n                        border=None,\n                        test_mode=True,\n                        test_pad_mode=['logical_or', 127],\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(\n                        type='Collect',\n                        keys=['img'],\n                        meta_keys=('filename', 'ori_shape', 'img_shape',\n                                   'pad_shape', 'scale_factor', 'flip',\n                                   'img_norm_cfg', 'border'))\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil', 'agc',\n                 'adenocarcinoma', 'vaginalis', 'monilia', 'dysbacteriosis'),\n        ann_file='/root/userfolder/data/VOC2019/coco_test.json',\n        img_prefix='/root/userfolder/data/VOC2019/JPEGImages/',\n        pipeline=[\n            dict(type='LoadImageFromFile', to_float32=True),\n            dict(\n                type='MultiScaleFlipAug',\n                scale_factor=1.0,\n                flip=True,\n                transforms=[\n                    dict(type='Resize'),\n                    dict(\n                        type='RandomCenterCropPad',\n                        crop_size=None,\n                        ratios=None,\n                        border=None,\n                        test_mode=True,\n                        test_pad_mode=['logical_or', 127],\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(\n                        type='Collect',\n                        keys=['img'],\n                        meta_keys=('filename', 'ori_shape', 'img_shape',\n                                   'pad_shape', 'scale_factor', 'flip',\n                                   'img_norm_cfg', 'border'))\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\nmodel = dict(\n    type='CornerNet',\n    backbone=dict(\n        type='HourglassNet',\n        downsample_times=5,\n        num_stacks=2,\n        stage_channels=[256, 256, 384, 384, 384, 512],\n        stage_blocks=[2, 2, 2, 2, 2, 4],\n        norm_cfg=dict(type='BN', requires_grad=True)),\n    neck=None,\n    bbox_head=dict(\n        type='CornerHead',\n        num_classes=80,\n        in_channels=256,\n        num_feat_levels=2,\n        corner_emb_channels=1,\n        loss_heatmap=dict(\n            type='GaussianFocalLoss', alpha=2.0, gamma=4.0, loss_weight=1),\n        loss_embedding=dict(\n            type='AssociativeEmbeddingLoss', pull_weight=0.1, push_weight=0.1),\n        loss_offset=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1)))\ntrain_cfg = None\ntest_cfg = dict(\n    corner_topk=100,\n    local_maximum_kernel=3,\n    distance_threshold=0.5,\n    score_thr=0.05,\n    max_per_img=100,\n    nms_cfg=dict(type='soft_nms', iou_threshold=0.5, method='gaussian'))\noptimizer = dict(type='Adam', lr=0.0005)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.3333333333333333,\n    step=[180])\ntotal_epochs = 210\nwork_dir = './work_dirs/cornernet_hourglass104_mstest_8x6_210e_swx'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "cornernet_hourglass104_mstest_8x6_210e_swx.py"}
