{"env_info": "sys.platform: linux\nPython: 3.6.12 |Anaconda, Inc.| (default, Sep  8 2020, 23:10:56) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: GeForce RTX 2080 Ti\nCUDA_HOME: None\nGCC: gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44)\nPyTorch: 1.4.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CUDA Runtime 10.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.1\n  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.5.0\nOpenCV: 4.5.1\nMMCV: 1.1.6\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.0\nMMDetection: 2.5.0+", "config": "model = dict(\n    type='FasterRCNN',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN_CARAFE_3_se',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5,\n        start_level=0,\n        end_level=-1,\n        norm_cfg=None,\n        act_cfg=None,\n        order=('conv', 'norm', 'act'),\n        upsample_cfg=dict(\n            type='carafe',\n            up_kernel=5,\n            up_group=1,\n            encoder_kernel=3,\n            encoder_dilation=1,\n            compressed_channels=64)),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=80,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))))\ntrain_cfg = dict(\n    rpn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.7,\n            neg_iou_thr=0.3,\n            min_pos_iou=0.3,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=256,\n            pos_fraction=0.5,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    rpn_proposal=dict(\n        nms_across_levels=False,\n        nms_pre=2000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0.5,\n            match_low_quality=False,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=512,\n            pos_fraction=0.25,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=True),\n        pos_weight=-1,\n        debug=False))\ntest_cfg = dict(\n    rpn=dict(\n        nms_across_levels=False,\n        nms_pre=1000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'CocoDataset'\ndata_root = '../data/coco/'\nannotations_root = '../data/coco/annotations/'\nimage_root = '../data/coco/'\nimg_scale = (1333, 800)\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=64),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=64),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=0,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/instances_train2017.json',\n        img_prefix='../data/coco/train2017',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=64),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/instances_val2017.json',\n        img_prefix='../data/coco/val2017',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=64),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/image_info_test-dev2017.json',\n        img_prefix='../data/coco/test2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=64),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\ntotal_epochs = 12\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/coco_carafe_3_se'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "coco_carafe_3_se.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 4268, "data_time": 0.19419, "loss_rpn_cls": 0.46782, "loss_rpn_bbox": 0.11844, "loss_cls": 1.67243, "acc": 87.08984, "loss_bbox": 0.06846, "loss": 2.32716, "time": 0.503}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 4268, "data_time": 0.08556, "loss_rpn_cls": 0.21758, "loss_rpn_bbox": 0.08431, "loss_cls": 0.52013, "acc": 94.53809, "loss_bbox": 0.18603, "loss": 1.00806, "time": 0.37986}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 4268, "data_time": 0.08832, "loss_rpn_cls": 0.19027, "loss_rpn_bbox": 0.09561, "loss_cls": 0.45295, "acc": 93.7417, "loss_bbox": 0.21233, "loss": 0.95115, "time": 0.38528}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 4268, "data_time": 0.15611, "loss_rpn_cls": 0.15582, "loss_rpn_bbox": 0.09089, "loss_cls": 0.43819, "acc": 93.6792, "loss_bbox": 0.22204, "loss": 0.90695, "time": 0.47058}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 4268, "data_time": 0.14657, "loss_rpn_cls": 0.1553, "loss_rpn_bbox": 0.10169, "loss_cls": 0.50026, "acc": 92.60742, "loss_bbox": 0.25823, "loss": 1.01549, "time": 0.45525}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 4268, "data_time": 0.16036, "loss_rpn_cls": 0.12723, "loss_rpn_bbox": 0.08788, "loss_cls": 0.49207, "acc": 92.2749, "loss_bbox": 0.27901, "loss": 0.98618, "time": 0.46992}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 4268, "data_time": 0.15452, "loss_rpn_cls": 0.15431, "loss_rpn_bbox": 0.09775, "loss_cls": 0.48977, "acc": 92.35645, "loss_bbox": 0.26879, "loss": 1.01061, "time": 0.46931}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 4268, "data_time": 0.14372, "loss_rpn_cls": 0.1276, "loss_rpn_bbox": 0.08784, "loss_cls": 0.49001, "acc": 91.93994, "loss_bbox": 0.28776, "loss": 0.9932, "time": 0.46541}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 4268, "data_time": 0.15803, "loss_rpn_cls": 0.13483, "loss_rpn_bbox": 0.09388, "loss_cls": 0.50051, "acc": 92.23486, "loss_bbox": 0.27072, "loss": 0.99994, "time": 0.47898}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 4268, "data_time": 0.15496, "loss_rpn_cls": 0.14008, "loss_rpn_bbox": 0.09637, "loss_cls": 0.51536, "acc": 91.32129, "loss_bbox": 0.29887, "loss": 1.05068, "time": 0.47273}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 4268, "data_time": 0.15448, "loss_rpn_cls": 0.13444, "loss_rpn_bbox": 0.10054, "loss_cls": 0.52564, "acc": 90.98633, "loss_bbox": 0.31973, "loss": 1.08034, "time": 0.47097}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 4268, "data_time": 0.15983, "loss_rpn_cls": 0.11255, "loss_rpn_bbox": 0.08634, "loss_cls": 0.48192, "acc": 91.80322, "loss_bbox": 0.29077, "loss": 0.97159, "time": 0.47823}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 4268, "data_time": 0.16049, "loss_rpn_cls": 0.11148, "loss_rpn_bbox": 0.09442, "loss_cls": 0.48216, "acc": 91.7998, "loss_bbox": 0.28507, "loss": 0.97313, "time": 0.47821}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 4268, "data_time": 0.15431, "loss_rpn_cls": 0.10867, "loss_rpn_bbox": 0.08395, "loss_cls": 0.49418, "acc": 91.13232, "loss_bbox": 0.31811, "loss": 1.0049, "time": 0.46622}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 4268, "data_time": 0.16351, "loss_rpn_cls": 0.11131, "loss_rpn_bbox": 0.088, "loss_cls": 0.49932, "acc": 91.31885, "loss_bbox": 0.31224, "loss": 1.01087, "time": 0.47981}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 4268, "data_time": 0.17228, "loss_rpn_cls": 0.08884, "loss_rpn_bbox": 0.08173, "loss_cls": 0.50391, "acc": 90.40088, "loss_bbox": 0.34178, "loss": 1.01626, "time": 0.49087}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.02, "memory": 4268, "data_time": 0.16991, "loss_rpn_cls": 0.09156, "loss_rpn_bbox": 0.08368, "loss_cls": 0.49243, "acc": 90.33984, "loss_bbox": 0.347, "loss": 1.01467, "time": 0.48506}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.02, "memory": 4268, "data_time": 0.17226, "loss_rpn_cls": 0.09358, "loss_rpn_bbox": 0.08325, "loss_cls": 0.50946, "acc": 89.98047, "loss_bbox": 0.35332, "loss": 1.0396, "time": 0.48712}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.02, "memory": 4268, "data_time": 0.15679, "loss_rpn_cls": 0.09139, "loss_rpn_bbox": 0.08403, "loss_cls": 0.49983, "acc": 90.10156, "loss_bbox": 0.34271, "loss": 1.01797, "time": 0.46966}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.02, "memory": 4268, "data_time": 0.14754, "loss_rpn_cls": 0.09166, "loss_rpn_bbox": 0.08148, "loss_cls": 0.49634, "acc": 90.4917, "loss_bbox": 0.33406, "loss": 1.00354, "time": 0.4654}
