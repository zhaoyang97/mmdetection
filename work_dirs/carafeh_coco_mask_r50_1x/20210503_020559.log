2021-05-03 02:05:59,452 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.6.12 |Anaconda, Inc.| (default, Sep  8 2020, 23:10:56) [GCC 7.3.0]
CUDA available: True
GPU 0,1,2,3: GeForce RTX 2080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 10.0, V10.0.130
GCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609
PyTorch: 1.4.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CUDA Runtime 10.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.1
  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

TorchVision: 0.5.0
OpenCV: 4.4.0
MMCV: 1.1.5
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 10.0
MMDetection: 2.5.0+
------------------------------------------------------------

2021-05-03 02:05:59,932 - mmdet - INFO - Distributed training: True
2021-05-03 02:06:00,428 - mmdet - INFO - Config:
model = dict(
    type='MaskRCNN',
    pretrained='torchvision://resnet50',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch'),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
    roi_head=dict(
        type='StandardRoIHead',
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=dict(
            type='Shared2FCBBoxHead',
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=80,
            bbox_coder=dict(
                type='DeltaXYWHBBoxCoder',
                target_means=[0.0, 0.0, 0.0, 0.0],
                target_stds=[0.1, 0.1, 0.2, 0.2]),
            reg_class_agnostic=False,
            loss_cls=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
        mask_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        mask_head=dict(
            type='FCNMaskHead',
            num_convs=4,
            in_channels=256,
            conv_out_channels=256,
            num_classes=80,
            loss_mask=dict(
                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0),
            upsample_cfg=dict(type='carafe', scale_factor=2))))
train_cfg = dict(
    rpn=dict(
        assigner=dict(
            type='MaxIoUAssigner',
            pos_iou_thr=0.7,
            neg_iou_thr=0.3,
            min_pos_iou=0.3,
            match_low_quality=True,
            ignore_iof_thr=-1),
        sampler=dict(
            type='RandomSampler',
            num=256,
            pos_fraction=0.5,
            neg_pos_ub=-1,
            add_gt_as_proposals=False),
        allowed_border=-1,
        pos_weight=-1,
        debug=False),
    rpn_proposal=dict(
        nms_across_levels=False,
        nms_pre=2000,
        nms_post=1000,
        max_num=1000,
        nms_thr=0.7,
        min_bbox_size=0),
    rcnn=dict(
        assigner=dict(
            type='MaxIoUAssigner',
            pos_iou_thr=0.5,
            neg_iou_thr=0.5,
            min_pos_iou=0.5,
            match_low_quality=True,
            ignore_iof_thr=-1),
        sampler=dict(
            type='RandomSampler',
            num=512,
            pos_fraction=0.25,
            neg_pos_ub=-1,
            add_gt_as_proposals=True),
        mask_size=28,
        pos_weight=-1,
        debug=False))
test_cfg = dict(
    rpn=dict(
        nms_across_levels=False,
        nms_pre=1000,
        nms_post=1000,
        max_num=1000,
        nms_thr=0.7,
        min_bbox_size=0),
    rcnn=dict(
        score_thr=0.05,
        nms=dict(type='nms', iou_threshold=0.5),
        max_per_img=100,
        mask_thr_binary=0.5))
dataset_type = 'CocoDataset'
data_root = '../data/coco/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=0,
    train=dict(
        type='CocoDataset',
        ann_file='../data/coco/annotations/instances_train2017.json',
        img_prefix='../data/coco/train2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(
                type='Collect',
                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file='../data/coco/annotations/instances_val2017.json',
        img_prefix='../data/coco/val2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file='../data/coco/annotations/image_info_test-dev2017.json',
        img_prefix='../data/coco/test2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(metric=['bbox', 'segm'])
optimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001,
    step=[8, 11])
total_epochs = 12
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = './work_dirs/carafeh_coco_mask_r50_1x'
gpu_ids = range(0, 1)

2021-05-03 02:06:00,864 - mmdet - INFO - load model from: torchvision://resnet50
2021-05-03 02:06:04,577 - mmdet - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

2021-05-03 02:06:24,461 - mmdet - INFO - Start running, host: root@0981e3d7df7c, work_dir: /root/userfolder/mmdetection/work_dirs/carafeh_coco_mask_r50_1x
2021-05-03 02:06:24,462 - mmdet - INFO - workflow: [('train', 1)], max: 12 epochs
2021-05-03 02:06:56,215 - mmdet - INFO - Epoch [1][50/14659]	lr: 1.978e-03, eta: 1 day, 6:56:11, time: 0.633, data_time: 0.277, memory: 3991, loss_rpn_cls: 0.5497, loss_rpn_bbox: 0.1174, loss_cls: 1.3676, acc: 85.3682, loss_bbox: 0.0918, loss_mask: 0.8231, loss: 2.9497
2021-05-03 02:07:23,685 - mmdet - INFO - Epoch [1][100/14659]	lr: 3.976e-03, eta: 1 day, 4:52:17, time: 0.549, data_time: 0.191, memory: 4197, loss_rpn_cls: 0.1992, loss_rpn_bbox: 0.0884, loss_cls: 0.5207, acc: 94.1416, loss_bbox: 0.2039, loss_mask: 0.6752, loss: 1.6874
2021-05-03 02:07:51,561 - mmdet - INFO - Epoch [1][150/14659]	lr: 5.974e-03, eta: 1 day, 4:18:58, time: 0.558, data_time: 0.207, memory: 4311, loss_rpn_cls: 0.1763, loss_rpn_bbox: 0.0977, loss_cls: 0.5095, acc: 93.3003, loss_bbox: 0.2318, loss_mask: 0.6470, loss: 1.6623
2021-05-03 02:08:18,996 - mmdet - INFO - Epoch [1][200/14659]	lr: 7.972e-03, eta: 1 day, 3:55:16, time: 0.548, data_time: 0.190, memory: 4311, loss_rpn_cls: 0.1497, loss_rpn_bbox: 0.0915, loss_cls: 0.5065, acc: 92.8896, loss_bbox: 0.2533, loss_mask: 0.6401, loss: 1.6412
2021-05-03 02:08:47,769 - mmdet - INFO - Epoch [1][250/14659]	lr: 9.970e-03, eta: 1 day, 3:56:42, time: 0.575, data_time: 0.198, memory: 4430, loss_rpn_cls: 0.1610, loss_rpn_bbox: 0.1028, loss_cls: 0.5336, acc: 92.0117, loss_bbox: 0.2808, loss_mask: 0.6222, loss: 1.7004
2021-05-03 02:09:14,930 - mmdet - INFO - Epoch [1][300/14659]	lr: 1.197e-02, eta: 1 day, 3:41:53, time: 0.543, data_time: 0.188, memory: 4430, loss_rpn_cls: 0.1256, loss_rpn_bbox: 0.0901, loss_cls: 0.5184, acc: 91.8057, loss_bbox: 0.2977, loss_mask: 0.6014, loss: 1.6333
2021-05-03 02:09:42,866 - mmdet - INFO - Epoch [1][350/14659]	lr: 1.397e-02, eta: 1 day, 3:37:47, time: 0.559, data_time: 0.196, memory: 4430, loss_rpn_cls: 0.1315, loss_rpn_bbox: 0.0946, loss_cls: 0.5354, acc: 91.0366, loss_bbox: 0.3230, loss_mask: 0.5924, loss: 1.6769
2021-05-03 02:10:10,512 - mmdet - INFO - Epoch [1][400/14659]	lr: 1.596e-02, eta: 1 day, 3:32:24, time: 0.553, data_time: 0.186, memory: 4430, loss_rpn_cls: 0.1212, loss_rpn_bbox: 0.0838, loss_cls: 0.5117, acc: 91.5444, loss_bbox: 0.3023, loss_mask: 0.5730, loss: 1.5920
2021-05-03 02:10:38,263 - mmdet - INFO - Epoch [1][450/14659]	lr: 1.796e-02, eta: 1 day, 3:28:23, time: 0.554, data_time: 0.194, memory: 4533, loss_rpn_cls: 0.1184, loss_rpn_bbox: 0.0888, loss_cls: 0.5428, acc: 90.8853, loss_bbox: 0.3324, loss_mask: 0.5546, loss: 1.6371
2021-05-03 02:11:06,716 - mmdet - INFO - Epoch [1][500/14659]	lr: 1.996e-02, eta: 1 day, 3:29:44, time: 0.570, data_time: 0.199, memory: 4533, loss_rpn_cls: 0.1195, loss_rpn_bbox: 0.0911, loss_cls: 0.5513, acc: 90.3521, loss_bbox: 0.3467, loss_mask: 0.5151, loss: 1.6237
2021-05-03 02:11:35,910 - mmdet - INFO - Epoch [1][550/14659]	lr: 2.000e-02, eta: 1 day, 3:34:13, time: 0.583, data_time: 0.210, memory: 4533, loss_rpn_cls: 0.1277, loss_rpn_bbox: 0.0991, loss_cls: 0.5808, acc: 89.6719, loss_bbox: 0.3620, loss_mask: 0.5118, loss: 1.6813
2021-05-03 02:12:03,863 - mmdet - INFO - Epoch [1][600/14659]	lr: 2.000e-02, eta: 1 day, 3:32:19, time: 0.560, data_time: 0.192, memory: 4533, loss_rpn_cls: 0.1117, loss_rpn_bbox: 0.0835, loss_cls: 0.5158, acc: 91.0259, loss_bbox: 0.3162, loss_mask: 0.5106, loss: 1.5378
2021-05-03 02:12:31,921 - mmdet - INFO - Epoch [1][650/14659]	lr: 2.000e-02, eta: 1 day, 3:30:36, time: 0.560, data_time: 0.197, memory: 4533, loss_rpn_cls: 0.1134, loss_rpn_bbox: 0.0937, loss_cls: 0.5148, acc: 90.7471, loss_bbox: 0.3268, loss_mask: 0.4957, loss: 1.5445
2021-05-03 02:13:00,229 - mmdet - INFO - Epoch [1][700/14659]	lr: 2.000e-02, eta: 1 day, 3:30:32, time: 0.567, data_time: 0.193, memory: 4533, loss_rpn_cls: 0.1067, loss_rpn_bbox: 0.0845, loss_cls: 0.5104, acc: 90.5615, loss_bbox: 0.3332, loss_mask: 0.4791, loss: 1.5139
2021-05-03 02:13:28,163 - mmdet - INFO - Epoch [1][750/14659]	lr: 2.000e-02, eta: 1 day, 3:28:36, time: 0.558, data_time: 0.196, memory: 4533, loss_rpn_cls: 0.1075, loss_rpn_bbox: 0.0879, loss_cls: 0.5029, acc: 90.7207, loss_bbox: 0.3267, loss_mask: 0.4793, loss: 1.5043
2021-05-03 02:13:55,821 - mmdet - INFO - Epoch [1][800/14659]	lr: 2.000e-02, eta: 1 day, 3:26:06, time: 0.554, data_time: 0.188, memory: 4533, loss_rpn_cls: 0.0918, loss_rpn_bbox: 0.0833, loss_cls: 0.5144, acc: 90.1519, loss_bbox: 0.3452, loss_mask: 0.4628, loss: 1.4975
