{"env_info": "sys.platform: linux\nPython: 3.6.12 |Anaconda, Inc.| (default, Sep  8 2020, 23:10:56) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.130\nGCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\nPyTorch: 1.4.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CUDA Runtime 10.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.1\n  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.5.0\nOpenCV: 4.4.0\nMMCV: 1.1.5\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.0\nMMDetection: 2.5.0+", "config": "model = dict(\n    type='MaskRCNN',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=80,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=80,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0),\n            upsample_cfg=dict(type='carafe', scale_factor=2))))\ntrain_cfg = dict(\n    rpn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.7,\n            neg_iou_thr=0.3,\n            min_pos_iou=0.3,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=256,\n            pos_fraction=0.5,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    rpn_proposal=dict(\n        nms_across_levels=False,\n        nms_pre=2000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0.5,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=512,\n            pos_fraction=0.25,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=True),\n        mask_size=28,\n        pos_weight=-1,\n        debug=False))\ntest_cfg = dict(\n    rpn=dict(\n        nms_across_levels=False,\n        nms_pre=1000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100,\n        mask_thr_binary=0.5))\ndataset_type = 'CocoDataset'\ndata_root = '../data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=0,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/instances_train2017.json',\n        img_prefix='../data/coco/train2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/instances_val2017.json',\n        img_prefix='../data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/image_info_test-dev2017.json',\n        img_prefix='../data/coco/test2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\ntotal_epochs = 12\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/carafeh_coco_mask_r50_1x'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "carafeh_coco_mask_r50_1x.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 3991, "data_time": 0.27712, "loss_rpn_cls": 0.54969, "loss_rpn_bbox": 0.11741, "loss_cls": 1.36765, "acc": 85.36816, "loss_bbox": 0.09176, "loss_mask": 0.82315, "loss": 2.94965, "time": 0.6333}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 4197, "data_time": 0.19062, "loss_rpn_cls": 0.19924, "loss_rpn_bbox": 0.08835, "loss_cls": 0.52069, "acc": 94.1416, "loss_bbox": 0.20389, "loss_mask": 0.67524, "loss": 1.68741, "time": 0.54909}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 4311, "data_time": 0.20711, "loss_rpn_cls": 0.17632, "loss_rpn_bbox": 0.09769, "loss_cls": 0.50955, "acc": 93.30029, "loss_bbox": 0.23181, "loss_mask": 0.64695, "loss": 1.66232, "time": 0.55759}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 4311, "data_time": 0.19049, "loss_rpn_cls": 0.1497, "loss_rpn_bbox": 0.09146, "loss_cls": 0.50655, "acc": 92.88965, "loss_bbox": 0.25332, "loss_mask": 0.64013, "loss": 1.64116, "time": 0.54828}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 4430, "data_time": 0.19792, "loss_rpn_cls": 0.161, "loss_rpn_bbox": 0.10282, "loss_cls": 0.53361, "acc": 92.01172, "loss_bbox": 0.28081, "loss_mask": 0.62219, "loss": 1.70042, "time": 0.57533}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 4430, "data_time": 0.18792, "loss_rpn_cls": 0.12558, "loss_rpn_bbox": 0.09008, "loss_cls": 0.51844, "acc": 91.80566, "loss_bbox": 0.29774, "loss_mask": 0.60141, "loss": 1.63325, "time": 0.54331}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 4430, "data_time": 0.19647, "loss_rpn_cls": 0.13153, "loss_rpn_bbox": 0.09463, "loss_cls": 0.53537, "acc": 91.03662, "loss_bbox": 0.32296, "loss_mask": 0.59243, "loss": 1.67691, "time": 0.55915}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 4430, "data_time": 0.18642, "loss_rpn_cls": 0.12125, "loss_rpn_bbox": 0.08382, "loss_cls": 0.51169, "acc": 91.54443, "loss_bbox": 0.30228, "loss_mask": 0.57299, "loss": 1.59203, "time": 0.55314}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 4533, "data_time": 0.19407, "loss_rpn_cls": 0.11842, "loss_rpn_bbox": 0.08884, "loss_cls": 0.54279, "acc": 90.88525, "loss_bbox": 0.33241, "loss_mask": 0.55465, "loss": 1.6371, "time": 0.55401}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 4533, "data_time": 0.19921, "loss_rpn_cls": 0.11947, "loss_rpn_bbox": 0.09108, "loss_cls": 0.55131, "acc": 90.35205, "loss_bbox": 0.34674, "loss_mask": 0.51505, "loss": 1.62366, "time": 0.56989}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 4533, "data_time": 0.20972, "loss_rpn_cls": 0.12767, "loss_rpn_bbox": 0.09913, "loss_cls": 0.58075, "acc": 89.67188, "loss_bbox": 0.36195, "loss_mask": 0.51185, "loss": 1.68135, "time": 0.58296}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 4533, "data_time": 0.1923, "loss_rpn_cls": 0.11165, "loss_rpn_bbox": 0.08346, "loss_cls": 0.51583, "acc": 91.02588, "loss_bbox": 0.31621, "loss_mask": 0.51062, "loss": 1.53777, "time": 0.56013}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 4533, "data_time": 0.19703, "loss_rpn_cls": 0.11337, "loss_rpn_bbox": 0.09375, "loss_cls": 0.51484, "acc": 90.74707, "loss_bbox": 0.32677, "loss_mask": 0.49573, "loss": 1.54446, "time": 0.55999}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 4533, "data_time": 0.1934, "loss_rpn_cls": 0.10671, "loss_rpn_bbox": 0.08447, "loss_cls": 0.51042, "acc": 90.56152, "loss_bbox": 0.33318, "loss_mask": 0.47907, "loss": 1.51386, "time": 0.567}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 4533, "data_time": 0.19648, "loss_rpn_cls": 0.10748, "loss_rpn_bbox": 0.08788, "loss_cls": 0.50293, "acc": 90.7207, "loss_bbox": 0.32672, "loss_mask": 0.47925, "loss": 1.50427, "time": 0.55776}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 4533, "data_time": 0.18812, "loss_rpn_cls": 0.09182, "loss_rpn_bbox": 0.08326, "loss_cls": 0.51444, "acc": 90.15186, "loss_bbox": 0.34517, "loss_mask": 0.46283, "loss": 1.49751, "time": 0.55352}
