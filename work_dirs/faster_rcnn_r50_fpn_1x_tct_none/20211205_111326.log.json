{"env_info": "sys.platform: linux\nPython: 3.7.9 (default, Aug 31 2020, 12:42:55) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.130\nGCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\nPyTorch: 1.6.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.5.0 (Git Hash e2ac1fac44c5078ca927cb9b90e1b3066a0b2ed0)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.7.0\nOpenCV: 3.4.2\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.2\nMMDetection: 2.12.0+", "config": "model = dict(\n    type='FasterRCNN',\n    pretrained=None,\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=10,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))))\ntrain_cfg = dict(\n    rpn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.7,\n            neg_iou_thr=0.3,\n            min_pos_iou=0.3,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=256,\n            pos_fraction=0.5,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    rpn_proposal=dict(\n        nms_across_levels=False,\n        nms_pre=2000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0.5,\n            match_low_quality=False,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=512,\n            pos_fraction=0.25,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=True),\n        pos_weight=-1,\n        debug=False))\ntest_cfg = dict(\n    rpn=dict(\n        nms_across_levels=False,\n        nms_pre=1000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nannotations_root = '../data/TCT_30000/'\nimage_root = '../data/TCT_30000/'\nclasses = ('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n           'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n           'dysbacteriosis_herpes_act', 'ec')\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=0,\n    train=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='../data/TCT_30000/train30000-cat10.json',\n        img_prefix='../data/TCT_30000/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='../data/TCT_30000/val10000-cat10.json',\n        img_prefix='../data/TCT_30000/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='../data/TCT_30000/test10000-cat10.json',\n        img_prefix='../data/TCT_30000/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/faster_rcnn_r50_fpn_1x_tct_none'\ngpu_ids = range(0, 4)\n", "seed": null, "exp_name": "faster_rcnn_r50_fpn_1x_tct_none.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 3717, "data_time": 0.36553, "loss_rpn_cls": 0.65332, "loss_rpn_bbox": 0.04386, "loss_cls": 0.66786, "acc": 89.66162, "loss_bbox": 0.02087, "loss": 1.38592, "time": 0.66227}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00199, "memory": 3719, "data_time": 0.31739, "loss_rpn_cls": 0.32057, "loss_rpn_bbox": 0.04615, "loss_cls": 0.24498, "acc": 98.81543, "loss_bbox": 0.0195, "loss": 0.6312, "time": 0.59336}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00299, "memory": 3719, "data_time": 0.3052, "loss_rpn_cls": 0.21969, "loss_rpn_bbox": 0.04357, "loss_cls": 0.48079, "acc": 98.92285, "loss_bbox": 0.00938, "loss": 0.75343, "time": 0.59439}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00399, "memory": 3719, "data_time": 0.31089, "loss_rpn_cls": 0.21348, "loss_rpn_bbox": 0.042, "loss_cls": 0.36358, "acc": 98.69189, "loss_bbox": 0.01717, "loss": 0.63623, "time": 0.59701}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00499, "memory": 3719, "data_time": 0.30755, "loss_rpn_cls": 0.21072, "loss_rpn_bbox": 0.04313, "loss_cls": 0.20279, "acc": 98.43408, "loss_bbox": 0.02817, "loss": 0.48481, "time": 0.59419}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00598, "memory": 3720, "data_time": 0.31004, "loss_rpn_cls": 0.2051, "loss_rpn_bbox": 0.04227, "loss_cls": 0.16324, "acc": 97.76074, "loss_bbox": 0.05503, "loss": 0.46564, "time": 0.59161}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00698, "memory": 3720, "data_time": 0.31096, "loss_rpn_cls": 0.1935, "loss_rpn_bbox": 0.03975, "loss_cls": 0.14193, "acc": 97.61475, "loss_bbox": 0.06107, "loss": 0.43625, "time": 0.59481}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00798, "memory": 3720, "data_time": 0.307, "loss_rpn_cls": 0.18457, "loss_rpn_bbox": 0.04049, "loss_cls": 0.16766, "acc": 97.12793, "loss_bbox": 0.0806, "loss": 0.47332, "time": 0.59135}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00898, "memory": 3720, "data_time": 0.30857, "loss_rpn_cls": 0.17955, "loss_rpn_bbox": 0.04177, "loss_cls": 0.18163, "acc": 96.74756, "loss_bbox": 0.09136, "loss": 0.49432, "time": 0.59585}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00998, "memory": 3720, "data_time": 0.31651, "loss_rpn_cls": 0.16751, "loss_rpn_bbox": 0.04386, "loss_cls": 0.22618, "acc": 95.88672, "loss_bbox": 0.12149, "loss": 0.55903, "time": 0.60878}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.01, "memory": 3720, "data_time": 0.30911, "loss_rpn_cls": 0.15835, "loss_rpn_bbox": 0.03969, "loss_cls": 0.20995, "acc": 96.18311, "loss_bbox": 0.11208, "loss": 0.52007, "time": 0.59531}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.01, "memory": 3720, "data_time": 0.30932, "loss_rpn_cls": 0.1501, "loss_rpn_bbox": 0.0396, "loss_cls": 0.21159, "acc": 96.2417, "loss_bbox": 0.10975, "loss": 0.51103, "time": 0.59506}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.01, "memory": 3720, "data_time": 0.30567, "loss_rpn_cls": 0.14805, "loss_rpn_bbox": 0.04004, "loss_cls": 0.22735, "acc": 95.79785, "loss_bbox": 0.12213, "loss": 0.53757, "time": 0.59172}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.01, "memory": 3720, "data_time": 0.31123, "loss_rpn_cls": 0.14325, "loss_rpn_bbox": 0.0378, "loss_cls": 0.20603, "acc": 96.26221, "loss_bbox": 0.10569, "loss": 0.49277, "time": 0.59051}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.01, "memory": 3720, "data_time": 0.31148, "loss_rpn_cls": 0.14167, "loss_rpn_bbox": 0.03817, "loss_cls": 0.20984, "acc": 96.25732, "loss_bbox": 0.10461, "loss": 0.49429, "time": 0.59807}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.01, "memory": 3720, "data_time": 0.311, "loss_rpn_cls": 0.13658, "loss_rpn_bbox": 0.03673, "loss_cls": 0.22094, "acc": 95.82031, "loss_bbox": 0.11715, "loss": 0.5114, "time": 0.59715}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.01, "memory": 3720, "data_time": 0.32097, "loss_rpn_cls": 0.13167, "loss_rpn_bbox": 0.035, "loss_cls": 0.2161, "acc": 95.99756, "loss_bbox": 0.11266, "loss": 0.49542, "time": 0.59834}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.01, "memory": 3720, "data_time": 0.31145, "loss_rpn_cls": 0.14539, "loss_rpn_bbox": 0.03954, "loss_cls": 0.22387, "acc": 95.89844, "loss_bbox": 0.11546, "loss": 0.52426, "time": 0.5922}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.01, "memory": 3720, "data_time": 0.30984, "loss_rpn_cls": 0.13852, "loss_rpn_bbox": 0.03845, "loss_cls": 0.22459, "acc": 95.88574, "loss_bbox": 0.1165, "loss": 0.51806, "time": 0.59683}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.01, "memory": 3720, "data_time": 0.32023, "loss_rpn_cls": 0.13339, "loss_rpn_bbox": 0.03907, "loss_cls": 0.23438, "acc": 95.55176, "loss_bbox": 0.12438, "loss": 0.53121, "time": 0.60416}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.01, "memory": 3720, "data_time": 0.3187, "loss_rpn_cls": 0.12955, "loss_rpn_bbox": 0.03767, "loss_cls": 0.23673, "acc": 95.41162, "loss_bbox": 0.12873, "loss": 0.53268, "time": 0.60495}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.01, "memory": 3720, "data_time": 0.31512, "loss_rpn_cls": 0.13862, "loss_rpn_bbox": 0.03696, "loss_cls": 0.23019, "acc": 95.66895, "loss_bbox": 0.12146, "loss": 0.52723, "time": 0.59766}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.01, "memory": 3720, "data_time": 0.32409, "loss_rpn_cls": 0.13465, "loss_rpn_bbox": 0.03857, "loss_cls": 0.23508, "acc": 95.53027, "loss_bbox": 0.12593, "loss": 0.53423, "time": 0.60275}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.01, "memory": 3720, "data_time": 0.31951, "loss_rpn_cls": 0.12081, "loss_rpn_bbox": 0.03457, "loss_cls": 0.22519, "acc": 95.72412, "loss_bbox": 0.11935, "loss": 0.49993, "time": 0.60382}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.01, "memory": 3720, "data_time": 0.32584, "loss_rpn_cls": 0.12652, "loss_rpn_bbox": 0.03712, "loss_cls": 0.22909, "acc": 95.53662, "loss_bbox": 0.1238, "loss": 0.51653, "time": 0.60811}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.01, "memory": 3720, "data_time": 0.32699, "loss_rpn_cls": 0.12764, "loss_rpn_bbox": 0.03638, "loss_cls": 0.22012, "acc": 95.75684, "loss_bbox": 0.11405, "loss": 0.49818, "time": 0.6104}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.01, "memory": 3720, "data_time": 0.32517, "loss_rpn_cls": 0.12167, "loss_rpn_bbox": 0.03345, "loss_cls": 0.22372, "acc": 95.67188, "loss_bbox": 0.11955, "loss": 0.49838, "time": 0.60549}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.01, "memory": 3720, "data_time": 0.30742, "loss_rpn_cls": 0.12259, "loss_rpn_bbox": 0.03644, "loss_cls": 0.22652, "acc": 95.62744, "loss_bbox": 0.1194, "loss": 0.50495, "time": 0.58815}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.01, "memory": 3720, "data_time": 0.31787, "loss_rpn_cls": 0.1283, "loss_rpn_bbox": 0.03732, "loss_cls": 0.22753, "acc": 95.55518, "loss_bbox": 0.12137, "loss": 0.51452, "time": 0.59928}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.01, "memory": 3720, "data_time": 0.31538, "loss_rpn_cls": 0.12726, "loss_rpn_bbox": 0.03752, "loss_cls": 0.24219, "acc": 95.17529, "loss_bbox": 0.13393, "loss": 0.5409, "time": 0.59503}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.01, "memory": 3720, "data_time": 0.31251, "loss_rpn_cls": 0.1215, "loss_rpn_bbox": 0.03479, "loss_cls": 0.23193, "acc": 95.40039, "loss_bbox": 0.12542, "loss": 0.51364, "time": 0.60022}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.01, "memory": 3720, "data_time": 0.31282, "loss_rpn_cls": 0.12329, "loss_rpn_bbox": 0.037, "loss_cls": 0.26046, "acc": 94.71436, "loss_bbox": 0.14411, "loss": 0.56486, "time": 0.60095}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 0.01, "memory": 3720, "data_time": 0.31159, "loss_rpn_cls": 0.118, "loss_rpn_bbox": 0.03524, "loss_cls": 0.24661, "acc": 95.05908, "loss_bbox": 0.13602, "loss": 0.53588, "time": 0.60188}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.01, "memory": 3720, "data_time": 0.31299, "loss_rpn_cls": 0.11669, "loss_rpn_bbox": 0.03694, "loss_cls": 0.25218, "acc": 94.99902, "loss_bbox": 0.13739, "loss": 0.54321, "time": 0.60392}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 0.01, "memory": 3720, "data_time": 0.31525, "loss_rpn_cls": 0.12219, "loss_rpn_bbox": 0.03697, "loss_cls": 0.23226, "acc": 95.46436, "loss_bbox": 0.12191, "loss": 0.51333, "time": 0.5985}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.01, "memory": 3720, "data_time": 0.31761, "loss_rpn_cls": 0.12262, "loss_rpn_bbox": 0.03796, "loss_cls": 0.2533, "acc": 94.95215, "loss_bbox": 0.13724, "loss": 0.55112, "time": 0.60219}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 0.01, "memory": 3720, "data_time": 0.31573, "loss_rpn_cls": 0.1184, "loss_rpn_bbox": 0.0357, "loss_cls": 0.24181, "acc": 95.25781, "loss_bbox": 0.12817, "loss": 0.52408, "time": 0.60725}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 0.01, "memory": 3720, "data_time": 0.32034, "loss_rpn_cls": 0.11234, "loss_rpn_bbox": 0.03116, "loss_cls": 0.23482, "acc": 95.39551, "loss_bbox": 0.12602, "loss": 0.50433, "time": 0.60658}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 0.01, "memory": 3720, "data_time": 0.31817, "loss_rpn_cls": 0.1153, "loss_rpn_bbox": 0.03434, "loss_cls": 0.24386, "acc": 95.1543, "loss_bbox": 0.13308, "loss": 0.52658, "time": 0.59909}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 0.01, "memory": 3720, "data_time": 0.31483, "loss_rpn_cls": 0.1238, "loss_rpn_bbox": 0.03686, "loss_cls": 0.25105, "acc": 94.97559, "loss_bbox": 0.13753, "loss": 0.54923, "time": 0.60535}
{"mode": "train", "epoch": 1, "iter": 2050, "lr": 0.01, "memory": 3720, "data_time": 0.31324, "loss_rpn_cls": 0.11581, "loss_rpn_bbox": 0.03434, "loss_cls": 0.23754, "acc": 95.25146, "loss_bbox": 0.12795, "loss": 0.51564, "time": 0.59966}
{"mode": "train", "epoch": 1, "iter": 2100, "lr": 0.01, "memory": 3720, "data_time": 0.30887, "loss_rpn_cls": 0.11854, "loss_rpn_bbox": 0.0354, "loss_cls": 0.25003, "acc": 94.99463, "loss_bbox": 0.13445, "loss": 0.53842, "time": 0.60354}
{"mode": "train", "epoch": 1, "iter": 2150, "lr": 0.01, "memory": 3720, "data_time": 0.3194, "loss_rpn_cls": 0.11827, "loss_rpn_bbox": 0.03747, "loss_cls": 0.25756, "acc": 94.6665, "loss_bbox": 0.14378, "loss": 0.55708, "time": 0.60691}
{"mode": "train", "epoch": 1, "iter": 2200, "lr": 0.01, "memory": 3720, "data_time": 0.31691, "loss_rpn_cls": 0.11229, "loss_rpn_bbox": 0.03617, "loss_cls": 0.25888, "acc": 94.57959, "loss_bbox": 0.14522, "loss": 0.55256, "time": 0.60208}
{"mode": "train", "epoch": 1, "iter": 2250, "lr": 0.01, "memory": 3720, "data_time": 0.31619, "loss_rpn_cls": 0.11357, "loss_rpn_bbox": 0.03702, "loss_cls": 0.26199, "acc": 94.46924, "loss_bbox": 0.1472, "loss": 0.55977, "time": 0.61044}
{"mode": "train", "epoch": 1, "iter": 2300, "lr": 0.01, "memory": 3720, "data_time": 0.32063, "loss_rpn_cls": 0.1151, "loss_rpn_bbox": 0.03488, "loss_cls": 0.25105, "acc": 94.95898, "loss_bbox": 0.13565, "loss": 0.53668, "time": 0.61137}
{"mode": "train", "epoch": 1, "iter": 2350, "lr": 0.01, "memory": 3720, "data_time": 0.31365, "loss_rpn_cls": 0.12113, "loss_rpn_bbox": 0.03581, "loss_cls": 0.25005, "acc": 94.99268, "loss_bbox": 0.13318, "loss": 0.54017, "time": 0.60179}
{"mode": "train", "epoch": 1, "iter": 2400, "lr": 0.01, "memory": 3720, "data_time": 0.31803, "loss_rpn_cls": 0.11494, "loss_rpn_bbox": 0.03624, "loss_cls": 0.26794, "acc": 94.53418, "loss_bbox": 0.14893, "loss": 0.56805, "time": 0.60224}
