{"env_info": "sys.platform: linux\nPython: 3.7.9 (default, Aug 31 2020, 12:42:55) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.130\nGCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\nPyTorch: 1.6.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.5.0 (Git Hash e2ac1fac44c5078ca927cb9b90e1b3066a0b2ed0)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.7.0\nOpenCV: 3.4.2\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.2\nMMDetection: 2.12.0+", "config": "model = dict(\n    type='FasterRCNN',\n    pretrained=\n    '../mmclassification/work_dirs/tctplus_resnet50_b32x8/epoch_100_pretrained.pth',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=10,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))))\ntrain_cfg = dict(\n    rpn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.7,\n            neg_iou_thr=0.3,\n            min_pos_iou=0.3,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=256,\n            pos_fraction=0.5,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    rpn_proposal=dict(\n        nms_across_levels=False,\n        nms_pre=2000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0.5,\n            match_low_quality=False,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=512,\n            pos_fraction=0.25,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=True),\n        pos_weight=-1,\n        debug=False))\ntest_cfg = dict(\n    rpn=dict(\n        nms_across_levels=False,\n        nms_pre=1000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nannotations_root = '../data/TCT_30000/'\nimage_root = '../data/TCT_30000/'\nclasses = ('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n           'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n           'dysbacteriosis_herpes_act', 'ec')\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=0,\n    train=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='../data/TCT_30000/train30000-cat10.json',\n        img_prefix='../data/TCT_30000/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='../data/TCT_30000/val10000-cat10.json',\n        img_prefix='../data/TCT_30000/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='../data/TCT_30000/test10000-cat10.json',\n        img_prefix='../data/TCT_30000/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\nshcedule_times = 4\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[32, 40, 44])\nrunner = dict(type='EpochBasedRunner', max_epochs=48)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/faster_rcnn_r50_fpn_4x_tctplus'\ngpu_ids = range(0, 4)\n", "seed": null, "exp_name": "faster_rcnn_r50_fpn_4x_tctplus.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 3716, "data_time": 0.35823, "loss_rpn_cls": 0.61353, "loss_rpn_bbox": 0.04521, "loss_cls": 0.58996, "acc": 87.70654, "loss_bbox": 0.05038, "loss": 1.29908, "time": 0.69005}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00199, "memory": 3720, "data_time": 0.32177, "loss_rpn_cls": 0.24716, "loss_rpn_bbox": 0.0464, "loss_cls": 0.13531, "acc": 98.42139, "loss_bbox": 0.03966, "loss": 0.46853, "time": 0.62256}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00299, "memory": 3720, "data_time": 0.3224, "loss_rpn_cls": 0.17954, "loss_rpn_bbox": 0.04297, "loss_cls": 0.18565, "acc": 97.01416, "loss_bbox": 0.0925, "loss": 0.50066, "time": 0.6228}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00399, "memory": 3720, "data_time": 0.32092, "loss_rpn_cls": 0.14322, "loss_rpn_bbox": 0.04063, "loss_cls": 0.30665, "acc": 94.38574, "loss_bbox": 0.19571, "loss": 0.68621, "time": 0.62438}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00499, "memory": 3720, "data_time": 0.32985, "loss_rpn_cls": 0.11841, "loss_rpn_bbox": 0.04023, "loss_cls": 0.30567, "acc": 93.80908, "loss_bbox": 0.20472, "loss": 0.66903, "time": 0.63304}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00598, "memory": 3720, "data_time": 0.32732, "loss_rpn_cls": 0.10615, "loss_rpn_bbox": 0.03926, "loss_cls": 0.30632, "acc": 93.37744, "loss_bbox": 0.20696, "loss": 0.65869, "time": 0.62531}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00698, "memory": 3720, "data_time": 0.32025, "loss_rpn_cls": 0.0933, "loss_rpn_bbox": 0.03547, "loss_cls": 0.33003, "acc": 92.42285, "loss_bbox": 0.23428, "loss": 0.69309, "time": 0.62093}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00798, "memory": 3720, "data_time": 0.32544, "loss_rpn_cls": 0.08443, "loss_rpn_bbox": 0.03568, "loss_cls": 0.3241, "acc": 92.05273, "loss_bbox": 0.24191, "loss": 0.68612, "time": 0.62905}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00898, "memory": 3720, "data_time": 0.33558, "loss_rpn_cls": 0.08361, "loss_rpn_bbox": 0.0368, "loss_cls": 0.34676, "acc": 91.57764, "loss_bbox": 0.24957, "loss": 0.71673, "time": 0.62734}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00998, "memory": 3720, "data_time": 0.3312, "loss_rpn_cls": 0.0851, "loss_rpn_bbox": 0.03759, "loss_cls": 0.36595, "acc": 90.86426, "loss_bbox": 0.26761, "loss": 0.75624, "time": 0.62846}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.01, "memory": 3720, "data_time": 0.33125, "loss_rpn_cls": 0.07562, "loss_rpn_bbox": 0.03264, "loss_cls": 0.34387, "acc": 90.9624, "loss_bbox": 0.26324, "loss": 0.71536, "time": 0.63664}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.01, "memory": 3720, "data_time": 0.3295, "loss_rpn_cls": 0.07634, "loss_rpn_bbox": 0.03458, "loss_cls": 0.32852, "acc": 91.375, "loss_bbox": 0.24217, "loss": 0.68161, "time": 0.62652}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.01, "memory": 3720, "data_time": 0.33164, "loss_rpn_cls": 0.07339, "loss_rpn_bbox": 0.03381, "loss_cls": 0.3304, "acc": 90.93408, "loss_bbox": 0.25548, "loss": 0.69308, "time": 0.62588}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.01, "memory": 3720, "data_time": 0.33505, "loss_rpn_cls": 0.0814, "loss_rpn_bbox": 0.03306, "loss_cls": 0.32594, "acc": 91.28174, "loss_bbox": 0.23875, "loss": 0.67915, "time": 0.63242}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.01, "memory": 3720, "data_time": 0.32303, "loss_rpn_cls": 0.07604, "loss_rpn_bbox": 0.03275, "loss_cls": 0.33158, "acc": 91.12598, "loss_bbox": 0.24495, "loss": 0.68533, "time": 0.62896}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.01, "memory": 3720, "data_time": 0.32236, "loss_rpn_cls": 0.07188, "loss_rpn_bbox": 0.03222, "loss_cls": 0.33116, "acc": 90.54102, "loss_bbox": 0.26446, "loss": 0.69972, "time": 0.63013}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.01, "memory": 3720, "data_time": 0.34598, "loss_rpn_cls": 0.06672, "loss_rpn_bbox": 0.03003, "loss_cls": 0.34781, "acc": 90.27734, "loss_bbox": 0.26587, "loss": 0.71043, "time": 0.63234}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.01, "memory": 3720, "data_time": 0.33303, "loss_rpn_cls": 0.07533, "loss_rpn_bbox": 0.0334, "loss_cls": 0.35748, "acc": 90.03662, "loss_bbox": 0.26844, "loss": 0.73464, "time": 0.62881}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.01, "memory": 3720, "data_time": 0.33245, "loss_rpn_cls": 0.07, "loss_rpn_bbox": 0.03199, "loss_cls": 0.33503, "acc": 90.57422, "loss_bbox": 0.25965, "loss": 0.69668, "time": 0.6249}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.01, "memory": 3720, "data_time": 0.32815, "loss_rpn_cls": 0.06793, "loss_rpn_bbox": 0.03258, "loss_cls": 0.34575, "acc": 90.22559, "loss_bbox": 0.25748, "loss": 0.70374, "time": 0.62151}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.01, "memory": 3720, "data_time": 0.32372, "loss_rpn_cls": 0.06729, "loss_rpn_bbox": 0.0313, "loss_cls": 0.33174, "acc": 90.20215, "loss_bbox": 0.26366, "loss": 0.694, "time": 0.61989}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.01, "memory": 3720, "data_time": 0.32425, "loss_rpn_cls": 0.06597, "loss_rpn_bbox": 0.03021, "loss_cls": 0.31838, "acc": 90.77979, "loss_bbox": 0.24622, "loss": 0.66079, "time": 0.61223}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.01, "memory": 3720, "data_time": 0.3391, "loss_rpn_cls": 0.07007, "loss_rpn_bbox": 0.03222, "loss_cls": 0.32157, "acc": 90.81689, "loss_bbox": 0.24303, "loss": 0.66689, "time": 0.62719}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.01, "memory": 3720, "data_time": 0.32136, "loss_rpn_cls": 0.06223, "loss_rpn_bbox": 0.02909, "loss_cls": 0.3202, "acc": 90.59668, "loss_bbox": 0.25221, "loss": 0.66373, "time": 0.62301}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.01, "memory": 3720, "data_time": 0.33131, "loss_rpn_cls": 0.06597, "loss_rpn_bbox": 0.02962, "loss_cls": 0.30634, "acc": 91.02832, "loss_bbox": 0.23877, "loss": 0.6407, "time": 0.61596}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.01, "memory": 3720, "data_time": 0.32683, "loss_rpn_cls": 0.06595, "loss_rpn_bbox": 0.03115, "loss_cls": 0.30661, "acc": 90.99756, "loss_bbox": 0.24031, "loss": 0.64401, "time": 0.61374}
