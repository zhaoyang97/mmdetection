{"env_info": "sys.platform: linux\nPython: 3.7.9 (default, Aug 31 2020, 12:42:55) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.130\nGCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\nPyTorch: 1.6.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.5.0 (Git Hash e2ac1fac44c5078ca927cb9b90e1b3066a0b2ed0)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.7.0\nOpenCV: 4.4.0\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.2\nMMDetection: 2.12.0+", "config": "model = dict(\n    type='FasterRCNN',\n    pretrained='../mmclassification/work_dirs/mixup/epoch_100_pretrained.pth',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=10,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))))\ntrain_cfg = dict(\n    rpn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.7,\n            neg_iou_thr=0.3,\n            min_pos_iou=0.3,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=256,\n            pos_fraction=0.5,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    rpn_proposal=dict(\n        nms_across_levels=False,\n        nms_pre=2000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0.5,\n            match_low_quality=False,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=512,\n            pos_fraction=0.25,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=True),\n        pos_weight=-1,\n        debug=False))\ntest_cfg = dict(\n    rpn=dict(\n        nms_across_levels=False,\n        nms_pre=1000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nannotations_root = '../data/TCT_30000/'\nimage_root = '../data/TCT_30000/'\nclasses = ('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n           'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n           'dysbacteriosis_herpes_act', 'ec')\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=0,\n    train=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='../data/TCT_30000/train30000-cat10.json',\n        img_prefix='../data/TCT_30000/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='../data/TCT_30000/val10000-cat10.json',\n        img_prefix='../data/TCT_30000/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='../data/TCT_30000/test10000-cat10.json',\n        img_prefix='../data/TCT_30000/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(\n    type='SGD', lr=0.0033333333333333335, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = 'work_dirs/tct_mixup_e100_lr3/epoch_1.pth'\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/tct_mixup_e100_lr3'\ngpu_ids = range(0, 4)\n", "seed": null, "exp_name": "tct_mixup_e100_lr3.py"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00333, "memory": 3715, "data_time": 0.50048, "loss_rpn_cls": 0.03971, "loss_rpn_bbox": 0.02396, "loss_cls": 0.27629, "acc": 90.88721, "loss_bbox": 0.23231, "loss": 0.57227, "time": 0.87696}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00333, "memory": 3715, "data_time": 0.43176, "loss_rpn_cls": 0.04212, "loss_rpn_bbox": 0.02688, "loss_cls": 0.3106, "acc": 89.63672, "loss_bbox": 0.2572, "loss": 0.6368, "time": 0.80109}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.00333, "memory": 3717, "data_time": 0.43955, "loss_rpn_cls": 0.04329, "loss_rpn_bbox": 0.02502, "loss_cls": 0.29604, "acc": 90.24268, "loss_bbox": 0.24314, "loss": 0.60749, "time": 0.78885}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00333, "memory": 3717, "data_time": 0.43249, "loss_rpn_cls": 0.0477, "loss_rpn_bbox": 0.02778, "loss_cls": 0.29886, "acc": 90.01416, "loss_bbox": 0.25568, "loss": 0.63002, "time": 0.80885}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.00333, "memory": 3717, "data_time": 0.43528, "loss_rpn_cls": 0.04517, "loss_rpn_bbox": 0.02811, "loss_cls": 0.29962, "acc": 89.92529, "loss_bbox": 0.25891, "loss": 0.63181, "time": 0.79537}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00333, "memory": 3717, "data_time": 0.43709, "loss_rpn_cls": 0.04153, "loss_rpn_bbox": 0.02715, "loss_cls": 0.28225, "acc": 90.62158, "loss_bbox": 0.2367, "loss": 0.58763, "time": 0.79603}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.00333, "memory": 3717, "data_time": 0.44183, "loss_rpn_cls": 0.04411, "loss_rpn_bbox": 0.02558, "loss_cls": 0.2824, "acc": 90.64746, "loss_bbox": 0.23595, "loss": 0.58803, "time": 0.79639}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.00333, "memory": 3717, "data_time": 0.43307, "loss_rpn_cls": 0.04291, "loss_rpn_bbox": 0.02599, "loss_cls": 0.28862, "acc": 90.38867, "loss_bbox": 0.25143, "loss": 0.60894, "time": 0.79888}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 0.00333, "memory": 3717, "data_time": 0.43644, "loss_rpn_cls": 0.04294, "loss_rpn_bbox": 0.02492, "loss_cls": 0.27015, "acc": 91.12744, "loss_bbox": 0.22343, "loss": 0.56143, "time": 0.79573}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.00333, "memory": 3717, "data_time": 0.43872, "loss_rpn_cls": 0.04295, "loss_rpn_bbox": 0.02491, "loss_cls": 0.28283, "acc": 90.48193, "loss_bbox": 0.23758, "loss": 0.58828, "time": 0.78879}
{"mode": "train", "epoch": 2, "iter": 550, "lr": 0.00333, "memory": 3717, "data_time": 0.41174, "loss_rpn_cls": 0.04505, "loss_rpn_bbox": 0.02882, "loss_cls": 0.30229, "acc": 89.70605, "loss_bbox": 0.2602, "loss": 0.63636, "time": 0.79174}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.00333, "memory": 3717, "data_time": 0.42925, "loss_rpn_cls": 0.04154, "loss_rpn_bbox": 0.02519, "loss_cls": 0.27962, "acc": 90.58105, "loss_bbox": 0.23456, "loss": 0.5809, "time": 0.79617}
{"mode": "train", "epoch": 2, "iter": 650, "lr": 0.00333, "memory": 3717, "data_time": 0.41772, "loss_rpn_cls": 0.04191, "loss_rpn_bbox": 0.02594, "loss_cls": 0.27102, "acc": 90.99805, "loss_bbox": 0.23437, "loss": 0.57324, "time": 0.78836}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.00333, "memory": 3717, "data_time": 0.41498, "loss_rpn_cls": 0.03882, "loss_rpn_bbox": 0.02531, "loss_cls": 0.2908, "acc": 90.3125, "loss_bbox": 0.24056, "loss": 0.59549, "time": 0.77512}
{"mode": "train", "epoch": 2, "iter": 750, "lr": 0.00333, "memory": 3717, "data_time": 0.46725, "loss_rpn_cls": 0.04134, "loss_rpn_bbox": 0.02791, "loss_cls": 0.28353, "acc": 90.37646, "loss_bbox": 0.24291, "loss": 0.5957, "time": 0.79118}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.00333, "memory": 3717, "data_time": 0.42078, "loss_rpn_cls": 0.0411, "loss_rpn_bbox": 0.02454, "loss_cls": 0.27703, "acc": 90.63672, "loss_bbox": 0.23328, "loss": 0.57595, "time": 0.80074}
{"mode": "train", "epoch": 2, "iter": 850, "lr": 0.00333, "memory": 3717, "data_time": 0.43745, "loss_rpn_cls": 0.04053, "loss_rpn_bbox": 0.02585, "loss_cls": 0.26783, "acc": 90.94727, "loss_bbox": 0.22591, "loss": 0.56012, "time": 0.80352}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.00333, "memory": 3717, "data_time": 0.44587, "loss_rpn_cls": 0.04016, "loss_rpn_bbox": 0.02506, "loss_cls": 0.29078, "acc": 90.10449, "loss_bbox": 0.24485, "loss": 0.60085, "time": 0.79973}
{"mode": "train", "epoch": 2, "iter": 950, "lr": 0.00333, "memory": 3717, "data_time": 0.42536, "loss_rpn_cls": 0.04273, "loss_rpn_bbox": 0.02768, "loss_cls": 0.27693, "acc": 90.5498, "loss_bbox": 0.23345, "loss": 0.58079, "time": 0.78879}
{"mode": "train", "epoch": 2, "iter": 1000, "lr": 0.00333, "memory": 3717, "data_time": 0.45538, "loss_rpn_cls": 0.03955, "loss_rpn_bbox": 0.02558, "loss_cls": 0.28422, "acc": 90.31152, "loss_bbox": 0.24451, "loss": 0.59386, "time": 0.78981}
{"mode": "train", "epoch": 2, "iter": 1050, "lr": 0.00333, "memory": 3717, "data_time": 0.47022, "loss_rpn_cls": 0.03887, "loss_rpn_bbox": 0.02504, "loss_cls": 0.29219, "acc": 90.12402, "loss_bbox": 0.24599, "loss": 0.60208, "time": 0.79624}
{"mode": "train", "epoch": 2, "iter": 1100, "lr": 0.00333, "memory": 3717, "data_time": 0.42731, "loss_rpn_cls": 0.04339, "loss_rpn_bbox": 0.02565, "loss_cls": 0.26496, "acc": 91.07129, "loss_bbox": 0.22901, "loss": 0.56301, "time": 0.77347}
{"mode": "train", "epoch": 2, "iter": 1150, "lr": 0.00333, "memory": 3717, "data_time": 0.43649, "loss_rpn_cls": 0.04233, "loss_rpn_bbox": 0.02405, "loss_cls": 0.27998, "acc": 90.64697, "loss_bbox": 0.22998, "loss": 0.57634, "time": 0.78373}
{"mode": "train", "epoch": 2, "iter": 1200, "lr": 0.00333, "memory": 3717, "data_time": 0.44805, "loss_rpn_cls": 0.04241, "loss_rpn_bbox": 0.02464, "loss_cls": 0.27286, "acc": 90.87988, "loss_bbox": 0.22838, "loss": 0.5683, "time": 0.78775}
{"mode": "train", "epoch": 2, "iter": 1250, "lr": 0.00333, "memory": 3717, "data_time": 0.41977, "loss_rpn_cls": 0.0389, "loss_rpn_bbox": 0.02474, "loss_cls": 0.26425, "acc": 91.23584, "loss_bbox": 0.23328, "loss": 0.56116, "time": 0.78873}
{"mode": "train", "epoch": 2, "iter": 1300, "lr": 0.00333, "memory": 3717, "data_time": 0.42278, "loss_rpn_cls": 0.03951, "loss_rpn_bbox": 0.02625, "loss_cls": 0.27879, "acc": 90.6958, "loss_bbox": 0.24234, "loss": 0.5869, "time": 0.78327}
{"mode": "train", "epoch": 2, "iter": 1350, "lr": 0.00333, "memory": 3717, "data_time": 0.43848, "loss_rpn_cls": 0.04181, "loss_rpn_bbox": 0.02667, "loss_cls": 0.2896, "acc": 90.06055, "loss_bbox": 0.24938, "loss": 0.60746, "time": 0.79153}
{"mode": "train", "epoch": 2, "iter": 1400, "lr": 0.00333, "memory": 3717, "data_time": 0.43298, "loss_rpn_cls": 0.04449, "loss_rpn_bbox": 0.02863, "loss_cls": 0.28816, "acc": 90.08398, "loss_bbox": 0.24956, "loss": 0.61083, "time": 0.78098}
{"mode": "train", "epoch": 2, "iter": 1450, "lr": 0.00333, "memory": 3717, "data_time": 0.42692, "loss_rpn_cls": 0.03998, "loss_rpn_bbox": 0.02599, "loss_cls": 0.28369, "acc": 90.34033, "loss_bbox": 0.23673, "loss": 0.58639, "time": 0.78177}
{"mode": "train", "epoch": 2, "iter": 1500, "lr": 0.00333, "memory": 3717, "data_time": 0.40348, "loss_rpn_cls": 0.04151, "loss_rpn_bbox": 0.02532, "loss_cls": 0.27249, "acc": 90.64307, "loss_bbox": 0.23357, "loss": 0.57288, "time": 0.77912}
{"mode": "train", "epoch": 2, "iter": 1550, "lr": 0.00333, "memory": 3717, "data_time": 0.42533, "loss_rpn_cls": 0.04169, "loss_rpn_bbox": 0.02789, "loss_cls": 0.28548, "acc": 90.37256, "loss_bbox": 0.24025, "loss": 0.5953, "time": 0.79443}
{"mode": "train", "epoch": 2, "iter": 1600, "lr": 0.00333, "memory": 3717, "data_time": 0.40197, "loss_rpn_cls": 0.04222, "loss_rpn_bbox": 0.026, "loss_cls": 0.28212, "acc": 90.52783, "loss_bbox": 0.22957, "loss": 0.57992, "time": 0.77542}
{"mode": "train", "epoch": 2, "iter": 1650, "lr": 0.00333, "memory": 3717, "data_time": 0.4345, "loss_rpn_cls": 0.0386, "loss_rpn_bbox": 0.02628, "loss_cls": 0.26885, "acc": 90.87939, "loss_bbox": 0.22686, "loss": 0.56058, "time": 0.79315}
{"mode": "train", "epoch": 2, "iter": 1700, "lr": 0.00333, "memory": 3717, "data_time": 0.42405, "loss_rpn_cls": 0.04219, "loss_rpn_bbox": 0.02598, "loss_cls": 0.28571, "acc": 90.29736, "loss_bbox": 0.23375, "loss": 0.58764, "time": 0.7864}
{"mode": "train", "epoch": 2, "iter": 1750, "lr": 0.00333, "memory": 3717, "data_time": 0.41589, "loss_rpn_cls": 0.03958, "loss_rpn_bbox": 0.02531, "loss_cls": 0.28254, "acc": 90.40527, "loss_bbox": 0.24442, "loss": 0.59185, "time": 0.78275}
{"mode": "train", "epoch": 2, "iter": 1800, "lr": 0.00333, "memory": 3717, "data_time": 0.408, "loss_rpn_cls": 0.04002, "loss_rpn_bbox": 0.02642, "loss_cls": 0.27514, "acc": 90.81543, "loss_bbox": 0.23243, "loss": 0.57402, "time": 0.77729}
{"mode": "train", "epoch": 2, "iter": 1850, "lr": 0.00333, "memory": 3717, "data_time": 0.45046, "loss_rpn_cls": 0.04411, "loss_rpn_bbox": 0.02663, "loss_cls": 0.28262, "acc": 90.35791, "loss_bbox": 0.24024, "loss": 0.5936, "time": 0.78303}
