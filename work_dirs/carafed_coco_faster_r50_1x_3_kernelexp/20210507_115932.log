2021-05-07 11:59:32,933 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.9 (default, Aug 31 2020, 12:42:55) [GCC 7.3.0]
CUDA available: True
GPU 0,1,2,3,4,5,6,7: GeForce RTX 2080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 10.0, V10.0.130
GCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609
PyTorch: 1.6.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.5.0 (Git Hash e2ac1fac44c5078ca927cb9b90e1b3066a0b2ed0)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

TorchVision: 0.7.0
OpenCV: 4.5.1
MMCV: 1.3.3
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 10.2
MMDetection: 2.12.0+
------------------------------------------------------------

2021-05-07 11:59:33,362 - mmdet - INFO - Distributed training: True
2021-05-07 11:59:33,637 - mmdet - INFO - Config:
model = dict(
    type='FasterRCNN',
    pretrained=
    'work_dirs/imagenet_resnet50_carafed/imagenet_resnet50_carafed_pretrained.pth',
    backbone=dict(
        type='ResNet_carafed_3_kernelexp',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch'),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
    roi_head=dict(
        type='StandardRoIHead',
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=dict(
            type='Shared2FCBBoxHead',
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=80,
            bbox_coder=dict(
                type='DeltaXYWHBBoxCoder',
                target_means=[0.0, 0.0, 0.0, 0.0],
                target_stds=[0.1, 0.1, 0.2, 0.2]),
            reg_class_agnostic=False,
            loss_cls=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', loss_weight=1.0))))
train_cfg = dict(
    rpn=dict(
        assigner=dict(
            type='MaxIoUAssigner',
            pos_iou_thr=0.7,
            neg_iou_thr=0.3,
            min_pos_iou=0.3,
            match_low_quality=True,
            ignore_iof_thr=-1),
        sampler=dict(
            type='RandomSampler',
            num=256,
            pos_fraction=0.5,
            neg_pos_ub=-1,
            add_gt_as_proposals=False),
        allowed_border=-1,
        pos_weight=-1,
        debug=False),
    rpn_proposal=dict(
        nms_across_levels=False,
        nms_pre=2000,
        nms_post=1000,
        max_num=1000,
        nms_thr=0.7,
        min_bbox_size=0),
    rcnn=dict(
        assigner=dict(
            type='MaxIoUAssigner',
            pos_iou_thr=0.5,
            neg_iou_thr=0.5,
            min_pos_iou=0.5,
            match_low_quality=False,
            ignore_iof_thr=-1),
        sampler=dict(
            type='RandomSampler',
            num=512,
            pos_fraction=0.25,
            neg_pos_ub=-1,
            add_gt_as_proposals=True),
        pos_weight=-1,
        debug=False))
test_cfg = dict(
    rpn=dict(
        nms_across_levels=False,
        nms_pre=1000,
        nms_post=1000,
        max_num=1000,
        nms_thr=0.7,
        min_bbox_size=0),
    rcnn=dict(
        score_thr=0.05,
        nms=dict(type='nms', iou_threshold=0.5),
        max_per_img=100))
dataset_type = 'CocoDataset'
data_root = '../data/coco/'
annotations_root = '../data/coco/annotations/'
image_root = '../data/coco/'
img_scale = (1333, 800)
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=0,
    train=dict(
        type='CocoDataset',
        ann_file='../data/coco/annotations/instances_train2017.json',
        img_prefix='../data/coco/train2017',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file='../data/coco/annotations/instances_val2017.json',
        img_prefix='../data/coco/val2017',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file='../data/coco/annotations/image_info_test-dev2017.json',
        img_prefix='../data/coco/test2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='bbox')
optimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001,
    step=[8, 11])
runner = dict(type='EpochBasedRunner', max_epochs=12)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = './work_dirs/carafed_coco_faster_r50_1x_3_kernelexp'
gpu_ids = range(0, 8)

2021-05-07 12:00:00,244 - mmdet - INFO - Start running, host: root@95b7482644c5, work_dir: /root/userfolder/mmdetection/work_dirs/carafed_coco_faster_r50_1x_3_kernelexp
2021-05-07 12:00:00,244 - mmdet - INFO - workflow: [('train', 1)], max: 12 epochs
2021-05-07 12:00:36,939 - mmdet - INFO - Epoch [1][50/7330]	lr: 1.978e-03, eta: 17:54:03, time: 0.733, data_time: 0.236, memory: 8653, loss_rpn_cls: 0.5079, loss_rpn_bbox: 0.1055, loss_cls: 0.7244, acc: 91.1265, loss_bbox: 0.1435, loss: 1.4813
2021-05-07 12:01:07,878 - mmdet - INFO - Epoch [1][100/7330]	lr: 3.976e-03, eta: 16:29:38, time: 0.619, data_time: 0.166, memory: 8653, loss_rpn_cls: 0.2142, loss_rpn_bbox: 0.0954, loss_cls: 0.4394, acc: 94.0137, loss_bbox: 0.2288, loss: 0.9777
2021-05-07 12:01:39,022 - mmdet - INFO - Epoch [1][150/7330]	lr: 5.974e-03, eta: 16:03:29, time: 0.623, data_time: 0.166, memory: 8653, loss_rpn_cls: 0.1750, loss_rpn_bbox: 0.0961, loss_cls: 0.4998, acc: 93.3894, loss_bbox: 0.2438, loss: 1.0147
2021-05-07 12:02:10,277 - mmdet - INFO - Epoch [1][200/7330]	lr: 7.972e-03, eta: 15:50:32, time: 0.624, data_time: 0.175, memory: 8653, loss_rpn_cls: 0.1478, loss_rpn_bbox: 0.0980, loss_cls: 0.4917, acc: 92.0632, loss_bbox: 0.2937, loss: 1.0312
2021-05-07 12:02:41,545 - mmdet - INFO - Epoch [1][250/7330]	lr: 9.970e-03, eta: 15:42:59, time: 0.626, data_time: 0.180, memory: 8653, loss_rpn_cls: 0.1316, loss_rpn_bbox: 0.0980, loss_cls: 0.4959, acc: 91.4431, loss_bbox: 0.3198, loss: 1.0452
2021-05-07 12:03:12,816 - mmdet - INFO - Epoch [1][300/7330]	lr: 1.197e-02, eta: 15:37:40, time: 0.625, data_time: 0.180, memory: 8653, loss_rpn_cls: 0.1122, loss_rpn_bbox: 0.0901, loss_cls: 0.5178, acc: 90.7881, loss_bbox: 0.3460, loss: 1.0661
2021-05-07 12:03:44,200 - mmdet - INFO - Epoch [1][350/7330]	lr: 1.397e-02, eta: 15:34:04, time: 0.627, data_time: 0.179, memory: 8653, loss_rpn_cls: 0.1075, loss_rpn_bbox: 0.0875, loss_cls: 0.5047, acc: 91.0854, loss_bbox: 0.3354, loss: 1.0352
2021-05-07 12:04:15,464 - mmdet - INFO - Epoch [1][400/7330]	lr: 1.596e-02, eta: 15:30:57, time: 0.626, data_time: 0.172, memory: 8653, loss_rpn_cls: 0.1061, loss_rpn_bbox: 0.0884, loss_cls: 0.5369, acc: 89.9788, loss_bbox: 0.3808, loss: 1.1121
2021-05-07 12:04:46,626 - mmdet - INFO - Epoch [1][450/7330]	lr: 1.796e-02, eta: 15:28:04, time: 0.623, data_time: 0.170, memory: 8653, loss_rpn_cls: 0.1009, loss_rpn_bbox: 0.0854, loss_cls: 0.5165, acc: 89.8428, loss_bbox: 0.3866, loss: 1.0893
2021-05-07 12:05:18,000 - mmdet - INFO - Epoch [1][500/7330]	lr: 1.996e-02, eta: 15:26:12, time: 0.627, data_time: 0.174, memory: 8653, loss_rpn_cls: 0.0928, loss_rpn_bbox: 0.0830, loss_cls: 0.5176, acc: 89.6836, loss_bbox: 0.3918, loss: 1.0852
2021-05-07 12:05:49,045 - mmdet - INFO - Epoch [1][550/7330]	lr: 2.000e-02, eta: 15:23:43, time: 0.621, data_time: 0.178, memory: 8653, loss_rpn_cls: 0.0963, loss_rpn_bbox: 0.0802, loss_cls: 0.5016, acc: 89.7236, loss_bbox: 0.3863, loss: 1.0645
2021-05-07 12:06:20,193 - mmdet - INFO - Epoch [1][600/7330]	lr: 2.000e-02, eta: 15:21:52, time: 0.623, data_time: 0.176, memory: 8653, loss_rpn_cls: 0.0942, loss_rpn_bbox: 0.0822, loss_cls: 0.4867, acc: 89.7544, loss_bbox: 0.3805, loss: 1.0436
