2021-05-16 16:16:28,245 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.9 (default, Aug 31 2020, 12:42:55) [GCC 7.3.0]
CUDA available: True
GPU 0,1,2,3,4,5,6,7: GeForce RTX 2080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 10.0, V10.0.130
GCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609
PyTorch: 1.6.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.5.0 (Git Hash e2ac1fac44c5078ca927cb9b90e1b3066a0b2ed0)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

TorchVision: 0.7.0
OpenCV: 4.4.0
MMCV: 1.3.3
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 10.2
MMDetection: 2.12.0+
------------------------------------------------------------

2021-05-16 16:16:28,708 - mmdet - INFO - Distributed training: True
2021-05-16 16:16:29,049 - mmdet - INFO - Config:
model = dict(
    type='FasterRCNN',
    pretrained=
    'work_dirs/ipth//imagenet_resnet50_carafed_3_kernelexp_pretrained_ep200.pth',
    backbone=dict(
        type='ResNet_carafed_3_kernelexp',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch'),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
    roi_head=dict(
        type='StandardRoIHead',
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=dict(
            type='Shared2FCBBoxHead',
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=80,
            bbox_coder=dict(
                type='DeltaXYWHBBoxCoder',
                target_means=[0.0, 0.0, 0.0, 0.0],
                target_stds=[0.1, 0.1, 0.2, 0.2]),
            reg_class_agnostic=False,
            loss_cls=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', loss_weight=1.0))))
train_cfg = dict(
    rpn=dict(
        assigner=dict(
            type='MaxIoUAssigner',
            pos_iou_thr=0.7,
            neg_iou_thr=0.3,
            min_pos_iou=0.3,
            match_low_quality=True,
            ignore_iof_thr=-1),
        sampler=dict(
            type='RandomSampler',
            num=256,
            pos_fraction=0.5,
            neg_pos_ub=-1,
            add_gt_as_proposals=False),
        allowed_border=-1,
        pos_weight=-1,
        debug=False),
    rpn_proposal=dict(
        nms_across_levels=False,
        nms_pre=2000,
        nms_post=1000,
        max_num=1000,
        nms_thr=0.7,
        min_bbox_size=0),
    rcnn=dict(
        assigner=dict(
            type='MaxIoUAssigner',
            pos_iou_thr=0.5,
            neg_iou_thr=0.5,
            min_pos_iou=0.5,
            match_low_quality=False,
            ignore_iof_thr=-1),
        sampler=dict(
            type='RandomSampler',
            num=512,
            pos_fraction=0.25,
            neg_pos_ub=-1,
            add_gt_as_proposals=True),
        pos_weight=-1,
        debug=False))
test_cfg = dict(
    rpn=dict(
        nms_across_levels=False,
        nms_pre=1000,
        nms_post=1000,
        max_num=1000,
        nms_thr=0.7,
        min_bbox_size=0),
    rcnn=dict(
        score_thr=0.05,
        nms=dict(type='nms', iou_threshold=0.5),
        max_per_img=100))
dataset_type = 'CocoDataset'
data_root = '../data/coco/'
annotations_root = '../data/coco/annotations/'
image_root = '../data/coco/'
img_scale = (1333, 800)
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=0,
    train=dict(
        type='CocoDataset',
        ann_file='../data/coco/annotations/instances_train2017.json',
        img_prefix='../data/coco/train2017',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file='../data/coco/annotations/instances_val2017.json',
        img_prefix='../data/coco/val2017',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file='../data/coco/annotations/image_info_test-dev2017.json',
        img_prefix='../data/coco/test2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='bbox')
optimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001,
    step=[8, 11])
runner = dict(type='EpochBasedRunner', max_epochs=12)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = './work_dirs/carafed_coco_faster_r50_1x_3_kernelexp'
gpu_ids = range(0, 8)

2021-05-16 16:16:58,703 - mmdet - INFO - Start running, host: root@0981e3d7df7c, work_dir: /root/userfolder/mmdetection/work_dirs/carafed_coco_faster_r50_1x_3_kernelexp
2021-05-16 16:16:58,703 - mmdet - INFO - workflow: [('train', 1)], max: 12 epochs
2021-05-16 16:17:33,695 - mmdet - INFO - Epoch [1][50/7330]	lr: 1.978e-03, eta: 17:04:05, time: 0.699, data_time: 0.209, memory: 8653, loss_rpn_cls: 0.5098, loss_rpn_bbox: 0.1026, loss_cls: 0.9096, acc: 88.1255, loss_bbox: 0.1482, loss: 1.6702
2021-05-16 16:18:03,015 - mmdet - INFO - Epoch [1][100/7330]	lr: 3.976e-03, eta: 15:40:53, time: 0.586, data_time: 0.147, memory: 8653, loss_rpn_cls: 0.2164, loss_rpn_bbox: 0.0941, loss_cls: 0.4464, acc: 94.0090, loss_bbox: 0.2268, loss: 0.9837
2021-05-16 16:18:32,346 - mmdet - INFO - Epoch [1][150/7330]	lr: 5.974e-03, eta: 15:13:23, time: 0.587, data_time: 0.147, memory: 8653, loss_rpn_cls: 0.1754, loss_rpn_bbox: 0.0950, loss_cls: 0.4855, acc: 93.3267, loss_bbox: 0.2492, loss: 1.0051
2021-05-16 16:19:01,741 - mmdet - INFO - Epoch [1][200/7330]	lr: 7.972e-03, eta: 14:59:21, time: 0.587, data_time: 0.148, memory: 8653, loss_rpn_cls: 0.1500, loss_rpn_bbox: 0.0975, loss_cls: 0.4781, acc: 92.1353, loss_bbox: 0.2931, loss: 1.0186
2021-05-16 16:19:31,259 - mmdet - INFO - Epoch [1][250/7330]	lr: 9.970e-03, eta: 14:51:51, time: 0.591, data_time: 0.151, memory: 8653, loss_rpn_cls: 0.1303, loss_rpn_bbox: 0.0976, loss_cls: 0.4939, acc: 91.3916, loss_bbox: 0.3216, loss: 1.0434
2021-05-16 16:20:00,955 - mmdet - INFO - Epoch [1][300/7330]	lr: 1.197e-02, eta: 14:47:25, time: 0.594, data_time: 0.155, memory: 8653, loss_rpn_cls: 0.1157, loss_rpn_bbox: 0.0906, loss_cls: 0.5092, acc: 90.9028, loss_bbox: 0.3461, loss: 1.0615
2021-05-16 16:20:30,484 - mmdet - INFO - Epoch [1][350/7330]	lr: 1.397e-02, eta: 14:43:17, time: 0.590, data_time: 0.151, memory: 8653, loss_rpn_cls: 0.1066, loss_rpn_bbox: 0.0863, loss_cls: 0.5115, acc: 90.8547, loss_bbox: 0.3507, loss: 1.0550
2021-05-16 16:21:00,003 - mmdet - INFO - Epoch [1][400/7330]	lr: 1.596e-02, eta: 14:40:09, time: 0.590, data_time: 0.146, memory: 8653, loss_rpn_cls: 0.1110, loss_rpn_bbox: 0.0884, loss_cls: 0.5363, acc: 89.8889, loss_bbox: 0.3826, loss: 1.1183
2021-05-16 16:21:29,389 - mmdet - INFO - Epoch [1][450/7330]	lr: 1.796e-02, eta: 14:37:11, time: 0.588, data_time: 0.151, memory: 8653, loss_rpn_cls: 0.0988, loss_rpn_bbox: 0.0850, loss_cls: 0.5076, acc: 89.8928, loss_bbox: 0.3830, loss: 1.0744
2021-05-16 16:21:58,917 - mmdet - INFO - Epoch [1][500/7330]	lr: 1.996e-02, eta: 14:35:03, time: 0.590, data_time: 0.149, memory: 8653, loss_rpn_cls: 0.0943, loss_rpn_bbox: 0.0830, loss_cls: 0.4997, acc: 89.8230, loss_bbox: 0.3858, loss: 1.0628
2021-05-16 16:22:28,398 - mmdet - INFO - Epoch [1][550/7330]	lr: 2.000e-02, eta: 14:33:06, time: 0.589, data_time: 0.145, memory: 8653, loss_rpn_cls: 0.0925, loss_rpn_bbox: 0.0797, loss_cls: 0.5041, acc: 89.7161, loss_bbox: 0.3878, loss: 1.0641
2021-05-16 16:22:58,071 - mmdet - INFO - Epoch [1][600/7330]	lr: 2.000e-02, eta: 14:31:55, time: 0.594, data_time: 0.153, memory: 8653, loss_rpn_cls: 0.0896, loss_rpn_bbox: 0.0811, loss_cls: 0.4833, acc: 89.7078, loss_bbox: 0.3824, loss: 1.0364
2021-05-16 16:23:27,754 - mmdet - INFO - Epoch [1][650/7330]	lr: 2.000e-02, eta: 14:30:53, time: 0.594, data_time: 0.150, memory: 8653, loss_rpn_cls: 0.0900, loss_rpn_bbox: 0.0855, loss_cls: 0.4573, acc: 89.9221, loss_bbox: 0.3760, loss: 1.0088
2021-05-16 16:23:57,479 - mmdet - INFO - Epoch [1][700/7330]	lr: 2.000e-02, eta: 14:29:56, time: 0.594, data_time: 0.149, memory: 8653, loss_rpn_cls: 0.0875, loss_rpn_bbox: 0.0822, loss_cls: 0.4566, acc: 89.3860, loss_bbox: 0.3904, loss: 1.0166
2021-05-16 16:24:27,093 - mmdet - INFO - Epoch [1][750/7330]	lr: 2.000e-02, eta: 14:28:50, time: 0.592, data_time: 0.148, memory: 8653, loss_rpn_cls: 0.0831, loss_rpn_bbox: 0.0822, loss_cls: 0.4364, acc: 89.5771, loss_bbox: 0.3833, loss: 0.9851
2021-05-16 16:24:56,688 - mmdet - INFO - Epoch [1][800/7330]	lr: 2.000e-02, eta: 14:27:52, time: 0.593, data_time: 0.154, memory: 8653, loss_rpn_cls: 0.0837, loss_rpn_bbox: 0.0819, loss_cls: 0.4466, acc: 89.4033, loss_bbox: 0.3805, loss: 0.9927
2021-05-16 16:25:26,434 - mmdet - INFO - Epoch [1][850/7330]	lr: 2.000e-02, eta: 14:27:09, time: 0.595, data_time: 0.147, memory: 8653, loss_rpn_cls: 0.0764, loss_rpn_bbox: 0.0794, loss_cls: 0.4225, acc: 89.8875, loss_bbox: 0.3675, loss: 0.9458
2021-05-16 16:25:55,785 - mmdet - INFO - Epoch [1][900/7330]	lr: 2.000e-02, eta: 14:25:47, time: 0.587, data_time: 0.145, memory: 8653, loss_rpn_cls: 0.0833, loss_rpn_bbox: 0.0797, loss_cls: 0.4447, acc: 89.6355, loss_bbox: 0.3747, loss: 0.9824
2021-05-16 16:26:25,433 - mmdet - INFO - Epoch [1][950/7330]	lr: 2.000e-02, eta: 14:25:00, time: 0.593, data_time: 0.151, memory: 8653, loss_rpn_cls: 0.0800, loss_rpn_bbox: 0.0768, loss_cls: 0.4340, acc: 89.5276, loss_bbox: 0.3743, loss: 0.9651
2021-05-16 16:26:55,025 - mmdet - INFO - Exp name: carafed_coco_faster_r50_1x_3_kernelexp.py
2021-05-16 16:26:55,025 - mmdet - INFO - Epoch [1][1000/7330]	lr: 2.000e-02, eta: 14:24:10, time: 0.592, data_time: 0.143, memory: 8653, loss_rpn_cls: 0.0788, loss_rpn_bbox: 0.0774, loss_cls: 0.4093, acc: 89.7957, loss_bbox: 0.3673, loss: 0.9327
