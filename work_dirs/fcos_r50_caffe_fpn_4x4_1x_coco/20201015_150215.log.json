{"env_info": "sys.platform: linux\nPython: 3.7.9 (default, Aug 31 2020, 12:42:55) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.130\nGCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\nPyTorch: 1.4.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CUDA Runtime 10.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.1\n  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.5.0\nOpenCV: 4.4.0\nMMCV: 1.1.5\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.0\nMMDetection: 2.5.0+", "config": "dataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nannotations_root = 'annotations/'\nimage_root = '/root/userfolder/data/TCTAnnotatedData/'\nclasses = ('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n           'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n           'dysbacteriosis_herpes_act', 'ec')\nimg_norm_cfg = dict(\n    mean=[102.9801, 115.9465, 122.7717], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[102.9801, 115.9465, 122.7717],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=0,\n    train=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='annotations/train30000-cat10.json',\n        img_prefix='/root/userfolder/data/TCTAnnotatedData/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='annotations/val.json',\n        img_prefix='/root/userfolder/data/TCTAnnotatedData/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='annotations/test.json',\n        img_prefix='/root/userfolder/data/TCTAnnotatedData/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(\n    type='SGD',\n    lr=0.001,\n    momentum=0.9,\n    weight_decay=0.0001,\n    paramwise_cfg=dict(bias_lr_mult=2.0, bias_decay_mult=0.0))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='constant',\n    warmup_iters=500,\n    warmup_ratio=0.3333333333333333,\n    step=[8, 11])\ntotal_epochs = 12\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nmodel = dict(\n    type='FCOS',\n    pretrained='open-mmlab://detectron/resnet50_caffe',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='caffe'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs=True,\n        extra_convs_on_inputs=False,\n        num_outs=5,\n        relu_before_extra_convs=True),\n    bbox_head=dict(\n        type='FCOSHead',\n        num_classes=10,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        strides=[8, 16, 32, 64, 128],\n        norm_cfg=None,\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='IoULoss', loss_weight=1.0),\n        loss_centerness=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)))\ntrain_cfg = dict(\n    assigner=dict(\n        type='MaxIoUAssigner',\n        pos_iou_thr=0.5,\n        neg_iou_thr=0.4,\n        min_pos_iou=0,\n        ignore_iof_thr=-1),\n    allowed_border=-1,\n    pos_weight=-1,\n    debug=False)\ntest_cfg = dict(\n    nms_pre=1000,\n    min_bbox_size=0,\n    score_thr=0.05,\n    nms=dict(type='nms', iou_threshold=0.5),\n    max_per_img=100)\nwork_dir = './work_dirs/fcos_r50_caffe_fpn_4x4_1x_coco'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "fcos_r50_caffe_fpn_4x4_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00033, "memory": 4893, "data_time": 0.97762, "loss_cls": 1.11212, "loss_bbox": 4.74892, "loss_centerness": 0.68329, "loss": 6.54433, "grad_norm": 33.14289, "time": 1.80111}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00033, "memory": 4893, "data_time": 0.86547, "loss_cls": 1.00413, "loss_bbox": 1.02969, "loss_centerness": 0.66812, "loss": 2.70193, "grad_norm": 19.49833, "time": 1.36202}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00033, "memory": 4894, "data_time": 1.02421, "loss_cls": 0.7646, "loss_bbox": 0.9622, "loss_centerness": 0.65959, "loss": 2.38639, "grad_norm": 24.77218, "time": 1.55862}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00033, "memory": 4894, "data_time": 0.8894, "loss_cls": 0.70918, "loss_bbox": 0.89614, "loss_centerness": 0.65961, "loss": 2.26493, "grad_norm": 15.32062, "time": 1.44767}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00033, "memory": 4894, "data_time": 0.91881, "loss_cls": 0.65725, "loss_bbox": 0.84933, "loss_centerness": 0.65872, "loss": 2.16531, "grad_norm": 16.64525, "time": 1.43013}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00033, "memory": 4894, "data_time": 0.96148, "loss_cls": 0.64844, "loss_bbox": 0.81057, "loss_centerness": 0.65727, "loss": 2.11627, "grad_norm": 14.60336, "time": 1.47544}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00033, "memory": 4894, "data_time": 1.03185, "loss_cls": 0.6322, "loss_bbox": 0.75546, "loss_centerness": 0.65519, "loss": 2.04285, "grad_norm": 18.49698, "time": 1.52883}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00033, "memory": 4894, "data_time": 1.04985, "loss_cls": 0.63858, "loss_bbox": 0.77246, "loss_centerness": 0.65211, "loss": 2.06314, "grad_norm": 26.33545, "time": 1.58106}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00033, "memory": 4894, "data_time": 1.02011, "loss_cls": 0.62071, "loss_bbox": 0.73555, "loss_centerness": 0.64795, "loss": 2.00421, "grad_norm": 23.43418, "time": 1.55709}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00033, "memory": 4894, "data_time": 0.86315, "loss_cls": 0.62384, "loss_bbox": 0.7092, "loss_centerness": 0.64309, "loss": 1.97613, "grad_norm": 21.99699, "time": 1.40112}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.001, "memory": 4894, "data_time": 0.84696, "loss_cls": 0.62767, "loss_bbox": 0.94627, "loss_centerness": 0.63557, "loss": 2.20951, "grad_norm": 30.64167, "time": 1.3611}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.001, "memory": 4894, "data_time": 0.86317, "loss_cls": 0.61284, "loss_bbox": 0.88662, "loss_centerness": 0.62744, "loss": 2.1269, "grad_norm": 26.98341, "time": 1.38103}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.001, "memory": 4894, "data_time": 0.87461, "loss_cls": 0.60077, "loss_bbox": 0.87359, "loss_centerness": 0.62412, "loss": 2.09848, "grad_norm": 23.63291, "time": 1.42474}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.001, "memory": 4894, "data_time": 0.91556, "loss_cls": 0.60273, "loss_bbox": 0.81537, "loss_centerness": 0.62005, "loss": 2.03816, "grad_norm": 23.39047, "time": 1.49377}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.001, "memory": 4894, "data_time": 0.91735, "loss_cls": 0.58874, "loss_bbox": 0.75978, "loss_centerness": 0.61802, "loss": 1.96654, "grad_norm": 19.43437, "time": 1.50423}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.001, "memory": 4894, "data_time": 0.9228, "loss_cls": 0.5789, "loss_bbox": 0.7524, "loss_centerness": 0.61636, "loss": 1.94766, "grad_norm": 19.62619, "time": 1.51339}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.001, "memory": 4894, "data_time": 0.9147, "loss_cls": 0.56991, "loss_bbox": 0.65105, "loss_centerness": 0.61342, "loss": 1.83437, "grad_norm": 14.50095, "time": 1.49342}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.001, "memory": 4894, "data_time": 0.9098, "loss_cls": 0.56201, "loss_bbox": 0.73809, "loss_centerness": 0.6134, "loss": 1.9135, "grad_norm": 18.75888, "time": 1.52011}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.001, "memory": 4894, "data_time": 0.92082, "loss_cls": 0.54747, "loss_bbox": 0.70205, "loss_centerness": 0.61299, "loss": 1.86251, "grad_norm": 18.58694, "time": 1.52489}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.001, "memory": 4894, "data_time": 0.91469, "loss_cls": 0.54293, "loss_bbox": 0.75808, "loss_centerness": 0.61165, "loss": 1.91266, "grad_norm": 18.78762, "time": 1.59717}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.001, "memory": 4894, "data_time": 0.92152, "loss_cls": 0.55163, "loss_bbox": 0.60495, "loss_centerness": 0.60936, "loss": 1.76594, "grad_norm": 12.54983, "time": 1.58245}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.001, "memory": 4894, "data_time": 0.91599, "loss_cls": 0.53484, "loss_bbox": 0.64518, "loss_centerness": 0.60775, "loss": 1.78777, "grad_norm": 16.41665, "time": 1.51362}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.001, "memory": 4894, "data_time": 0.98457, "loss_cls": 0.52498, "loss_bbox": 0.60186, "loss_centerness": 0.60812, "loss": 1.73496, "grad_norm": 14.25344, "time": 1.53498}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.001, "memory": 4894, "data_time": 1.06025, "loss_cls": 0.51754, "loss_bbox": 0.58716, "loss_centerness": 0.6076, "loss": 1.7123, "grad_norm": 13.59371, "time": 1.56913}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.001, "memory": 4894, "data_time": 1.05623, "loss_cls": 0.50482, "loss_bbox": 0.54688, "loss_centerness": 0.60479, "loss": 1.65648, "grad_norm": 10.95978, "time": 1.58338}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.001, "memory": 4894, "data_time": 1.02641, "loss_cls": 0.50122, "loss_bbox": 0.59901, "loss_centerness": 0.60508, "loss": 1.70531, "grad_norm": 14.1883, "time": 1.5259}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.001, "memory": 4894, "data_time": 0.93138, "loss_cls": 0.5053, "loss_bbox": 0.53347, "loss_centerness": 0.60551, "loss": 1.64427, "grad_norm": 10.17277, "time": 1.48005}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.001, "memory": 4894, "data_time": 1.01678, "loss_cls": 0.49619, "loss_bbox": 0.5544, "loss_centerness": 0.6044, "loss": 1.65499, "grad_norm": 12.86483, "time": 1.54127}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.001, "memory": 4894, "data_time": 0.95977, "loss_cls": 0.49382, "loss_bbox": 0.50832, "loss_centerness": 0.60551, "loss": 1.60765, "grad_norm": 8.50286, "time": 1.46933}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.001, "memory": 4894, "data_time": 0.94256, "loss_cls": 0.48846, "loss_bbox": 0.49704, "loss_centerness": 0.6051, "loss": 1.5906, "grad_norm": 8.33451, "time": 1.50506}
