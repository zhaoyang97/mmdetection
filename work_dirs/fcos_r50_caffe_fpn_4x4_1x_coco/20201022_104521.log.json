{"env_info": "sys.platform: linux\nPython: 3.6.12 |Anaconda, Inc.| (default, Sep  8 2020, 23:10:56) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.130\nGCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\nPyTorch: 1.4.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CUDA Runtime 10.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.1\n  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.5.0\nOpenCV: 4.4.0\nMMCV: 1.1.5\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.0\nMMDetection: 2.5.0+", "config": "dataset_type = 'VOCDataset'\ndata_root = '/root/userfolder/data/'\nimg_norm_cfg = dict(\n    mean=[102.9801, 115.9465, 122.7717], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[102.9801, 115.9465, 122.7717],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=0,\n    train=dict(\n        type='RepeatDataset',\n        times=3,\n        dataset=dict(\n            type='VOCDataset',\n            ann_file=[\n                '/root/userfolder/data/VOC2012/ImageSets/Main/trainval.txt'\n            ],\n            img_prefix=['/root/userfolder/data/VOC2012/'],\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations', with_bbox=True),\n                dict(type='Resize', img_scale=(1000, 600), keep_ratio=True),\n                dict(type='RandomFlip', flip_ratio=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size_divisor=32),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n            ]),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='VOCDataset',\n        ann_file='/root/userfolder/data/VOC2012/ImageSets/Main/val.txt',\n        img_prefix='/root/userfolder/data/VOC2012/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='VOCDataset',\n        ann_file='/root/userfolder/data/VOC2012/ImageSets/Main/val.txt',\n        img_prefix='/root/userfolder/data/VOC2012/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='mAP')\noptimizer = dict(\n    type='SGD',\n    lr=0.0025,\n    momentum=0.9,\n    weight_decay=0.0001,\n    paramwise_cfg=dict(bias_lr_mult=2.0, bias_decay_mult=0.0))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='constant',\n    warmup_iters=500,\n    warmup_ratio=0.3333333333333333,\n    step=[8, 11])\ntotal_epochs = 12\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nmodel = dict(\n    type='FCOS',\n    pretrained='open-mmlab://detectron/resnet50_caffe',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='caffe'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs=True,\n        extra_convs_on_inputs=False,\n        num_outs=5,\n        relu_before_extra_convs=True),\n    bbox_head=dict(\n        type='FCOSHead',\n        num_classes=20,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        strides=[8, 16, 32, 64, 128],\n        norm_cfg=None,\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='IoULoss', loss_weight=1.0),\n        loss_centerness=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)))\ntrain_cfg = dict(\n    assigner=dict(\n        type='MaxIoUAssigner',\n        pos_iou_thr=0.5,\n        neg_iou_thr=0.4,\n        min_pos_iou=0,\n        ignore_iof_thr=-1),\n    allowed_border=-1,\n    pos_weight=-1,\n    debug=False)\ntest_cfg = dict(\n    nms_pre=1000,\n    min_bbox_size=0,\n    score_thr=0.05,\n    nms=dict(type='nms', iou_threshold=0.5),\n    max_per_img=100)\nwork_dir = './work_dirs/fcos_r50_caffe_fpn_4x4_1x_coco'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "fcos_r50_caffe_fpn_4x4_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00083, "memory": 3253, "data_time": 0.16154, "loss_cls": 1.07832, "loss_bbox": 5.8716, "loss_centerness": 0.68176, "loss": 7.63168, "grad_norm": 102.09224, "time": 0.45157}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00083, "memory": 3253, "data_time": 0.11729, "loss_cls": 0.94096, "loss_bbox": 4.98188, "loss_centerness": 0.67371, "loss": 6.59655, "grad_norm": 165.40585, "time": 0.40109}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00083, "memory": 3253, "data_time": 0.11403, "loss_cls": 0.76501, "loss_bbox": 3.0828, "loss_centerness": 0.67042, "loss": 4.51823, "grad_norm": 111.76843, "time": 0.39785}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00083, "memory": 3253, "data_time": 0.11129, "loss_cls": 0.68015, "loss_bbox": 1.63999, "loss_centerness": 0.66654, "loss": 2.98668, "grad_norm": 67.09743, "time": 0.39584}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00083, "memory": 3253, "data_time": 0.11248, "loss_cls": 0.70337, "loss_bbox": 2.57168, "loss_centerness": 0.66568, "loss": 3.94073, "grad_norm": 85.20582, "time": 0.39637}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00083, "memory": 3253, "data_time": 0.11227, "loss_cls": 0.67567, "loss_bbox": 1.80145, "loss_centerness": 0.66296, "loss": 3.14008, "grad_norm": 65.88962, "time": 0.3961}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00083, "memory": 3253, "data_time": 0.11174, "loss_cls": 0.71533, "loss_bbox": 2.51921, "loss_centerness": 0.66619, "loss": 3.90072, "grad_norm": 74.47323, "time": 0.39548}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00083, "memory": 3253, "data_time": 0.11191, "loss_cls": 0.69487, "loss_bbox": 1.89397, "loss_centerness": 0.66262, "loss": 3.25147, "grad_norm": 56.47003, "time": 0.39877}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00083, "memory": 3253, "data_time": 0.11094, "loss_cls": 0.67423, "loss_bbox": 2.46238, "loss_centerness": 0.66191, "loss": 3.79852, "grad_norm": 60.62465, "time": 0.39671}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00083, "memory": 3253, "data_time": 0.11055, "loss_cls": 0.66195, "loss_bbox": 1.76804, "loss_centerness": 0.66324, "loss": 3.09323, "grad_norm": 46.26158, "time": 0.39986}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.0025, "memory": 3253, "data_time": 0.11269, "loss_cls": 3.02796, "loss_bbox": 3.32903, "loss_centerness": NaN, "loss": NaN, "grad_norm": NaN, "time": 0.39515}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.0025, "memory": 3253, "data_time": 0.1089, "loss_cls": 21.55019, "loss_bbox": -24.90044, "loss_centerness": NaN, "loss": NaN, "grad_norm": NaN, "time": 0.39033}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.0025, "memory": 3253, "data_time": 0.10541, "loss_cls": 21.53894, "loss_bbox": -24.95886, "loss_centerness": NaN, "loss": NaN, "grad_norm": NaN, "time": 0.38865}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.0025, "memory": 3253, "data_time": 0.10661, "loss_cls": 21.5683, "loss_bbox": -24.71051, "loss_centerness": NaN, "loss": NaN, "grad_norm": NaN, "time": 0.38943}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.0025, "memory": 3253, "data_time": 0.1109, "loss_cls": 21.54601, "loss_bbox": -24.83247, "loss_centerness": NaN, "loss": NaN, "grad_norm": NaN, "time": 0.39524}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.0025, "memory": 3253, "data_time": 0.112, "loss_cls": 21.54999, "loss_bbox": -24.93059, "loss_centerness": NaN, "loss": NaN, "grad_norm": NaN, "time": 0.39376}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.0025, "memory": 3253, "data_time": 0.11644, "loss_cls": 21.55684, "loss_bbox": -24.85994, "loss_centerness": NaN, "loss": NaN, "grad_norm": NaN, "time": 0.39658}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.0025, "memory": 3253, "data_time": 0.11134, "loss_cls": 21.5646, "loss_bbox": -24.75524, "loss_centerness": NaN, "loss": NaN, "grad_norm": NaN, "time": 0.39633}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.0025, "memory": 3253, "data_time": 0.10846, "loss_cls": 21.5446, "loss_bbox": -24.9526, "loss_centerness": NaN, "loss": NaN, "grad_norm": NaN, "time": 0.38858}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.0025, "memory": 3253, "data_time": 0.10894, "loss_cls": 21.57372, "loss_bbox": -24.75117, "loss_centerness": NaN, "loss": NaN, "grad_norm": NaN, "time": 0.38872}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.0025, "memory": 3253, "data_time": 0.10746, "loss_cls": 21.56666, "loss_bbox": -24.77962, "loss_centerness": NaN, "loss": NaN, "grad_norm": NaN, "time": 0.39153}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.0025, "memory": 3253, "data_time": 0.10954, "loss_cls": 21.55071, "loss_bbox": -24.96153, "loss_centerness": NaN, "loss": NaN, "grad_norm": NaN, "time": 0.39891}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.0025, "memory": 3253, "data_time": 0.1123, "loss_cls": 21.52686, "loss_bbox": -24.93549, "loss_centerness": NaN, "loss": NaN, "grad_norm": NaN, "time": 0.40716}
