{"env_info": "sys.platform: linux\nPython: 3.7.9 (default, Aug 31 2020, 12:42:55) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.130\nGCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\nPyTorch: 1.6.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.5.0 (Git Hash e2ac1fac44c5078ca927cb9b90e1b3066a0b2ed0)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.7.0\nOpenCV: 4.4.0\nMMCV: 1.1.5\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.2\nMMDetection: 2.5.0+", "config": "dataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nannotations_root = 'annotations/'\nimage_root = '/root/userfolder/data/TCTAnnotatedData/'\nclasses = ('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n           'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n           'dysbacteriosis_herpes_act', 'ec')\nimg_norm_cfg = dict(\n    mean=[102.9801, 115.9465, 122.7717], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[102.9801, 115.9465, 122.7717],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=4,\n    train=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='annotations/train30000-cat10.json',\n        img_prefix='/root/userfolder/data/TCTAnnotatedData/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='annotations/val.json',\n        img_prefix='/root/userfolder/data/TCTAnnotatedData/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='annotations/test.json',\n        img_prefix='/root/userfolder/data/TCTAnnotatedData/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(\n    type='SGD',\n    lr=0.001,\n    momentum=0.9,\n    weight_decay=0.0001,\n    paramwise_cfg=dict(bias_lr_mult=2.0, bias_decay_mult=0.0))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='constant',\n    warmup_iters=500,\n    warmup_ratio=0.3333333333333333,\n    step=[8, 11])\ntotal_epochs = 12\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nmodel = dict(\n    type='FCOS',\n    pretrained='open-mmlab://detectron/resnet50_caffe',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='caffe'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs=True,\n        extra_convs_on_inputs=False,\n        num_outs=5,\n        relu_before_extra_convs=True),\n    bbox_head=dict(\n        type='FCOSHead',\n        num_classes=11,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        strides=[8, 16, 32, 64, 128],\n        norm_cfg=None,\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='IoULoss', loss_weight=1.0),\n        loss_centerness=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)))\ntrain_cfg = dict(\n    assigner=dict(\n        type='MaxIoUAssigner',\n        pos_iou_thr=0.5,\n        neg_iou_thr=0.4,\n        min_pos_iou=0,\n        ignore_iof_thr=-1),\n    allowed_border=-1,\n    pos_weight=-1,\n    debug=False)\ntest_cfg = dict(\n    nms_pre=1000,\n    min_bbox_size=0,\n    score_thr=0.05,\n    nms=dict(type='nms', iou_threshold=0.5),\n    max_per_img=100)\nwork_dir = './work_dirs/fcos_r50_caffe_fpn_4x4_1x_coco'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "fcos_r50_caffe_fpn_4x4_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00033, "memory": 4885, "data_time": 0.44063, "loss_cls": 1.11025, "loss_bbox": 4.65138, "loss_centerness": 0.68546, "loss": 6.44709, "grad_norm": 33.00959, "time": 0.94426}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00033, "memory": 4885, "data_time": 0.0253, "loss_cls": 1.01197, "loss_bbox": 1.05738, "loss_centerness": 0.66961, "loss": 2.73897, "grad_norm": 23.57656, "time": 0.51709}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00033, "memory": 4885, "data_time": 0.02543, "loss_cls": 0.76841, "loss_bbox": 0.93544, "loss_centerness": 0.66142, "loss": 2.36527, "grad_norm": 21.73266, "time": 0.52308}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00033, "memory": 4885, "data_time": 0.02511, "loss_cls": 0.72121, "loss_bbox": 0.90291, "loss_centerness": 0.66031, "loss": 2.28443, "grad_norm": 17.63964, "time": 0.51524}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00033, "memory": 4885, "data_time": 0.02549, "loss_cls": 0.65682, "loss_bbox": 0.87819, "loss_centerness": 0.65892, "loss": 2.19393, "grad_norm": 21.15983, "time": 0.52205}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00033, "memory": 4885, "data_time": 0.02356, "loss_cls": 0.64858, "loss_bbox": 0.81392, "loss_centerness": 0.65687, "loss": 2.11938, "grad_norm": 16.25069, "time": 0.5185}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00033, "memory": 4885, "data_time": 0.0226, "loss_cls": 0.63213, "loss_bbox": 0.73343, "loss_centerness": 0.65422, "loss": 2.01977, "grad_norm": 16.9229, "time": 0.51071}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00033, "memory": 4885, "data_time": 0.02279, "loss_cls": 0.63848, "loss_bbox": 0.69699, "loss_centerness": 0.65138, "loss": 1.98685, "grad_norm": 17.30146, "time": 0.50791}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00033, "memory": 4885, "data_time": 0.02177, "loss_cls": 0.61888, "loss_bbox": 0.73016, "loss_centerness": 0.64721, "loss": 1.99626, "grad_norm": 26.66946, "time": 0.50561}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00033, "memory": 4885, "data_time": 0.02312, "loss_cls": 0.62276, "loss_bbox": 0.70462, "loss_centerness": 0.64312, "loss": 1.9705, "grad_norm": 22.95526, "time": 0.51116}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.001, "memory": 4885, "data_time": 0.02273, "loss_cls": 0.62814, "loss_bbox": 1.50672, "loss_centerness": 0.6392, "loss": 2.77406, "grad_norm": 40.88067, "time": 0.51355}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.001, "memory": 4885, "data_time": 0.02308, "loss_cls": 0.62513, "loss_bbox": 0.83058, "loss_centerness": 0.63553, "loss": 2.09124, "grad_norm": 20.70287, "time": 0.51379}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.001, "memory": 4885, "data_time": 0.02242, "loss_cls": 0.60617, "loss_bbox": 0.7135, "loss_centerness": 0.62493, "loss": 1.94461, "grad_norm": 17.13478, "time": 0.50619}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.001, "memory": 4885, "data_time": 0.02117, "loss_cls": 0.60882, "loss_bbox": 0.79723, "loss_centerness": 0.62085, "loss": 2.0269, "grad_norm": 23.30591, "time": 0.50861}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.001, "memory": 4885, "data_time": 0.02314, "loss_cls": 0.59607, "loss_bbox": 0.79771, "loss_centerness": 0.61993, "loss": 2.01371, "grad_norm": 21.72, "time": 0.51489}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.001, "memory": 4885, "data_time": 0.02148, "loss_cls": 0.58584, "loss_bbox": 0.6957, "loss_centerness": 0.61652, "loss": 1.89806, "grad_norm": 16.57361, "time": 0.51111}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.001, "memory": 4885, "data_time": 0.02047, "loss_cls": 0.57861, "loss_bbox": 0.64982, "loss_centerness": 0.61447, "loss": 1.84291, "grad_norm": 13.90848, "time": 0.51041}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.001, "memory": 4885, "data_time": 0.02243, "loss_cls": 0.56732, "loss_bbox": 0.62333, "loss_centerness": 0.61343, "loss": 1.80408, "grad_norm": 13.36283, "time": 0.5109}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.001, "memory": 4885, "data_time": 0.02153, "loss_cls": 0.56144, "loss_bbox": 0.90019, "loss_centerness": 0.61389, "loss": 2.07552, "grad_norm": 25.09501, "time": 0.50825}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.001, "memory": 4885, "data_time": 0.02185, "loss_cls": 0.54398, "loss_bbox": 0.6262, "loss_centerness": 0.61255, "loss": 1.78272, "grad_norm": 12.59755, "time": 0.51042}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.001, "memory": 4885, "data_time": 0.02356, "loss_cls": 0.55353, "loss_bbox": 0.60969, "loss_centerness": 0.61059, "loss": 1.77381, "grad_norm": 13.4707, "time": 0.51113}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.001, "memory": 4885, "data_time": 0.02291, "loss_cls": 0.53395, "loss_bbox": 0.56054, "loss_centerness": 0.60751, "loss": 1.70201, "grad_norm": 9.94152, "time": 0.51087}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.001, "memory": 4885, "data_time": 0.02168, "loss_cls": 0.52443, "loss_bbox": 0.61111, "loss_centerness": 0.60846, "loss": 1.74401, "grad_norm": 15.7147, "time": 0.51088}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.001, "memory": 4885, "data_time": 0.02287, "loss_cls": 0.51841, "loss_bbox": 0.546, "loss_centerness": 0.60818, "loss": 1.6726, "grad_norm": 9.64964, "time": 0.51118}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.001, "memory": 4885, "data_time": 0.02167, "loss_cls": 0.50731, "loss_bbox": 0.55038, "loss_centerness": 0.60502, "loss": 1.66271, "grad_norm": 12.08717, "time": 0.51088}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.001, "memory": 4885, "data_time": 0.02084, "loss_cls": 0.50474, "loss_bbox": 0.55519, "loss_centerness": 0.60591, "loss": 1.66584, "grad_norm": 12.99515, "time": 0.51028}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.001, "memory": 4885, "data_time": 0.02169, "loss_cls": 0.50949, "loss_bbox": 0.55149, "loss_centerness": 0.6056, "loss": 1.66658, "grad_norm": 13.28158, "time": 0.51012}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.001, "memory": 4885, "data_time": 0.02054, "loss_cls": 0.49893, "loss_bbox": 0.59617, "loss_centerness": 0.60475, "loss": 1.69985, "grad_norm": 15.13113, "time": 0.50456}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.001, "memory": 4885, "data_time": 0.02088, "loss_cls": 0.49286, "loss_bbox": 0.51092, "loss_centerness": 0.60503, "loss": 1.60882, "grad_norm": 8.8439, "time": 0.5074}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.001, "memory": 4885, "data_time": 0.02219, "loss_cls": 0.49028, "loss_bbox": 0.54938, "loss_centerness": 0.60485, "loss": 1.64451, "grad_norm": 12.44015, "time": 0.51197}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.001, "memory": 4885, "data_time": 0.02304, "loss_cls": 0.47719, "loss_bbox": 0.51172, "loss_centerness": 0.60225, "loss": 1.59116, "grad_norm": 10.45853, "time": 0.51133}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.001, "memory": 4885, "data_time": 0.02272, "loss_cls": 0.47451, "loss_bbox": 0.54022, "loss_centerness": 0.6038, "loss": 1.61854, "grad_norm": 12.71555, "time": 0.51383}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 0.001, "memory": 4885, "data_time": 0.02158, "loss_cls": 0.47152, "loss_bbox": 0.52052, "loss_centerness": 0.60165, "loss": 1.59369, "grad_norm": 10.36692, "time": 0.50997}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.001, "memory": 4885, "data_time": 0.02133, "loss_cls": 0.46859, "loss_bbox": 0.47107, "loss_centerness": 0.6025, "loss": 1.54216, "grad_norm": 6.54307, "time": 0.50922}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 0.001, "memory": 4885, "data_time": 0.02147, "loss_cls": 0.46328, "loss_bbox": 0.46036, "loss_centerness": 0.60023, "loss": 1.52387, "grad_norm": 7.359, "time": 0.50913}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.001, "memory": 4885, "data_time": 0.02199, "loss_cls": 0.46468, "loss_bbox": 0.4972, "loss_centerness": 0.60132, "loss": 1.56321, "grad_norm": 9.93691, "time": 0.51073}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 0.001, "memory": 4885, "data_time": 0.02031, "loss_cls": 0.46708, "loss_bbox": 0.45555, "loss_centerness": 0.60005, "loss": 1.52267, "grad_norm": 6.60159, "time": 0.506}
