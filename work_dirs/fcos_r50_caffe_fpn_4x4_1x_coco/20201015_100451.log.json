{"env_info": "sys.platform: linux\nPython: 3.7.9 (default, Aug 31 2020, 12:42:55) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.130\nGCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\nPyTorch: 1.4.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CUDA Runtime 10.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.1\n  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.5.0\nOpenCV: 4.4.0\nMMCV: 1.1.5\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.0\nMMDetection: 2.5.0+", "config": "dataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nannotations_root = 'annotations/'\nimage_root = '/root/userfolder/data/TCTAnnotatedData/'\nclasses = ('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n           'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n           'dysbacteriosis_herpes_act', 'ec')\nimg_norm_cfg = dict(\n    mean=[102.9801, 115.9465, 122.7717], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[102.9801, 115.9465, 122.7717],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=4,\n    train=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='annotations/train30000-cat10.json',\n        img_prefix='/root/userfolder/data/TCTAnnotatedData/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='annotations/val.json',\n        img_prefix='/root/userfolder/data/TCTAnnotatedData/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='annotations/test.json',\n        img_prefix='/root/userfolder/data/TCTAnnotatedData/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(\n    type='SGD',\n    lr=0.001,\n    momentum=0.9,\n    weight_decay=0.0001,\n    paramwise_cfg=dict(bias_lr_mult=2.0, bias_decay_mult=0.0))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='constant',\n    warmup_iters=500,\n    warmup_ratio=0.3333333333333333,\n    step=[8, 11])\ntotal_epochs = 12\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nmodel = dict(\n    type='FCOS',\n    pretrained='open-mmlab://detectron/resnet50_caffe',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='caffe'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs=True,\n        extra_convs_on_inputs=False,\n        num_outs=5,\n        relu_before_extra_convs=True),\n    bbox_head=dict(\n        type='FCOSHead',\n        num_classes=10,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        strides=[8, 16, 32, 64, 128],\n        norm_cfg=None,\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='IoULoss', loss_weight=1.0),\n        loss_centerness=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)))\ntrain_cfg = dict(\n    assigner=dict(\n        type='MaxIoUAssigner',\n        pos_iou_thr=0.5,\n        neg_iou_thr=0.4,\n        min_pos_iou=0,\n        ignore_iof_thr=-1),\n    allowed_border=-1,\n    pos_weight=-1,\n    debug=False)\ntest_cfg = dict(\n    nms_pre=1000,\n    min_bbox_size=0,\n    score_thr=0.05,\n    nms=dict(type='nms', iou_threshold=0.5),\n    max_per_img=100)\nwork_dir = './work_dirs/fcos_r50_caffe_fpn_4x4_1x_coco'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "fcos_r50_caffe_fpn_4x4_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00033, "memory": 4894, "data_time": 0.38314, "loss_cls": 1.10521, "loss_bbox": 4.35417, "loss_centerness": 0.68324, "loss": 6.14262, "grad_norm": 29.97467, "time": 0.97228}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00033, "memory": 4894, "data_time": 0.02948, "loss_cls": 0.95586, "loss_bbox": 1.02268, "loss_centerness": 0.66802, "loss": 2.64655, "grad_norm": 20.88986, "time": 0.54539}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00033, "memory": 4894, "data_time": 0.0307, "loss_cls": 0.74036, "loss_bbox": 0.91094, "loss_centerness": 0.66002, "loss": 2.31132, "grad_norm": 18.87761, "time": 0.56156}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00033, "memory": 4894, "data_time": 0.03101, "loss_cls": 0.68433, "loss_bbox": 0.86513, "loss_centerness": 0.65937, "loss": 2.20883, "grad_norm": 13.86303, "time": 0.55658}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00033, "memory": 4894, "data_time": 0.02869, "loss_cls": 0.66127, "loss_bbox": 0.88773, "loss_centerness": 0.65943, "loss": 2.20843, "grad_norm": 22.73709, "time": 0.55477}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00033, "memory": 4894, "data_time": 0.03593, "loss_cls": 0.6448, "loss_bbox": 0.81926, "loss_centerness": 0.65702, "loss": 2.12108, "grad_norm": 15.62827, "time": 0.56033}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00033, "memory": 4894, "data_time": 0.03604, "loss_cls": 0.6344, "loss_bbox": 0.75947, "loss_centerness": 0.6563, "loss": 2.05018, "grad_norm": 15.85707, "time": 0.5587}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00033, "memory": 4894, "data_time": 0.03603, "loss_cls": 0.63774, "loss_bbox": 0.81203, "loss_centerness": 0.6536, "loss": 2.10337, "grad_norm": 31.65336, "time": 0.55687}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00033, "memory": 4894, "data_time": 0.03679, "loss_cls": 0.625, "loss_bbox": 0.72238, "loss_centerness": 0.65031, "loss": 1.99769, "grad_norm": 23.06233, "time": 0.55604}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00033, "memory": 4894, "data_time": 0.03704, "loss_cls": 0.61511, "loss_bbox": 0.68419, "loss_centerness": 0.6465, "loss": 1.9458, "grad_norm": 22.56585, "time": 0.56472}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.001, "memory": 4894, "data_time": 0.03575, "loss_cls": 0.6302, "loss_bbox": 1.00711, "loss_centerness": 0.6407, "loss": 2.278, "grad_norm": 34.89811, "time": 0.55554}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.001, "memory": 4894, "data_time": 0.03652, "loss_cls": 0.6252, "loss_bbox": 0.98507, "loss_centerness": 0.63525, "loss": 2.24552, "grad_norm": 31.19068, "time": 0.55696}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.001, "memory": 4894, "data_time": 0.03578, "loss_cls": 0.61081, "loss_bbox": 0.68847, "loss_centerness": 0.62624, "loss": 1.92552, "grad_norm": 15.26101, "time": 0.56399}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.001, "memory": 4894, "data_time": 0.03576, "loss_cls": 0.59645, "loss_bbox": 0.71779, "loss_centerness": 0.61966, "loss": 1.93391, "grad_norm": 19.96736, "time": 0.56741}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.001, "memory": 4894, "data_time": 0.03674, "loss_cls": 0.59, "loss_bbox": 0.70717, "loss_centerness": 0.6181, "loss": 1.91527, "grad_norm": 16.13344, "time": 0.5774}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.001, "memory": 4894, "data_time": 0.03435, "loss_cls": 0.58253, "loss_bbox": 0.76438, "loss_centerness": 0.6181, "loss": 1.96501, "grad_norm": 21.88334, "time": 0.55939}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.001, "memory": 4894, "data_time": 0.03899, "loss_cls": 0.56982, "loss_bbox": 0.64903, "loss_centerness": 0.61416, "loss": 1.83301, "grad_norm": 13.91936, "time": 0.57232}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.001, "memory": 4894, "data_time": 0.03569, "loss_cls": 0.56876, "loss_bbox": 0.65619, "loss_centerness": 0.61372, "loss": 1.83866, "grad_norm": 17.01483, "time": 0.55758}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.001, "memory": 4894, "data_time": 0.03606, "loss_cls": 0.54363, "loss_bbox": 0.60007, "loss_centerness": 0.61123, "loss": 1.75493, "grad_norm": 13.78065, "time": 0.56354}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.001, "memory": 4894, "data_time": 0.03409, "loss_cls": 0.53363, "loss_bbox": 0.83604, "loss_centerness": 0.61216, "loss": 1.98183, "grad_norm": 25.47165, "time": 0.56027}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.001, "memory": 4894, "data_time": 0.03742, "loss_cls": 0.54278, "loss_bbox": 0.69276, "loss_centerness": 0.61222, "loss": 1.84777, "grad_norm": 15.4622, "time": 0.56062}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.001, "memory": 4894, "data_time": 0.03737, "loss_cls": 0.52676, "loss_bbox": 0.55843, "loss_centerness": 0.60851, "loss": 1.6937, "grad_norm": 10.29955, "time": 0.57027}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.001, "memory": 4894, "data_time": 0.03543, "loss_cls": 0.53185, "loss_bbox": 0.61315, "loss_centerness": 0.60695, "loss": 1.75195, "grad_norm": 16.09641, "time": 0.56392}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.001, "memory": 4894, "data_time": 0.03606, "loss_cls": 0.51032, "loss_bbox": 0.54599, "loss_centerness": 0.60651, "loss": 1.66282, "grad_norm": 11.37, "time": 0.57225}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.001, "memory": 4894, "data_time": 0.03587, "loss_cls": 0.51005, "loss_bbox": 0.51289, "loss_centerness": 0.60642, "loss": 1.62936, "grad_norm": 9.77825, "time": 0.55979}
