{"env_info": "sys.platform: linux\nPython: 3.7.9 (default, Aug 31 2020, 12:42:55) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.130\nGCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\nPyTorch: 1.4.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CUDA Runtime 10.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.1\n  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.5.0\nOpenCV: 4.4.0\nMMCV: 1.1.5\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.0\nMMDetection: 2.5.0+", "config": "dataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nannotations_root = 'annotations/'\nimage_root = '/root/userfolder/data/TCTAnnotatedData/'\nclasses = ('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n           'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n           'dysbacteriosis_herpes_act', 'ec')\nimg_norm_cfg = dict(\n    mean=[102.9801, 115.9465, 122.7717], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[102.9801, 115.9465, 122.7717],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=0,\n    train=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='annotations/train30000-cat10.json',\n        img_prefix='/root/userfolder/data/TCTAnnotatedData/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='annotations/val.json',\n        img_prefix='/root/userfolder/data/TCTAnnotatedData/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='annotations/test.json',\n        img_prefix='/root/userfolder/data/TCTAnnotatedData/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(\n    type='SGD',\n    lr=0.01,\n    momentum=0.9,\n    weight_decay=0.0001,\n    paramwise_cfg=dict(bias_lr_mult=2.0, bias_decay_mult=0.0))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='constant',\n    warmup_iters=500,\n    warmup_ratio=0.3333333333333333,\n    step=[8, 11])\ntotal_epochs = 12\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nmodel = dict(\n    type='FCOS',\n    pretrained='open-mmlab://detectron/resnet50_caffe',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='caffe'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs=True,\n        extra_convs_on_inputs=False,\n        num_outs=5,\n        relu_before_extra_convs=True),\n    bbox_head=dict(\n        type='FCOSHead',\n        num_classes=10,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        strides=[8, 16, 32, 64, 128],\n        norm_cfg=None,\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='IoULoss', loss_weight=1.0),\n        loss_centerness=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)))\ntrain_cfg = dict(\n    assigner=dict(\n        type='MaxIoUAssigner',\n        pos_iou_thr=0.5,\n        neg_iou_thr=0.4,\n        min_pos_iou=0,\n        ignore_iof_thr=-1),\n    allowed_border=-1,\n    pos_weight=-1,\n    debug=False)\ntest_cfg = dict(\n    nms_pre=1000,\n    min_bbox_size=0,\n    score_thr=0.05,\n    nms=dict(type='nms', iou_threshold=0.5),\n    max_per_img=100)\nwork_dir = './work_dirs/fcos_r50_caffe_fpn_4x4_1x_coco'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "fcos_r50_caffe_fpn_4x4_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00333, "memory": 4893, "data_time": 1.16656, "loss_cls": 0.96952, "loss_bbox": 3.32661, "loss_centerness": 0.67411, "loss": 4.97024, "grad_norm": 36.48062, "time": 1.7218}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00333, "memory": 4893, "data_time": 1.0767, "loss_cls": 0.68173, "loss_bbox": 1.21539, "loss_centerness": 0.66668, "loss": 2.5638, "grad_norm": 15.26507, "time": 1.59487}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00333, "memory": 4894, "data_time": 1.08134, "loss_cls": 0.67452, "loss_bbox": 0.80733, "loss_centerness": 0.66383, "loss": 2.14567, "grad_norm": 4.33492, "time": 1.5983}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00333, "memory": 4894, "data_time": 1.08773, "loss_cls": 0.65768, "loss_bbox": 0.78016, "loss_centerness": 0.6581, "loss": 2.09594, "grad_norm": 5.07507, "time": 1.60375}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00333, "memory": 4894, "data_time": 1.0847, "loss_cls": 0.62684, "loss_bbox": 0.67568, "loss_centerness": 0.64255, "loss": 1.94507, "grad_norm": 7.4316, "time": 1.59664}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00333, "memory": 4894, "data_time": 1.06371, "loss_cls": 0.62352, "loss_bbox": 0.62616, "loss_centerness": 0.61858, "loss": 1.86826, "grad_norm": 5.32304, "time": 1.59213}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00333, "memory": 4894, "data_time": 1.10787, "loss_cls": 0.5985, "loss_bbox": 0.55311, "loss_centerness": 0.61112, "loss": 1.76272, "grad_norm": 4.48175, "time": 1.6093}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00333, "memory": 4894, "data_time": 1.08788, "loss_cls": 0.60396, "loss_bbox": 0.5546, "loss_centerness": 0.60901, "loss": 1.76757, "grad_norm": 5.40428, "time": 1.60709}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00333, "memory": 4894, "data_time": 1.06707, "loss_cls": 0.57918, "loss_bbox": 0.52112, "loss_centerness": 0.60569, "loss": 1.70599, "grad_norm": 4.66683, "time": 1.60298}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00333, "memory": 4894, "data_time": 1.09421, "loss_cls": 0.5659, "loss_bbox": 0.49487, "loss_centerness": 0.60461, "loss": 1.66537, "grad_norm": 4.45786, "time": 1.60251}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.01, "memory": 4894, "data_time": 1.08345, "loss_cls": 0.7282, "loss_bbox": 0.58176, "loss_centerness": 0.61573, "loss": 1.92568, "grad_norm": 6.22259, "time": 1.60383}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.01, "memory": 4894, "data_time": 1.09289, "loss_cls": 0.84106, "loss_bbox": 0.55872, "loss_centerness": 0.64948, "loss": 2.04926, "grad_norm": 5.08302, "time": 1.60444}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.01, "memory": 4894, "data_time": 1.06722, "loss_cls": 0.6807, "loss_bbox": 0.51874, "loss_centerness": 0.61532, "loss": 1.81476, "grad_norm": 4.41515, "time": 1.61022}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.01, "memory": 4894, "data_time": 1.04512, "loss_cls": 0.60257, "loss_bbox": 0.55782, "loss_centerness": 0.60777, "loss": 1.76815, "grad_norm": 4.81946, "time": 1.57662}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.01, "memory": 4894, "data_time": 1.07936, "loss_cls": 0.56969, "loss_bbox": 0.47006, "loss_centerness": 0.60531, "loss": 1.64506, "grad_norm": 3.79835, "time": 1.60816}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.01, "memory": 4894, "data_time": 1.07999, "loss_cls": 0.54766, "loss_bbox": 0.46696, "loss_centerness": 0.60186, "loss": 1.61649, "grad_norm": 4.18564, "time": 1.60434}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.01, "memory": 4894, "data_time": 1.0662, "loss_cls": 0.53121, "loss_bbox": 0.51183, "loss_centerness": 0.60085, "loss": 1.64389, "grad_norm": 5.0578, "time": 1.60831}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.01, "memory": 4894, "data_time": 1.0867, "loss_cls": 0.56038, "loss_bbox": 0.44173, "loss_centerness": 0.60177, "loss": 1.60389, "grad_norm": 3.55939, "time": 1.59603}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.01, "memory": 4894, "data_time": 1.07826, "loss_cls": 0.51665, "loss_bbox": 0.4509, "loss_centerness": 0.60016, "loss": 1.56771, "grad_norm": 3.98832, "time": 1.60356}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.01, "memory": 4894, "data_time": 1.07799, "loss_cls": 0.4889, "loss_bbox": 0.45644, "loss_centerness": 0.59777, "loss": 1.54311, "grad_norm": 4.0627, "time": 1.61076}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.01, "memory": 4894, "data_time": 1.08261, "loss_cls": 0.50299, "loss_bbox": 0.43871, "loss_centerness": 0.59693, "loss": 1.53863, "grad_norm": 3.74477, "time": 1.61033}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.01, "memory": 4894, "data_time": 1.19518, "loss_cls": 0.48787, "loss_bbox": 0.42367, "loss_centerness": 0.59565, "loss": 1.5072, "grad_norm": 3.55781, "time": 1.72174}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.01, "memory": 4894, "data_time": 1.26437, "loss_cls": 0.47605, "loss_bbox": 0.41598, "loss_centerness": 0.59491, "loss": 1.48694, "grad_norm": 3.5673, "time": 1.77967}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.01, "memory": 4894, "data_time": 1.2531, "loss_cls": 0.46979, "loss_bbox": 0.40223, "loss_centerness": 0.59427, "loss": 1.4663, "grad_norm": 3.13392, "time": 1.77897}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.01, "memory": 4894, "data_time": 1.08851, "loss_cls": 0.48553, "loss_bbox": 0.41038, "loss_centerness": 0.5931, "loss": 1.489, "grad_norm": 3.55639, "time": 1.68602}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.01, "memory": 4894, "data_time": 1.12539, "loss_cls": 0.47491, "loss_bbox": 0.41576, "loss_centerness": 0.59382, "loss": 1.48448, "grad_norm": 3.49124, "time": 1.70857}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.01, "memory": 4894, "data_time": 1.08261, "loss_cls": 0.46672, "loss_bbox": 0.40076, "loss_centerness": 0.59275, "loss": 1.46023, "grad_norm": 3.57149, "time": 1.71415}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.01, "memory": 4894, "data_time": 1.1279, "loss_cls": 0.46638, "loss_bbox": 0.42579, "loss_centerness": 0.59252, "loss": 1.48468, "grad_norm": 3.89957, "time": 1.71304}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.01, "memory": 4894, "data_time": 1.09915, "loss_cls": 0.44576, "loss_bbox": 0.38238, "loss_centerness": 0.5936, "loss": 1.42174, "grad_norm": 2.79404, "time": 1.68558}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.01, "memory": 4894, "data_time": 1.11122, "loss_cls": 0.44771, "loss_bbox": 0.44031, "loss_centerness": 0.59334, "loss": 1.48136, "grad_norm": 4.00077, "time": 1.69448}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.01, "memory": 4894, "data_time": 1.13551, "loss_cls": 0.44188, "loss_bbox": 0.40696, "loss_centerness": 0.59178, "loss": 1.44062, "grad_norm": 3.6651, "time": 1.67641}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.01, "memory": 4894, "data_time": 1.12324, "loss_cls": 0.42492, "loss_bbox": 0.44747, "loss_centerness": 0.5929, "loss": 1.46529, "grad_norm": 4.36105, "time": 1.67704}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 0.01, "memory": 4894, "data_time": 1.08919, "loss_cls": 0.42533, "loss_bbox": 0.40764, "loss_centerness": 0.59014, "loss": 1.42311, "grad_norm": 3.75024, "time": 1.65915}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.01, "memory": 4894, "data_time": 1.08318, "loss_cls": 0.4164, "loss_bbox": 0.37871, "loss_centerness": 0.59107, "loss": 1.38619, "grad_norm": 2.92679, "time": 1.62987}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 0.01, "memory": 4894, "data_time": 1.08931, "loss_cls": 0.41614, "loss_bbox": 0.3615, "loss_centerness": 0.58947, "loss": 1.36711, "grad_norm": 2.72625, "time": 1.61619}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.01, "memory": 4894, "data_time": 1.05421, "loss_cls": 0.42254, "loss_bbox": 0.37639, "loss_centerness": 0.59007, "loss": 1.38899, "grad_norm": 3.03864, "time": 1.6052}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 0.01, "memory": 4894, "data_time": 1.07008, "loss_cls": 0.42924, "loss_bbox": 0.37083, "loss_centerness": 0.59068, "loss": 1.39075, "grad_norm": 2.63022, "time": 1.61534}
