2021-05-10 15:24:59,992 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.9 (default, Aug 31 2020, 12:42:55) [GCC 7.3.0]
CUDA available: True
GPU 0,1,2,3,4,5,6,7: GeForce RTX 2080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 10.0, V10.0.130
GCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609
PyTorch: 1.6.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.5.0 (Git Hash e2ac1fac44c5078ca927cb9b90e1b3066a0b2ed0)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

TorchVision: 0.7.0
OpenCV: 4.4.0
MMCV: 1.3.3
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 10.2
MMDetection: 2.12.0+
------------------------------------------------------------

2021-05-10 15:25:00,454 - mmdet - INFO - Distributed training: True
2021-05-10 15:25:00,822 - mmdet - INFO - Config:
model = dict(
    type='FasterRCNN',
    pretrained='torchvision://resnet50',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch'),
    neck=dict(
        type='FPN_CARAFE_3_kernelexp',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5,
        start_level=0,
        end_level=-1,
        norm_cfg=None,
        act_cfg=None,
        order=('conv', 'norm', 'act'),
        upsample_cfg=dict(
            type='carafe',
            up_kernel=5,
            up_group=1,
            encoder_kernel=3,
            encoder_dilation=1,
            compressed_channels=64)),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
    roi_head=dict(
        type='StandardRoIHead',
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=dict(
            type='Shared2FCBBoxHead',
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=80,
            bbox_coder=dict(
                type='DeltaXYWHBBoxCoder',
                target_means=[0.0, 0.0, 0.0, 0.0],
                target_stds=[0.1, 0.1, 0.2, 0.2]),
            reg_class_agnostic=False,
            loss_cls=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', loss_weight=1.0))))
train_cfg = dict(
    rpn=dict(
        assigner=dict(
            type='MaxIoUAssigner',
            pos_iou_thr=0.7,
            neg_iou_thr=0.3,
            min_pos_iou=0.3,
            match_low_quality=True,
            ignore_iof_thr=-1),
        sampler=dict(
            type='RandomSampler',
            num=256,
            pos_fraction=0.5,
            neg_pos_ub=-1,
            add_gt_as_proposals=False),
        allowed_border=-1,
        pos_weight=-1,
        debug=False),
    rpn_proposal=dict(
        nms_across_levels=False,
        nms_pre=2000,
        nms_post=1000,
        max_num=1000,
        nms_thr=0.7,
        min_bbox_size=0),
    rcnn=dict(
        assigner=dict(
            type='MaxIoUAssigner',
            pos_iou_thr=0.5,
            neg_iou_thr=0.5,
            min_pos_iou=0.5,
            match_low_quality=False,
            ignore_iof_thr=-1),
        sampler=dict(
            type='RandomSampler',
            num=512,
            pos_fraction=0.25,
            neg_pos_ub=-1,
            add_gt_as_proposals=True),
        pos_weight=-1,
        debug=False))
test_cfg = dict(
    rpn=dict(
        nms_across_levels=False,
        nms_pre=1000,
        nms_post=1000,
        max_num=1000,
        nms_thr=0.7,
        min_bbox_size=0),
    rcnn=dict(
        score_thr=0.05,
        nms=dict(type='nms', iou_threshold=0.5),
        max_per_img=100))
dataset_type = 'CocoDataset'
data_root = '../data/coco/'
annotations_root = '../data/coco/annotations/'
image_root = '../data/coco/'
img_scale = (1333, 800)
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=64),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=64),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=0,
    train=dict(
        type='CocoDataset',
        ann_file='../data/coco/annotations/instances_train2017.json',
        img_prefix='../data/coco/train2017',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=64),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file='../data/coco/annotations/instances_val2017.json',
        img_prefix='../data/coco/val2017',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=64),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file='../data/coco/annotations/image_info_test-dev2017.json',
        img_prefix='../data/coco/test2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=64),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='bbox')
optimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001,
    step=[8, 11])
runner = dict(type='EpochBasedRunner', max_epochs=12)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = './work_dirs/coco_faster_r50_1x_carafe_3_kernelexp'
gpu_ids = range(0, 8)

2021-05-10 15:25:47,754 - mmdet - INFO - Start running, host: root@0981e3d7df7c, work_dir: /root/userfolder/mmdetection/work_dirs/coco_faster_r50_1x_carafe_3_kernelexp
2021-05-10 15:25:47,754 - mmdet - INFO - workflow: [('train', 1)], max: 12 epochs
2021-05-10 15:26:15,310 - mmdet - INFO - Epoch [1][50/7330]	lr: 1.978e-03, eta: 13:25:53, time: 0.550, data_time: 0.201, memory: 4268, loss_rpn_cls: 0.5169, loss_rpn_bbox: 0.1037, loss_cls: 1.0698, acc: 88.0452, loss_bbox: 0.1474, loss: 1.8378
2021-05-10 15:26:39,060 - mmdet - INFO - Epoch [1][100/7330]	lr: 3.976e-03, eta: 12:30:13, time: 0.475, data_time: 0.136, memory: 4268, loss_rpn_cls: 0.2508, loss_rpn_bbox: 0.0948, loss_cls: 0.4886, acc: 94.7410, loss_bbox: 0.1940, loss: 1.0282
2021-05-10 15:27:02,781 - mmdet - INFO - Epoch [1][150/7330]	lr: 5.974e-03, eta: 12:11:30, time: 0.475, data_time: 0.136, memory: 4268, loss_rpn_cls: 0.2056, loss_rpn_bbox: 0.0929, loss_cls: 0.4716, acc: 94.3101, loss_bbox: 0.2035, loss: 0.9736
2021-05-10 15:27:26,512 - mmdet - INFO - Epoch [1][200/7330]	lr: 7.972e-03, eta: 12:01:44, time: 0.474, data_time: 0.136, memory: 4268, loss_rpn_cls: 0.1689, loss_rpn_bbox: 0.0963, loss_cls: 0.4141, acc: 93.7969, loss_bbox: 0.2215, loss: 0.9008
2021-05-10 15:27:50,206 - mmdet - INFO - Epoch [1][250/7330]	lr: 9.970e-03, eta: 11:55:43, time: 0.474, data_time: 0.134, memory: 4268, loss_rpn_cls: 0.1410, loss_rpn_bbox: 0.0975, loss_cls: 0.4209, acc: 93.0759, loss_bbox: 0.2506, loss: 0.9100
2021-05-10 15:28:14,000 - mmdet - INFO - Epoch [1][300/7330]	lr: 1.197e-02, eta: 11:51:57, time: 0.476, data_time: 0.131, memory: 4268, loss_rpn_cls: 0.1251, loss_rpn_bbox: 0.0912, loss_cls: 0.4457, acc: 92.4016, loss_bbox: 0.2821, loss: 0.9440
2021-05-10 15:28:37,758 - mmdet - INFO - Epoch [1][350/7330]	lr: 1.397e-02, eta: 11:48:57, time: 0.475, data_time: 0.134, memory: 4268, loss_rpn_cls: 0.1125, loss_rpn_bbox: 0.0876, loss_cls: 0.4533, acc: 92.2668, loss_bbox: 0.2879, loss: 0.9412
2021-05-10 15:29:01,764 - mmdet - INFO - Epoch [1][400/7330]	lr: 1.596e-02, eta: 11:47:36, time: 0.480, data_time: 0.140, memory: 4268, loss_rpn_cls: 0.1130, loss_rpn_bbox: 0.0898, loss_cls: 0.4826, acc: 91.0969, loss_bbox: 0.3334, loss: 1.0189
2021-05-10 15:29:26,442 - mmdet - INFO - Epoch [1][450/7330]	lr: 1.796e-02, eta: 11:48:37, time: 0.494, data_time: 0.141, memory: 4268, loss_rpn_cls: 0.1029, loss_rpn_bbox: 0.0874, loss_cls: 0.4718, acc: 90.9692, loss_bbox: 0.3437, loss: 1.0058
2021-05-10 15:29:50,979 - mmdet - INFO - Epoch [1][500/7330]	lr: 1.996e-02, eta: 11:48:55, time: 0.491, data_time: 0.147, memory: 4268, loss_rpn_cls: 0.1017, loss_rpn_bbox: 0.0842, loss_cls: 0.4903, acc: 90.6118, loss_bbox: 0.3507, loss: 1.0268
2021-05-10 15:30:15,516 - mmdet - INFO - Epoch [1][550/7330]	lr: 2.000e-02, eta: 11:49:02, time: 0.490, data_time: 0.144, memory: 4268, loss_rpn_cls: 0.0957, loss_rpn_bbox: 0.0813, loss_cls: 0.5018, acc: 90.3550, loss_bbox: 0.3645, loss: 1.0432
2021-05-10 15:30:40,079 - mmdet - INFO - Epoch [1][600/7330]	lr: 2.000e-02, eta: 11:49:12, time: 0.491, data_time: 0.147, memory: 4268, loss_rpn_cls: 0.0958, loss_rpn_bbox: 0.0823, loss_cls: 0.4859, acc: 90.1653, loss_bbox: 0.3727, loss: 1.0367
2021-05-10 15:31:04,268 - mmdet - INFO - Epoch [1][650/7330]	lr: 2.000e-02, eta: 11:48:27, time: 0.484, data_time: 0.143, memory: 4268, loss_rpn_cls: 0.0877, loss_rpn_bbox: 0.0861, loss_cls: 0.4567, acc: 90.1851, loss_bbox: 0.3678, loss: 0.9983
2021-05-10 15:31:28,411 - mmdet - INFO - Epoch [1][700/7330]	lr: 2.000e-02, eta: 11:47:38, time: 0.483, data_time: 0.139, memory: 4268, loss_rpn_cls: 0.0876, loss_rpn_bbox: 0.0827, loss_cls: 0.4576, acc: 89.7527, loss_bbox: 0.3833, loss: 1.0112
