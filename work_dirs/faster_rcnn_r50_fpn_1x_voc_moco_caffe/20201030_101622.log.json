{"env_info": "sys.platform: linux\nPython: 3.6.12 |Anaconda, Inc.| (default, Sep  8 2020, 23:10:56) [GCC 7.3.0]\nCUDA available: True\nGPU 0: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.130\nGCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\nPyTorch: 1.4.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CUDA Runtime 10.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.1\n  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.5.0\nOpenCV: 4.4.0\nMMCV: 1.1.5\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.0\nMMDetection: 2.5.0+", "config": "model = dict(\n    type='FasterRCNN',\n    pretrained='open-mmlab://detectron2/resnet50_caffe',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=20,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))))\ntrain_cfg = dict(\n    rpn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.7,\n            neg_iou_thr=0.3,\n            min_pos_iou=0.3,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=256,\n            pos_fraction=0.5,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    rpn_proposal=dict(\n        nms_across_levels=False,\n        nms_pre=2000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0.5,\n            match_low_quality=False,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=512,\n            pos_fraction=0.25,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=True),\n        pos_weight=-1,\n        debug=False))\ntest_cfg = dict(\n    rpn=dict(\n        nms_across_levels=False,\n        nms_pre=1000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'VOCDataset'\ndata_root = '/root/userfolder/data/voc0712/VOCdevkit/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1000, 600), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1000, 600),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=0,\n    train=dict(\n        type='RepeatDataset',\n        times=3,\n        dataset=dict(\n            type='VOCDataset',\n            ann_file=[\n                '/root/userfolder/data/voc0712/VOCdevkit/VOC2007/ImageSets/Main/trainval.txt',\n                '/root/userfolder/data/voc0712/VOCdevkit/VOC2012/ImageSets/Main/trainval.txt'\n            ],\n            img_prefix=[\n                '/root/userfolder/data/voc0712/VOCdevkit/VOC2007/',\n                '/root/userfolder/data/voc0712/VOCdevkit/VOC2012/'\n            ],\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations', with_bbox=True),\n                dict(type='Resize', img_scale=(1000, 600), keep_ratio=True),\n                dict(type='RandomFlip', flip_ratio=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size_divisor=32),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n            ])),\n    val=dict(\n        type='VOCDataset',\n        ann_file=\n        '/root/userfolder/data/voc0712/VOCdevkit/VOC2007/ImageSets/Main/test.txt',\n        img_prefix='/root/userfolder/data/voc0712/VOCdevkit/VOC2007/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1000, 600),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='VOCDataset',\n        ann_file=\n        '/root/userfolder/data/voc0712/VOCdevkit/VOC2007/ImageSets/Main/test.txt',\n        img_prefix='/root/userfolder/data/voc0712/VOCdevkit/VOC2007/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1000, 600),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='mAP')\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\ntotal_epochs = 12\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/faster_rcnn_r50_fpn_1x_voc_moco_caffe'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "faster_rcnn_r50_fpn_1x_voc_moco_caffe.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 2564, "data_time": 0.17824, "loss_rpn_cls": 0.27723, "loss_rpn_bbox": 0.02591, "loss_cls": 0.50844, "acc": 91.41992, "loss_bbox": 0.08707, "loss": 0.89865, "time": 0.38133}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00199, "memory": 2564, "data_time": 0.10682, "loss_rpn_cls": 0.09625, "loss_rpn_bbox": 0.0249, "loss_cls": 0.39767, "acc": 96.27148, "loss_bbox": 0.1462, "loss": 0.66502, "time": 0.30568}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00299, "memory": 2564, "data_time": 0.10687, "loss_rpn_cls": 0.10832, "loss_rpn_bbox": 0.03492, "loss_cls": 0.44723, "acc": 96.03906, "loss_bbox": 0.15441, "loss": 0.74488, "time": 0.31026}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00399, "memory": 2564, "data_time": 0.11522, "loss_rpn_cls": 0.08535, "loss_rpn_bbox": 0.02745, "loss_cls": 0.41468, "acc": 95.52734, "loss_bbox": 0.17987, "loss": 0.70735, "time": 0.30474}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00499, "memory": 2564, "data_time": 0.12015, "loss_rpn_cls": 0.07914, "loss_rpn_bbox": 0.02351, "loss_cls": 0.35358, "acc": 96.1582, "loss_bbox": 0.15459, "loss": 0.61082, "time": 0.3085}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00598, "memory": 2564, "data_time": 0.13211, "loss_rpn_cls": 0.08017, "loss_rpn_bbox": 0.02166, "loss_cls": 0.30819, "acc": 96.78906, "loss_bbox": 0.1272, "loss": 0.53722, "time": 0.318}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00698, "memory": 2564, "data_time": 0.09244, "loss_rpn_cls": 0.09111, "loss_rpn_bbox": 0.02756, "loss_cls": 0.33139, "acc": 96.43164, "loss_bbox": 0.13867, "loss": 0.58872, "time": 0.29751}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00798, "memory": 2564, "data_time": 0.10307, "loss_rpn_cls": 0.07306, "loss_rpn_bbox": 0.02419, "loss_cls": 0.29891, "acc": 96.3457, "loss_bbox": 0.1471, "loss": 0.54325, "time": 0.29369}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00898, "memory": 2564, "data_time": 0.10734, "loss_rpn_cls": 0.08067, "loss_rpn_bbox": 0.02416, "loss_cls": 0.32325, "acc": 95.91797, "loss_bbox": 0.15982, "loss": 0.5879, "time": 0.28626}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00998, "memory": 2564, "data_time": 0.09656, "loss_rpn_cls": 0.063, "loss_rpn_bbox": 0.01724, "loss_cls": 0.28604, "acc": 96.35547, "loss_bbox": 0.14676, "loss": 0.51305, "time": 0.29561}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.01, "memory": 2564, "data_time": 0.09128, "loss_rpn_cls": 0.11062, "loss_rpn_bbox": 0.03454, "loss_cls": 0.30584, "acc": 96.0918, "loss_bbox": 0.14997, "loss": 0.60097, "time": 0.29553}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.01, "memory": 2564, "data_time": 0.10127, "loss_rpn_cls": 0.10757, "loss_rpn_bbox": 0.04755, "loss_cls": 0.32758, "acc": 95.87109, "loss_bbox": 0.1639, "loss": 0.6466, "time": 0.29555}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.01, "memory": 2564, "data_time": 0.09097, "loss_rpn_cls": 0.11675, "loss_rpn_bbox": 0.06615, "loss_cls": 0.2844, "acc": 97.0293, "loss_bbox": 0.11899, "loss": 0.58629, "time": 0.29368}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.01, "memory": 2564, "data_time": 0.13049, "loss_rpn_cls": 0.07403, "loss_rpn_bbox": 0.02468, "loss_cls": 0.25318, "acc": 96.72266, "loss_bbox": 0.13119, "loss": 0.48309, "time": 0.3157}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.01, "memory": 2564, "data_time": 0.12258, "loss_rpn_cls": 0.08531, "loss_rpn_bbox": 0.03149, "loss_cls": 0.29897, "acc": 95.53711, "loss_bbox": 0.17383, "loss": 0.5896, "time": 0.30379}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.01, "memory": 2564, "data_time": 0.09976, "loss_rpn_cls": 0.08921, "loss_rpn_bbox": 0.03286, "loss_cls": 0.25931, "acc": 96.07031, "loss_bbox": 0.15368, "loss": 0.53507, "time": 0.30308}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.01, "memory": 2564, "data_time": 0.10579, "loss_rpn_cls": 0.06578, "loss_rpn_bbox": 0.02184, "loss_cls": 0.22893, "acc": 96.26562, "loss_bbox": 0.14842, "loss": 0.46498, "time": 0.31166}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.01, "memory": 2564, "data_time": 0.10804, "loss_rpn_cls": 0.09049, "loss_rpn_bbox": 0.02792, "loss_cls": 0.23807, "acc": 95.96094, "loss_bbox": 0.15774, "loss": 0.51422, "time": 0.32007}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.01, "memory": 2564, "data_time": 0.11203, "loss_rpn_cls": 0.08048, "loss_rpn_bbox": 0.02592, "loss_cls": 0.26512, "acc": 95.90625, "loss_bbox": 0.16164, "loss": 0.53316, "time": 0.30846}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.01, "memory": 2564, "data_time": 0.10067, "loss_rpn_cls": 0.06992, "loss_rpn_bbox": 0.02465, "loss_cls": 0.28757, "acc": 95.50195, "loss_bbox": 0.17824, "loss": 0.56037, "time": 0.30671}
