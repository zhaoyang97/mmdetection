{"env_info": "sys.platform: linux\nPython: 3.7.9 (default, Aug 31 2020, 12:42:55) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.130\nGCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\nPyTorch: 1.6.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.5.0 (Git Hash e2ac1fac44c5078ca927cb9b90e1b3066a0b2ed0)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.7.0\nOpenCV: 4.4.0\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.2\nMMDetection: 2.12.0+", "config": "model = dict(\n    type='FasterRCNN',\n    pretrained=\n    '../mmclassification/work_dirs/tctplus_resnet50_b32x8/epoch_100_pretrained.pth',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=10,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))))\ntrain_cfg = dict(\n    rpn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.7,\n            neg_iou_thr=0.3,\n            min_pos_iou=0.3,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=256,\n            pos_fraction=0.5,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    rpn_proposal=dict(\n        nms_across_levels=False,\n        nms_pre=2000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0.5,\n            match_low_quality=False,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=512,\n            pos_fraction=0.25,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=True),\n        pos_weight=-1,\n        debug=False))\ntest_cfg = dict(\n    rpn=dict(\n        nms_across_levels=False,\n        nms_pre=1000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nannotations_root = '../data/TCT_30000/'\nimage_root = '../data/TCT_30000/'\nclasses = ('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n           'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n           'dysbacteriosis_herpes_act', 'ec')\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=0,\n    train=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='../data/TCT_30000/train30000-cat10.json',\n        img_prefix='../data/TCT_30000/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='../data/TCT_30000/val10000-cat10.json',\n        img_prefix='../data/TCT_30000/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='../data/TCT_30000/test10000-cat10.json',\n        img_prefix='../data/TCT_30000/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=24)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/faster_rcnn_r50_fpn_2x_tctplus'\ngpu_ids = range(0, 4)\n", "seed": null, "exp_name": "faster_rcnn_r50_fpn_2x_tctplus.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 3719, "data_time": 0.42684, "loss_rpn_cls": 0.60299, "loss_rpn_bbox": 0.04396, "loss_cls": 0.71334, "acc": 85.52881, "loss_bbox": 0.03545, "loss": 1.39574, "time": 0.7595}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00199, "memory": 3719, "data_time": 0.39823, "loss_rpn_cls": 0.24181, "loss_rpn_bbox": 0.04577, "loss_cls": 0.16186, "acc": 98.40234, "loss_bbox": 0.0406, "loss": 0.49004, "time": 0.69796}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00299, "memory": 3719, "data_time": 0.38352, "loss_rpn_cls": 0.175, "loss_rpn_bbox": 0.04134, "loss_cls": 0.20876, "acc": 96.73486, "loss_bbox": 0.1039, "loss": 0.529, "time": 0.68967}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00399, "memory": 3719, "data_time": 0.37357, "loss_rpn_cls": 0.1439, "loss_rpn_bbox": 0.03942, "loss_cls": 0.29714, "acc": 94.46484, "loss_bbox": 0.19004, "loss": 0.67049, "time": 0.69271}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00499, "memory": 3719, "data_time": 0.39155, "loss_rpn_cls": 0.11501, "loss_rpn_bbox": 0.04044, "loss_cls": 0.30378, "acc": 93.74219, "loss_bbox": 0.20482, "loss": 0.66405, "time": 0.69426}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00598, "memory": 3719, "data_time": 0.38573, "loss_rpn_cls": 0.10934, "loss_rpn_bbox": 0.03908, "loss_cls": 0.31041, "acc": 93.39355, "loss_bbox": 0.20623, "loss": 0.66506, "time": 0.69061}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00698, "memory": 3719, "data_time": 0.37719, "loss_rpn_cls": 0.0935, "loss_rpn_bbox": 0.03548, "loss_cls": 0.33002, "acc": 92.39258, "loss_bbox": 0.23609, "loss": 0.69509, "time": 0.69028}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00798, "memory": 3719, "data_time": 0.37161, "loss_rpn_cls": 0.08345, "loss_rpn_bbox": 0.03587, "loss_cls": 0.32515, "acc": 91.80957, "loss_bbox": 0.25168, "loss": 0.69615, "time": 0.68517}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00898, "memory": 3719, "data_time": 0.37707, "loss_rpn_cls": 0.08319, "loss_rpn_bbox": 0.03634, "loss_cls": 0.36042, "acc": 91.34521, "loss_bbox": 0.25593, "loss": 0.73589, "time": 0.6932}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00998, "memory": 3719, "data_time": 0.35398, "loss_rpn_cls": 0.08536, "loss_rpn_bbox": 0.0378, "loss_cls": 0.36233, "acc": 90.73096, "loss_bbox": 0.26948, "loss": 0.75497, "time": 0.67479}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.01, "memory": 3719, "data_time": 0.34935, "loss_rpn_cls": 0.07469, "loss_rpn_bbox": 0.03275, "loss_cls": 0.34481, "acc": 90.8584, "loss_bbox": 0.26189, "loss": 0.71413, "time": 0.66253}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.01, "memory": 3719, "data_time": 0.35788, "loss_rpn_cls": 0.07633, "loss_rpn_bbox": 0.0338, "loss_cls": 0.33258, "acc": 91.30518, "loss_bbox": 0.24117, "loss": 0.68389, "time": 0.66808}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.01, "memory": 3719, "data_time": 0.34188, "loss_rpn_cls": 0.0729, "loss_rpn_bbox": 0.03393, "loss_cls": 0.33867, "acc": 90.6333, "loss_bbox": 0.25994, "loss": 0.70544, "time": 0.65223}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.01, "memory": 3719, "data_time": 0.35532, "loss_rpn_cls": 0.08026, "loss_rpn_bbox": 0.0333, "loss_cls": 0.32427, "acc": 91.1709, "loss_bbox": 0.24543, "loss": 0.68327, "time": 0.65929}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.01, "memory": 3719, "data_time": 0.34575, "loss_rpn_cls": 0.07634, "loss_rpn_bbox": 0.03405, "loss_cls": 0.33495, "acc": 91.07617, "loss_bbox": 0.24483, "loss": 0.69017, "time": 0.66229}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.01, "memory": 3719, "data_time": 0.34437, "loss_rpn_cls": 0.07241, "loss_rpn_bbox": 0.03155, "loss_cls": 0.33504, "acc": 90.48242, "loss_bbox": 0.26662, "loss": 0.70562, "time": 0.65426}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.01, "memory": 3719, "data_time": 0.35036, "loss_rpn_cls": 0.06705, "loss_rpn_bbox": 0.02878, "loss_cls": 0.34687, "acc": 90.13672, "loss_bbox": 0.26602, "loss": 0.70872, "time": 0.66312}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.01, "memory": 3719, "data_time": 0.36135, "loss_rpn_cls": 0.07511, "loss_rpn_bbox": 0.03362, "loss_cls": 0.34501, "acc": 90.36768, "loss_bbox": 0.25986, "loss": 0.7136, "time": 0.65842}
