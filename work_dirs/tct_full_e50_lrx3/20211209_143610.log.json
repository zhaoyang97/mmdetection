{"env_info": "sys.platform: linux\nPython: 3.7.9 (default, Aug 31 2020, 12:42:55) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.130\nGCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\nPyTorch: 1.6.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.5.0 (Git Hash e2ac1fac44c5078ca927cb9b90e1b3066a0b2ed0)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.7.0\nOpenCV: 4.4.0\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.2\nMMDetection: 2.12.0+", "config": "model = dict(\n    type='FasterRCNN',\n    pretrained=\n    '../mmclassification/work_dirs/tct_full_resnet50_b32x8/epoch_50_pretrained.pth',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=10,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))))\ntrain_cfg = dict(\n    rpn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.7,\n            neg_iou_thr=0.3,\n            min_pos_iou=0.3,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=256,\n            pos_fraction=0.5,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    rpn_proposal=dict(\n        nms_across_levels=False,\n        nms_pre=2000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0.5,\n            match_low_quality=False,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=512,\n            pos_fraction=0.25,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=True),\n        pos_weight=-1,\n        debug=False))\ntest_cfg = dict(\n    rpn=dict(\n        nms_across_levels=False,\n        nms_pre=1000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nannotations_root = '../data/TCT_30000/'\nimage_root = '../data/TCT_30000/'\nclasses = ('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n           'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n           'dysbacteriosis_herpes_act', 'ec')\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=0,\n    train=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='../data/TCT_30000/train30000-cat10.json',\n        img_prefix='../data/TCT_30000/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='../data/TCT_30000/val10000-cat10.json',\n        img_prefix='../data/TCT_30000/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='../data/TCT_30000/test10000-cat10.json',\n        img_prefix='../data/TCT_30000/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.03, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/tct_full_e50_lrx3'\ngpu_ids = range(0, 4)\n", "seed": null, "exp_name": "tct_full_e50_lrx3.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00297, "memory": 3718, "data_time": 0.41982, "loss_rpn_cls": 0.45428, "loss_rpn_bbox": 0.04368, "loss_cls": 0.38535, "acc": 94.71387, "loss_bbox": 0.04135, "loss": 0.92466, "time": 0.74401}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00596, "memory": 3719, "data_time": 0.38496, "loss_rpn_cls": 0.18945, "loss_rpn_bbox": 0.04545, "loss_cls": 0.18755, "acc": 97.18066, "loss_bbox": 0.08444, "loss": 0.50688, "time": 0.6782}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00896, "memory": 3719, "data_time": 0.37725, "loss_rpn_cls": 0.13209, "loss_rpn_bbox": 0.03936, "loss_cls": 0.32398, "acc": 94.03711, "loss_bbox": 0.20656, "loss": 0.70199, "time": 0.67692}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.01196, "memory": 3719, "data_time": 0.37441, "loss_rpn_cls": 0.11154, "loss_rpn_bbox": 0.03793, "loss_cls": 0.35542, "acc": 92.58301, "loss_bbox": 0.23731, "loss": 0.7422, "time": 0.67535}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.01496, "memory": 3719, "data_time": 0.38872, "loss_rpn_cls": 0.09792, "loss_rpn_bbox": 0.03787, "loss_cls": 0.33997, "acc": 92.43115, "loss_bbox": 0.22926, "loss": 0.70502, "time": 0.67995}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01795, "memory": 3720, "data_time": 0.37556, "loss_rpn_cls": 0.08976, "loss_rpn_bbox": 0.03657, "loss_cls": 0.34982, "acc": 91.73779, "loss_bbox": 0.23986, "loss": 0.71601, "time": 0.67401}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.02095, "memory": 3720, "data_time": 0.37741, "loss_rpn_cls": 0.08245, "loss_rpn_bbox": 0.03331, "loss_cls": 0.36914, "acc": 91.13477, "loss_bbox": 0.25694, "loss": 0.74184, "time": 0.68264}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.02395, "memory": 3720, "data_time": 0.37069, "loss_rpn_cls": 0.07549, "loss_rpn_bbox": 0.03368, "loss_cls": 0.33972, "acc": 91.13281, "loss_bbox": 0.25367, "loss": 0.70256, "time": 0.67699}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.02694, "memory": 3720, "data_time": 0.37036, "loss_rpn_cls": 0.08489, "loss_rpn_bbox": 0.03443, "loss_cls": 0.38027, "acc": 91.19238, "loss_bbox": 0.24279, "loss": 0.74238, "time": 0.67616}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.02994, "memory": 3720, "data_time": 0.38295, "loss_rpn_cls": 0.0862, "loss_rpn_bbox": 0.0382, "loss_cls": 0.37881, "acc": 90.98389, "loss_bbox": 0.25107, "loss": 0.75427, "time": 0.6844}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.03, "memory": 3720, "data_time": 0.37149, "loss_rpn_cls": 0.0816, "loss_rpn_bbox": 0.03348, "loss_cls": 0.34594, "acc": 91.84766, "loss_bbox": 0.21965, "loss": 0.68067, "time": 0.67693}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.03, "memory": 3720, "data_time": 0.39062, "loss_rpn_cls": 0.08033, "loss_rpn_bbox": 0.03414, "loss_cls": 0.33234, "acc": 91.78857, "loss_bbox": 0.21739, "loss": 0.6642, "time": 0.67931}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.03, "memory": 3720, "data_time": 0.38685, "loss_rpn_cls": 0.07539, "loss_rpn_bbox": 0.03342, "loss_cls": 0.35304, "acc": 91.00439, "loss_bbox": 0.23996, "loss": 0.70181, "time": 0.67352}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.03, "memory": 3720, "data_time": 0.38639, "loss_rpn_cls": 0.07508, "loss_rpn_bbox": 0.03354, "loss_cls": 0.31135, "acc": 91.91846, "loss_bbox": 0.20966, "loss": 0.62963, "time": 0.67901}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.03, "memory": 3720, "data_time": 0.38752, "loss_rpn_cls": 0.07409, "loss_rpn_bbox": 0.03271, "loss_cls": 0.30627, "acc": 92.09131, "loss_bbox": 0.20847, "loss": 0.62154, "time": 0.67668}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.03, "memory": 3720, "data_time": 0.38578, "loss_rpn_cls": 0.07326, "loss_rpn_bbox": 0.03224, "loss_cls": 0.34195, "acc": 90.96143, "loss_bbox": 0.23432, "loss": 0.68177, "time": 0.68947}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.03, "memory": 3720, "data_time": 0.37276, "loss_rpn_cls": 0.06963, "loss_rpn_bbox": 0.02914, "loss_cls": 0.33294, "acc": 91.13135, "loss_bbox": 0.23308, "loss": 0.66479, "time": 0.67196}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.03, "memory": 3720, "data_time": 0.37697, "loss_rpn_cls": 0.07555, "loss_rpn_bbox": 0.03394, "loss_cls": 0.33856, "acc": 91.17578, "loss_bbox": 0.22831, "loss": 0.67635, "time": 0.68953}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.03, "memory": 3720, "data_time": 0.36622, "loss_rpn_cls": 0.07027, "loss_rpn_bbox": 0.03173, "loss_cls": 0.32723, "acc": 91.09863, "loss_bbox": 0.23254, "loss": 0.66177, "time": 0.67299}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.03, "memory": 3720, "data_time": 0.37237, "loss_rpn_cls": 0.06628, "loss_rpn_bbox": 0.0323, "loss_cls": 0.33064, "acc": 90.90674, "loss_bbox": 0.23566, "loss": 0.66487, "time": 0.67726}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.03, "memory": 3720, "data_time": 0.38083, "loss_rpn_cls": 0.06743, "loss_rpn_bbox": 0.0317, "loss_cls": 0.3314, "acc": 90.84277, "loss_bbox": 0.24133, "loss": 0.67186, "time": 0.68359}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.03, "memory": 3720, "data_time": 0.39469, "loss_rpn_cls": 0.06556, "loss_rpn_bbox": 0.03012, "loss_cls": 0.30624, "acc": 91.64209, "loss_bbox": 0.21537, "loss": 0.61729, "time": 1.41101}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.03, "memory": 3720, "data_time": 0.38616, "loss_rpn_cls": 0.06621, "loss_rpn_bbox": 0.03241, "loss_cls": 0.31799, "acc": 91.24561, "loss_bbox": 0.22391, "loss": 0.64053, "time": 1.49633}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.03, "memory": 3720, "data_time": 0.38965, "loss_rpn_cls": 0.05987, "loss_rpn_bbox": 0.02964, "loss_cls": 0.32328, "acc": 90.82715, "loss_bbox": 0.23333, "loss": 0.64612, "time": 1.47766}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.03, "memory": 3720, "data_time": 0.39364, "loss_rpn_cls": 0.06302, "loss_rpn_bbox": 0.02997, "loss_cls": 0.30284, "acc": 91.37842, "loss_bbox": 0.21601, "loss": 0.61184, "time": 1.48751}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.03, "memory": 3720, "data_time": 0.38646, "loss_rpn_cls": 0.06443, "loss_rpn_bbox": 0.03084, "loss_cls": 0.30536, "acc": 91.36182, "loss_bbox": 0.22065, "loss": 0.62129, "time": 1.47851}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.03, "memory": 3720, "data_time": 0.37271, "loss_rpn_cls": 0.05616, "loss_rpn_bbox": 0.02748, "loss_cls": 0.30672, "acc": 91.45703, "loss_bbox": 0.21473, "loss": 0.60509, "time": 1.4884}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.03, "memory": 3720, "data_time": 0.37566, "loss_rpn_cls": 0.06201, "loss_rpn_bbox": 0.03142, "loss_cls": 0.308, "acc": 91.37354, "loss_bbox": 0.21937, "loss": 0.6208, "time": 1.47255}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.03, "memory": 3720, "data_time": 0.38599, "loss_rpn_cls": 0.05961, "loss_rpn_bbox": 0.02952, "loss_cls": 0.27774, "acc": 92.05566, "loss_bbox": 0.19902, "loss": 0.56589, "time": 1.47898}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.03, "memory": 3720, "data_time": 0.3797, "loss_rpn_cls": 0.05946, "loss_rpn_bbox": 0.02992, "loss_cls": 0.29723, "acc": 91.18213, "loss_bbox": 0.21793, "loss": 0.60454, "time": 1.48042}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.03, "memory": 3720, "data_time": 0.37955, "loss_rpn_cls": 0.05598, "loss_rpn_bbox": 0.02833, "loss_cls": 0.29581, "acc": 91.15186, "loss_bbox": 0.21682, "loss": 0.59694, "time": 1.48629}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.03, "memory": 3720, "data_time": 0.37337, "loss_rpn_cls": 0.05686, "loss_rpn_bbox": 0.03039, "loss_cls": 0.3202, "acc": 90.66943, "loss_bbox": 0.23156, "loss": 0.63901, "time": 1.48546}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 0.03, "memory": 3720, "data_time": 0.37213, "loss_rpn_cls": 0.05607, "loss_rpn_bbox": 0.02992, "loss_cls": 0.29678, "acc": 91.2793, "loss_bbox": 0.21633, "loss": 0.59911, "time": 1.48938}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.03, "memory": 3720, "data_time": 0.37642, "loss_rpn_cls": 0.05467, "loss_rpn_bbox": 0.03084, "loss_cls": 0.31023, "acc": 90.81592, "loss_bbox": 0.23012, "loss": 0.62586, "time": 1.48209}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 0.03, "memory": 3720, "data_time": 0.38724, "loss_rpn_cls": 0.06038, "loss_rpn_bbox": 0.03053, "loss_cls": 0.28328, "acc": 91.71924, "loss_bbox": 0.20701, "loss": 0.5812, "time": 1.48302}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.03, "memory": 3720, "data_time": 0.37743, "loss_rpn_cls": 0.05617, "loss_rpn_bbox": 0.03046, "loss_cls": 0.29537, "acc": 91.27246, "loss_bbox": 0.21744, "loss": 0.59944, "time": 1.49239}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 0.03, "memory": 3720, "data_time": 0.36226, "loss_rpn_cls": 0.05577, "loss_rpn_bbox": 0.02917, "loss_cls": 0.29271, "acc": 91.41016, "loss_bbox": 0.21063, "loss": 0.58827, "time": 1.47743}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 0.03, "memory": 3720, "data_time": 0.36948, "loss_rpn_cls": 0.05026, "loss_rpn_bbox": 0.02558, "loss_cls": 0.26725, "acc": 92.12988, "loss_bbox": 0.19749, "loss": 0.54058, "time": 1.46039}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 0.03, "memory": 3720, "data_time": 0.37312, "loss_rpn_cls": 0.05457, "loss_rpn_bbox": 0.02691, "loss_cls": 0.28085, "acc": 91.90967, "loss_bbox": 0.20073, "loss": 0.56306, "time": 1.47102}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 0.03, "memory": 3720, "data_time": 0.36499, "loss_rpn_cls": 0.06139, "loss_rpn_bbox": 0.02914, "loss_cls": 0.29936, "acc": 91.56934, "loss_bbox": 0.20884, "loss": 0.59874, "time": 1.47119}
{"mode": "train", "epoch": 1, "iter": 2050, "lr": 0.03, "memory": 3720, "data_time": 0.37598, "loss_rpn_cls": 0.05242, "loss_rpn_bbox": 0.02828, "loss_cls": 0.26677, "acc": 92.00195, "loss_bbox": 0.19471, "loss": 0.54218, "time": 1.47677}
{"mode": "train", "epoch": 1, "iter": 2100, "lr": 0.03, "memory": 3720, "data_time": 0.36696, "loss_rpn_cls": 0.05521, "loss_rpn_bbox": 0.02893, "loss_cls": 0.26974, "acc": 92.04297, "loss_bbox": 0.19604, "loss": 0.54992, "time": 1.46726}
{"mode": "train", "epoch": 1, "iter": 2150, "lr": 0.03, "memory": 3720, "data_time": 0.39033, "loss_rpn_cls": 0.05304, "loss_rpn_bbox": 0.02889, "loss_cls": 0.27758, "acc": 91.65918, "loss_bbox": 0.20932, "loss": 0.56883, "time": 1.48799}
{"mode": "train", "epoch": 1, "iter": 2200, "lr": 0.03, "memory": 3720, "data_time": 0.37495, "loss_rpn_cls": 0.05179, "loss_rpn_bbox": 0.02887, "loss_cls": 0.28161, "acc": 91.49951, "loss_bbox": 0.21296, "loss": 0.57524, "time": 1.49856}
{"mode": "train", "epoch": 1, "iter": 2250, "lr": 0.03, "memory": 3720, "data_time": 0.37591, "loss_rpn_cls": 0.05406, "loss_rpn_bbox": 0.02951, "loss_cls": 0.27631, "acc": 91.76904, "loss_bbox": 0.20587, "loss": 0.56576, "time": 1.48977}
{"mode": "train", "epoch": 1, "iter": 2300, "lr": 0.03, "memory": 3720, "data_time": 0.37805, "loss_rpn_cls": 0.05124, "loss_rpn_bbox": 0.02716, "loss_cls": 0.28233, "acc": 91.80273, "loss_bbox": 0.20366, "loss": 0.56438, "time": 1.49302}
{"mode": "train", "epoch": 1, "iter": 2350, "lr": 0.03, "memory": 3720, "data_time": 0.37922, "loss_rpn_cls": 0.05528, "loss_rpn_bbox": 0.02872, "loss_cls": 0.2868, "acc": 91.44824, "loss_bbox": 0.2089, "loss": 0.57969, "time": 1.48359}
{"mode": "train", "epoch": 1, "iter": 2400, "lr": 0.03, "memory": 3720, "data_time": 0.37429, "loss_rpn_cls": 0.05006, "loss_rpn_bbox": 0.03003, "loss_cls": 0.28791, "acc": 91.32959, "loss_bbox": 0.22117, "loss": 0.58918, "time": 1.46608}
{"mode": "train", "epoch": 1, "iter": 2450, "lr": 0.03, "memory": 3720, "data_time": 0.37132, "loss_rpn_cls": 0.05202, "loss_rpn_bbox": 0.02629, "loss_cls": 0.29201, "acc": 91.62695, "loss_bbox": 0.20394, "loss": 0.57426, "time": 1.47155}
{"mode": "train", "epoch": 1, "iter": 2500, "lr": 0.03, "memory": 3720, "data_time": 0.37626, "loss_rpn_cls": 0.05826, "loss_rpn_bbox": 0.03037, "loss_cls": 0.28727, "acc": 91.45459, "loss_bbox": 0.21435, "loss": 0.59025, "time": 1.48714}
{"mode": "train", "epoch": 1, "iter": 2550, "lr": 0.03, "memory": 3720, "data_time": 0.37044, "loss_rpn_cls": 0.05097, "loss_rpn_bbox": 0.03096, "loss_cls": 0.28788, "acc": 91.25049, "loss_bbox": 0.2206, "loss": 0.59041, "time": 1.48157}
{"mode": "train", "epoch": 1, "iter": 2600, "lr": 0.03, "memory": 3720, "data_time": 0.37565, "loss_rpn_cls": 0.04672, "loss_rpn_bbox": 0.02615, "loss_cls": 0.28082, "acc": 91.61328, "loss_bbox": 0.20494, "loss": 0.55863, "time": 1.4747}
{"mode": "train", "epoch": 1, "iter": 2650, "lr": 0.03, "memory": 3720, "data_time": 0.36948, "loss_rpn_cls": 0.0488, "loss_rpn_bbox": 0.02669, "loss_cls": 0.2662, "acc": 91.81006, "loss_bbox": 0.20271, "loss": 0.5444, "time": 1.47727}
{"mode": "train", "epoch": 1, "iter": 2700, "lr": 0.03, "memory": 3720, "data_time": 0.37065, "loss_rpn_cls": 0.04806, "loss_rpn_bbox": 0.02701, "loss_cls": 0.26293, "acc": 92.125, "loss_bbox": 0.20399, "loss": 0.542, "time": 1.47612}
{"mode": "train", "epoch": 1, "iter": 2750, "lr": 0.03, "memory": 3720, "data_time": 0.36409, "loss_rpn_cls": 0.0516, "loss_rpn_bbox": 0.02726, "loss_cls": 0.2534, "acc": 92.22168, "loss_bbox": 0.18793, "loss": 0.52019, "time": 1.48145}
{"mode": "train", "epoch": 1, "iter": 2800, "lr": 0.03, "memory": 3720, "data_time": 0.37749, "loss_rpn_cls": 0.05371, "loss_rpn_bbox": 0.02951, "loss_cls": 0.272, "acc": 92.06689, "loss_bbox": 0.19309, "loss": 0.54832, "time": 1.47171}
{"mode": "train", "epoch": 1, "iter": 2850, "lr": 0.03, "memory": 3720, "data_time": 0.38328, "loss_rpn_cls": 0.04935, "loss_rpn_bbox": 0.02694, "loss_cls": 0.27522, "acc": 91.68994, "loss_bbox": 0.20513, "loss": 0.55664, "time": 1.4788}
{"mode": "train", "epoch": 1, "iter": 2900, "lr": 0.03, "memory": 3720, "data_time": 0.36717, "loss_rpn_cls": 0.05223, "loss_rpn_bbox": 0.02958, "loss_cls": 0.28799, "acc": 91.26465, "loss_bbox": 0.21522, "loss": 0.58502, "time": 1.48009}
{"mode": "train", "epoch": 1, "iter": 2950, "lr": 0.03, "memory": 3720, "data_time": 0.36464, "loss_rpn_cls": 0.05145, "loss_rpn_bbox": 0.02623, "loss_cls": 0.27353, "acc": 91.99609, "loss_bbox": 0.1941, "loss": 0.54531, "time": 1.45894}
{"mode": "train", "epoch": 1, "iter": 3000, "lr": 0.03, "memory": 3720, "data_time": 0.36366, "loss_rpn_cls": 0.05113, "loss_rpn_bbox": 0.02746, "loss_cls": 0.2862, "acc": 91.1499, "loss_bbox": 0.21379, "loss": 0.57859, "time": 1.47777}
{"mode": "train", "epoch": 1, "iter": 3050, "lr": 0.03, "memory": 3720, "data_time": 0.36736, "loss_rpn_cls": 0.04764, "loss_rpn_bbox": 0.02655, "loss_cls": 0.27916, "acc": 91.36768, "loss_bbox": 0.20329, "loss": 0.55664, "time": 1.48548}
{"mode": "train", "epoch": 1, "iter": 3100, "lr": 0.03, "memory": 3720, "data_time": 0.366, "loss_rpn_cls": 0.0467, "loss_rpn_bbox": 0.02759, "loss_cls": 0.28206, "acc": 91.37354, "loss_bbox": 0.21155, "loss": 0.56791, "time": 1.49627}
{"mode": "train", "epoch": 1, "iter": 3150, "lr": 0.03, "memory": 3720, "data_time": 0.37319, "loss_rpn_cls": 0.04724, "loss_rpn_bbox": 0.0259, "loss_cls": 0.27253, "acc": 91.63721, "loss_bbox": 0.20835, "loss": 0.55402, "time": 1.4639}
{"mode": "train", "epoch": 1, "iter": 3200, "lr": 0.03, "memory": 3720, "data_time": 0.36936, "loss_rpn_cls": 0.04957, "loss_rpn_bbox": 0.029, "loss_cls": 0.28504, "acc": 91.27002, "loss_bbox": 0.21618, "loss": 0.57979, "time": 1.47272}
{"mode": "train", "epoch": 1, "iter": 3250, "lr": 0.03, "memory": 3720, "data_time": 0.36181, "loss_rpn_cls": 0.04541, "loss_rpn_bbox": 0.02532, "loss_cls": 0.27391, "acc": 91.82373, "loss_bbox": 0.20256, "loss": 0.5472, "time": 1.47911}
{"mode": "train", "epoch": 1, "iter": 3300, "lr": 0.03, "memory": 3720, "data_time": 0.36836, "loss_rpn_cls": 0.05074, "loss_rpn_bbox": 0.02741, "loss_cls": 0.28914, "acc": 91.13965, "loss_bbox": 0.21854, "loss": 0.58583, "time": 1.48064}
{"mode": "train", "epoch": 1, "iter": 3350, "lr": 0.03, "memory": 3720, "data_time": 0.379, "loss_rpn_cls": 0.0436, "loss_rpn_bbox": 0.02592, "loss_cls": 0.26287, "acc": 91.90283, "loss_bbox": 0.19964, "loss": 0.53203, "time": 1.47772}
{"mode": "train", "epoch": 1, "iter": 3400, "lr": 0.03, "memory": 3720, "data_time": 0.38912, "loss_rpn_cls": 0.04679, "loss_rpn_bbox": 0.0253, "loss_cls": 0.25587, "acc": 92.16455, "loss_bbox": 0.18808, "loss": 0.51604, "time": 1.49018}
{"mode": "train", "epoch": 1, "iter": 3450, "lr": 0.03, "memory": 3720, "data_time": 0.38025, "loss_rpn_cls": 0.0509, "loss_rpn_bbox": 0.02736, "loss_cls": 0.29091, "acc": 91.51123, "loss_bbox": 0.21004, "loss": 0.57921, "time": 1.48716}
{"mode": "train", "epoch": 1, "iter": 3500, "lr": 0.03, "memory": 3720, "data_time": 0.39194, "loss_rpn_cls": 0.05332, "loss_rpn_bbox": 0.02815, "loss_cls": 0.26519, "acc": 92.06543, "loss_bbox": 0.19652, "loss": 0.54317, "time": 1.49028}
{"mode": "train", "epoch": 1, "iter": 3550, "lr": 0.03, "memory": 3720, "data_time": 0.39138, "loss_rpn_cls": 0.04856, "loss_rpn_bbox": 0.02591, "loss_cls": 0.26831, "acc": 91.8667, "loss_bbox": 0.20547, "loss": 0.54826, "time": 1.48908}
{"mode": "train", "epoch": 1, "iter": 3600, "lr": 0.03, "memory": 3720, "data_time": 0.39369, "loss_rpn_cls": 0.04915, "loss_rpn_bbox": 0.02606, "loss_cls": 0.28289, "acc": 91.56738, "loss_bbox": 0.20622, "loss": 0.56432, "time": 1.49295}
{"mode": "train", "epoch": 1, "iter": 3650, "lr": 0.03, "memory": 3720, "data_time": 0.38758, "loss_rpn_cls": 0.0426, "loss_rpn_bbox": 0.02654, "loss_cls": 0.27923, "acc": 91.38428, "loss_bbox": 0.21494, "loss": 0.56332, "time": 1.49049}
{"mode": "train", "epoch": 1, "iter": 3700, "lr": 0.03, "memory": 3720, "data_time": 0.39599, "loss_rpn_cls": 0.05039, "loss_rpn_bbox": 0.02787, "loss_cls": 0.26891, "acc": 91.61523, "loss_bbox": 0.20574, "loss": 0.55291, "time": 1.49661}
{"mode": "train", "epoch": 1, "iter": 3750, "lr": 0.03, "memory": 3720, "data_time": 0.38736, "loss_rpn_cls": 0.04676, "loss_rpn_bbox": 0.02632, "loss_cls": 0.25877, "acc": 91.75342, "loss_bbox": 0.20206, "loss": 0.53392, "time": 1.47375}
{"mode": "val", "epoch": 1, "iter": 3750, "lr": 0.03, "bbox_mAP": 0.147, "bbox_mAP_50": 0.305, "bbox_mAP_75": 0.121, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.04, "bbox_mAP_l": 0.154, "bbox_mAP_copypaste": "0.147 0.305 0.121 -1.000 0.040 0.154"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.03, "memory": 3720, "data_time": 0.3876, "loss_rpn_cls": 0.04334, "loss_rpn_bbox": 0.0241, "loss_cls": 0.25905, "acc": 91.85938, "loss_bbox": 0.20301, "loss": 0.5295, "time": 1.48095}
