{"env_info": "sys.platform: linux\nPython: 3.7.9 (default, Aug 31 2020, 12:42:55) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.130\nGCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\nPyTorch: 1.6.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.5.0 (Git Hash e2ac1fac44c5078ca927cb9b90e1b3066a0b2ed0)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.7.0\nOpenCV: 4.4.0\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.2\nMMDetection: 2.12.0+", "config": "model = dict(\n    type='FasterRCNN',\n    pretrained='work_dirs/ipth/imagenet_resnet50_carafed_pretrained.pth',\n    backbone=dict(\n        type='ResNet_carafed',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=80,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))))\ntrain_cfg = dict(\n    rpn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.7,\n            neg_iou_thr=0.3,\n            min_pos_iou=0.3,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=256,\n            pos_fraction=0.5,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    rpn_proposal=dict(\n        nms_across_levels=False,\n        nms_pre=2000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0.5,\n            match_low_quality=False,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=512,\n            pos_fraction=0.25,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=True),\n        pos_weight=-1,\n        debug=False))\ntest_cfg = dict(\n    rpn=dict(\n        nms_across_levels=False,\n        nms_pre=1000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'CocoDataset'\ndata_root = '../data/coco/'\nannotations_root = '../data/coco/annotations/'\nimage_root = '../data/coco/'\nimg_scale = (1333, 800)\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=0,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/instances_train2017.json',\n        img_prefix='../data/coco/train2017',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/instances_val2017.json',\n        img_prefix='../data/coco/val2017',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/image_info_test-dev2017.json',\n        img_prefix='../data/coco/test2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = 'work_dirs/carafed_coco_faster_r50_1x/epoch_5.pth'\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/carafed_coco_faster_r50_1x'\ngpu_ids = range(0, 8)\n", "seed": null, "exp_name": "carafed_coco_faster_r50_1x.py"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.02, "memory": 8625, "data_time": 0.19508, "loss_rpn_cls": 0.03692, "loss_rpn_bbox": 0.05502, "loss_cls": 0.24967, "acc": 91.69507, "loss_bbox": 0.26625, "loss": 0.60786, "time": 0.62687}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.02, "memory": 8625, "data_time": 0.13792, "loss_rpn_cls": 0.03285, "loss_rpn_bbox": 0.05424, "loss_cls": 0.24934, "acc": 91.72607, "loss_bbox": 0.27436, "loss": 0.61079, "time": 0.52759}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 0.02, "memory": 8625, "data_time": 0.14209, "loss_rpn_cls": 0.03493, "loss_rpn_bbox": 0.05334, "loss_cls": 0.24029, "acc": 92.05005, "loss_bbox": 0.2569, "loss": 0.58546, "time": 0.52868}
{"mode": "train", "epoch": 6, "iter": 200, "lr": 0.02, "memory": 8625, "data_time": 0.13823, "loss_rpn_cls": 0.03458, "loss_rpn_bbox": 0.05411, "loss_cls": 0.23802, "acc": 92.12109, "loss_bbox": 0.25238, "loss": 0.57909, "time": 0.52222}
{"mode": "train", "epoch": 6, "iter": 250, "lr": 0.02, "memory": 8625, "data_time": 0.13574, "loss_rpn_cls": 0.03772, "loss_rpn_bbox": 0.05387, "loss_cls": 0.23629, "acc": 92.20776, "loss_bbox": 0.24988, "loss": 0.57776, "time": 0.52642}
{"mode": "train", "epoch": 6, "iter": 300, "lr": 0.02, "memory": 8625, "data_time": 0.13712, "loss_rpn_cls": 0.03572, "loss_rpn_bbox": 0.05567, "loss_cls": 0.2413, "acc": 91.9707, "loss_bbox": 0.25968, "loss": 0.59237, "time": 0.52932}
{"mode": "train", "epoch": 6, "iter": 350, "lr": 0.02, "memory": 8625, "data_time": 0.1435, "loss_rpn_cls": 0.03516, "loss_rpn_bbox": 0.05399, "loss_cls": 0.23488, "acc": 92.09668, "loss_bbox": 0.25796, "loss": 0.58199, "time": 0.53093}
{"mode": "train", "epoch": 6, "iter": 400, "lr": 0.02, "memory": 8625, "data_time": 0.15853, "loss_rpn_cls": 0.0367, "loss_rpn_bbox": 0.05599, "loss_cls": 0.24868, "acc": 91.68335, "loss_bbox": 0.26787, "loss": 0.60924, "time": 0.54258}
{"mode": "train", "epoch": 6, "iter": 450, "lr": 0.02, "memory": 8625, "data_time": 0.15564, "loss_rpn_cls": 0.03635, "loss_rpn_bbox": 0.05287, "loss_cls": 0.24622, "acc": 91.9043, "loss_bbox": 0.25513, "loss": 0.59057, "time": 0.54761}
{"mode": "train", "epoch": 6, "iter": 500, "lr": 0.02, "memory": 8625, "data_time": 0.15443, "loss_rpn_cls": 0.03402, "loss_rpn_bbox": 0.05481, "loss_cls": 0.24047, "acc": 92.06763, "loss_bbox": 0.25579, "loss": 0.58508, "time": 0.54131}
{"mode": "train", "epoch": 6, "iter": 550, "lr": 0.02, "memory": 8625, "data_time": 0.14772, "loss_rpn_cls": 0.03424, "loss_rpn_bbox": 0.04994, "loss_cls": 0.23599, "acc": 92.08423, "loss_bbox": 0.25253, "loss": 0.5727, "time": 0.54177}
{"mode": "train", "epoch": 6, "iter": 600, "lr": 0.02, "memory": 8625, "data_time": 0.15262, "loss_rpn_cls": 0.03903, "loss_rpn_bbox": 0.05269, "loss_cls": 0.24146, "acc": 92.01782, "loss_bbox": 0.26015, "loss": 0.59334, "time": 0.54246}
{"mode": "train", "epoch": 6, "iter": 650, "lr": 0.02, "memory": 8625, "data_time": 0.15464, "loss_rpn_cls": 0.03333, "loss_rpn_bbox": 0.05249, "loss_cls": 0.24014, "acc": 92.08423, "loss_bbox": 0.25698, "loss": 0.58294, "time": 0.54012}
{"mode": "train", "epoch": 6, "iter": 700, "lr": 0.02, "memory": 8625, "data_time": 0.14699, "loss_rpn_cls": 0.03725, "loss_rpn_bbox": 0.05632, "loss_cls": 0.25184, "acc": 91.64722, "loss_bbox": 0.26614, "loss": 0.61155, "time": 0.53701}
{"mode": "train", "epoch": 6, "iter": 750, "lr": 0.02, "memory": 8625, "data_time": 0.15102, "loss_rpn_cls": 0.03613, "loss_rpn_bbox": 0.05313, "loss_cls": 0.24571, "acc": 92.00488, "loss_bbox": 0.25475, "loss": 0.58972, "time": 0.5379}
{"mode": "train", "epoch": 6, "iter": 800, "lr": 0.02, "memory": 8625, "data_time": 0.15024, "loss_rpn_cls": 0.03429, "loss_rpn_bbox": 0.05458, "loss_cls": 0.24161, "acc": 91.97974, "loss_bbox": 0.26072, "loss": 0.59119, "time": 0.54425}
{"mode": "train", "epoch": 6, "iter": 850, "lr": 0.02, "memory": 8625, "data_time": 0.1526, "loss_rpn_cls": 0.0335, "loss_rpn_bbox": 0.05426, "loss_cls": 0.24479, "acc": 91.93433, "loss_bbox": 0.25981, "loss": 0.59236, "time": 0.54164}
{"mode": "train", "epoch": 6, "iter": 900, "lr": 0.02, "memory": 8625, "data_time": 0.15004, "loss_rpn_cls": 0.03523, "loss_rpn_bbox": 0.05552, "loss_cls": 0.24005, "acc": 92.02124, "loss_bbox": 0.25589, "loss": 0.58669, "time": 0.5408}
{"mode": "train", "epoch": 6, "iter": 950, "lr": 0.02, "memory": 8625, "data_time": 0.15396, "loss_rpn_cls": 0.03663, "loss_rpn_bbox": 0.05383, "loss_cls": 0.24051, "acc": 92.16211, "loss_bbox": 0.24944, "loss": 0.58042, "time": 0.53994}
{"mode": "train", "epoch": 6, "iter": 1000, "lr": 0.02, "memory": 8625, "data_time": 0.1513, "loss_rpn_cls": 0.0397, "loss_rpn_bbox": 0.0605, "loss_cls": 0.25732, "acc": 91.58105, "loss_bbox": 0.26933, "loss": 0.62684, "time": 0.54302}
{"mode": "train", "epoch": 6, "iter": 1050, "lr": 0.02, "memory": 8625, "data_time": 0.14872, "loss_rpn_cls": 0.03452, "loss_rpn_bbox": 0.05301, "loss_cls": 0.23564, "acc": 92.271, "loss_bbox": 0.24971, "loss": 0.57288, "time": 0.5393}
{"mode": "train", "epoch": 6, "iter": 1100, "lr": 0.02, "memory": 8625, "data_time": 0.14805, "loss_rpn_cls": 0.03466, "loss_rpn_bbox": 0.05307, "loss_cls": 0.24581, "acc": 91.94727, "loss_bbox": 0.25578, "loss": 0.58931, "time": 0.54023}
{"mode": "train", "epoch": 6, "iter": 1150, "lr": 0.02, "memory": 8625, "data_time": 0.15135, "loss_rpn_cls": 0.03542, "loss_rpn_bbox": 0.05587, "loss_cls": 0.24521, "acc": 91.94238, "loss_bbox": 0.26227, "loss": 0.59876, "time": 0.54174}
{"mode": "train", "epoch": 6, "iter": 1200, "lr": 0.02, "memory": 8625, "data_time": 0.14672, "loss_rpn_cls": 0.03723, "loss_rpn_bbox": 0.05523, "loss_cls": 0.23796, "acc": 92.18848, "loss_bbox": 0.25017, "loss": 0.5806, "time": 0.53697}
{"mode": "train", "epoch": 6, "iter": 1250, "lr": 0.02, "memory": 8625, "data_time": 0.15118, "loss_rpn_cls": 0.03223, "loss_rpn_bbox": 0.05075, "loss_cls": 0.23917, "acc": 92.09473, "loss_bbox": 0.25079, "loss": 0.57293, "time": 0.53719}
{"mode": "train", "epoch": 6, "iter": 1300, "lr": 0.02, "memory": 8625, "data_time": 0.15091, "loss_rpn_cls": 0.03608, "loss_rpn_bbox": 0.05662, "loss_cls": 0.2522, "acc": 91.71704, "loss_bbox": 0.26513, "loss": 0.61003, "time": 0.54104}
{"mode": "train", "epoch": 6, "iter": 1350, "lr": 0.02, "memory": 8625, "data_time": 0.14518, "loss_rpn_cls": 0.03776, "loss_rpn_bbox": 0.05598, "loss_cls": 0.24156, "acc": 92.0625, "loss_bbox": 0.25721, "loss": 0.59251, "time": 0.53942}
{"mode": "train", "epoch": 6, "iter": 1400, "lr": 0.02, "memory": 8625, "data_time": 0.14979, "loss_rpn_cls": 0.03626, "loss_rpn_bbox": 0.05418, "loss_cls": 0.24352, "acc": 92.10522, "loss_bbox": 0.25595, "loss": 0.58991, "time": 0.53982}
{"mode": "train", "epoch": 6, "iter": 1450, "lr": 0.02, "memory": 8625, "data_time": 0.14755, "loss_rpn_cls": 0.03701, "loss_rpn_bbox": 0.05546, "loss_cls": 0.23905, "acc": 92.10229, "loss_bbox": 0.25681, "loss": 0.58834, "time": 0.53924}
{"mode": "train", "epoch": 6, "iter": 1500, "lr": 0.02, "memory": 8625, "data_time": 0.14972, "loss_rpn_cls": 0.0346, "loss_rpn_bbox": 0.05334, "loss_cls": 0.24065, "acc": 92.08667, "loss_bbox": 0.25755, "loss": 0.58613, "time": 0.54033}
{"mode": "train", "epoch": 6, "iter": 1550, "lr": 0.02, "memory": 8625, "data_time": 0.15352, "loss_rpn_cls": 0.03579, "loss_rpn_bbox": 0.05058, "loss_cls": 0.24014, "acc": 92.12476, "loss_bbox": 0.25162, "loss": 0.57813, "time": 0.54083}
