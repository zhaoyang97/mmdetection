{"env_info": "sys.platform: linux\nPython: 3.7.9 (default, Aug 31 2020, 12:42:55) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.130\nGCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\nPyTorch: 1.6.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.5.0 (Git Hash e2ac1fac44c5078ca927cb9b90e1b3066a0b2ed0)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.7.0\nOpenCV: 4.4.0\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.2\nMMDetection: 2.12.0+", "config": "model = dict(\n    type='FasterRCNN',\n    pretrained=\n    'work_dirs/imagenet_resnet50_carafed/imagenet_resnet50_carafed_pretrained.pth',\n    backbone=dict(\n        type='ResNet_carafed',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=80,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))))\ntrain_cfg = dict(\n    rpn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.7,\n            neg_iou_thr=0.3,\n            min_pos_iou=0.3,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=256,\n            pos_fraction=0.5,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    rpn_proposal=dict(\n        nms_across_levels=False,\n        nms_pre=2000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0.5,\n            match_low_quality=False,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=512,\n            pos_fraction=0.25,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=True),\n        pos_weight=-1,\n        debug=False))\ntest_cfg = dict(\n    rpn=dict(\n        nms_across_levels=False,\n        nms_pre=1000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'CocoDataset'\ndata_root = '../data/coco/'\nannotations_root = '../data/coco/annotations/'\nimage_root = '../data/coco/'\nimg_scale = (1333, 800)\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=0,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/instances_train2017.json',\n        img_prefix='../data/coco/train2017',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/instances_val2017.json',\n        img_prefix='../data/coco/val2017',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/image_info_test-dev2017.json',\n        img_prefix='../data/coco/test2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/carafed_coco_faster_r50_1x'\ngpu_ids = range(0, 8)\n", "seed": null, "exp_name": "carafed_coco_faster_r50_1x.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 8626, "data_time": 0.20964, "loss_rpn_cls": 0.52108, "loss_rpn_bbox": 0.10223, "loss_cls": 1.10368, "acc": 86.50464, "loss_bbox": 0.14589, "loss": 1.87288, "time": 0.6308}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 8626, "data_time": 0.14606, "loss_rpn_cls": 0.22393, "loss_rpn_bbox": 0.0946, "loss_cls": 0.45719, "acc": 94.01147, "loss_bbox": 0.22725, "loss": 1.00297, "time": 0.53984}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 8626, "data_time": 0.15525, "loss_rpn_cls": 0.18477, "loss_rpn_bbox": 0.09489, "loss_cls": 0.50648, "acc": 93.40845, "loss_bbox": 0.24351, "loss": 1.02965, "time": 0.55857}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 8626, "data_time": 0.1668, "loss_rpn_cls": 0.16584, "loss_rpn_bbox": 0.09833, "loss_cls": 0.50585, "acc": 92.30078, "loss_bbox": 0.28362, "loss": 1.05365, "time": 0.57478}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 8626, "data_time": 0.15575, "loss_rpn_cls": 0.14523, "loss_rpn_bbox": 0.09839, "loss_cls": 0.49863, "acc": 91.53638, "loss_bbox": 0.3109, "loss": 1.05316, "time": 0.55985}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 8626, "data_time": 0.1593, "loss_rpn_cls": 0.12002, "loss_rpn_bbox": 0.09069, "loss_cls": 0.52758, "acc": 91.05884, "loss_bbox": 0.33377, "loss": 1.07205, "time": 0.56385}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 8626, "data_time": 0.15937, "loss_rpn_cls": 0.10862, "loss_rpn_bbox": 0.08732, "loss_cls": 0.51581, "acc": 90.95557, "loss_bbox": 0.34271, "loss": 1.05447, "time": 0.55711}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 8626, "data_time": 0.15482, "loss_rpn_cls": 0.11203, "loss_rpn_bbox": 0.09035, "loss_cls": 0.52995, "acc": 90.27734, "loss_bbox": 0.36431, "loss": 1.09664, "time": 0.55328}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 8626, "data_time": 0.15486, "loss_rpn_cls": 0.10129, "loss_rpn_bbox": 0.0869, "loss_cls": 0.52328, "acc": 90.00122, "loss_bbox": 0.37867, "loss": 1.09014, "time": 0.54721}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 8626, "data_time": 0.15817, "loss_rpn_cls": 0.09244, "loss_rpn_bbox": 0.08207, "loss_cls": 0.50768, "acc": 89.8689, "loss_bbox": 0.38616, "loss": 1.06834, "time": 0.55173}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 8626, "data_time": 0.15921, "loss_rpn_cls": 0.093, "loss_rpn_bbox": 0.08016, "loss_cls": 0.50508, "acc": 89.8457, "loss_bbox": 0.38865, "loss": 1.06689, "time": 0.55395}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 8626, "data_time": 0.15627, "loss_rpn_cls": 0.09476, "loss_rpn_bbox": 0.08181, "loss_cls": 0.49139, "acc": 89.86377, "loss_bbox": 0.37818, "loss": 1.04614, "time": 0.55743}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 8626, "data_time": 0.15673, "loss_rpn_cls": 0.09092, "loss_rpn_bbox": 0.08662, "loss_cls": 0.48096, "acc": 89.68555, "loss_bbox": 0.38123, "loss": 1.03973, "time": 0.55372}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 8626, "data_time": 0.16424, "loss_rpn_cls": 0.08861, "loss_rpn_bbox": 0.08225, "loss_cls": 0.48057, "acc": 89.16992, "loss_bbox": 0.39789, "loss": 1.04933, "time": 0.56401}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 8626, "data_time": 0.15806, "loss_rpn_cls": 0.0855, "loss_rpn_bbox": 0.08234, "loss_cls": 0.45987, "acc": 89.40527, "loss_bbox": 0.38637, "loss": 1.01408, "time": 0.55816}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 8626, "data_time": 0.16208, "loss_rpn_cls": 0.08174, "loss_rpn_bbox": 0.08234, "loss_cls": 0.46498, "acc": 89.39355, "loss_bbox": 0.38007, "loss": 1.00913, "time": 0.55959}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.02, "memory": 8626, "data_time": 0.16734, "loss_rpn_cls": 0.07809, "loss_rpn_bbox": 0.07807, "loss_cls": 0.44002, "acc": 89.81006, "loss_bbox": 0.36995, "loss": 0.96612, "time": 0.55968}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.02, "memory": 8626, "data_time": 0.15857, "loss_rpn_cls": 0.0795, "loss_rpn_bbox": 0.07861, "loss_cls": 0.44747, "acc": 89.53125, "loss_bbox": 0.37884, "loss": 0.98442, "time": 0.56121}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.02, "memory": 8626, "data_time": 0.16013, "loss_rpn_cls": 0.07982, "loss_rpn_bbox": 0.07734, "loss_cls": 0.43916, "acc": 89.62476, "loss_bbox": 0.37075, "loss": 0.96708, "time": 0.55909}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.02, "memory": 8626, "data_time": 0.16043, "loss_rpn_cls": 0.07539, "loss_rpn_bbox": 0.07625, "loss_cls": 0.42426, "acc": 89.54419, "loss_bbox": 0.37494, "loss": 0.95085, "time": 0.55671}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.02, "memory": 8626, "data_time": 0.16214, "loss_rpn_cls": 0.07589, "loss_rpn_bbox": 0.07613, "loss_cls": 0.42208, "acc": 89.71851, "loss_bbox": 0.36428, "loss": 0.93838, "time": 0.55407}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.02, "memory": 8626, "data_time": 0.16163, "loss_rpn_cls": 0.07015, "loss_rpn_bbox": 0.07307, "loss_cls": 0.40563, "acc": 89.75415, "loss_bbox": 0.36705, "loss": 0.9159, "time": 0.5632}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.02, "memory": 8626, "data_time": 0.16054, "loss_rpn_cls": 0.07495, "loss_rpn_bbox": 0.07986, "loss_cls": 0.43249, "acc": 89.09644, "loss_bbox": 0.38536, "loss": 0.97266, "time": 0.55685}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.02, "memory": 8626, "data_time": 0.16647, "loss_rpn_cls": 0.07978, "loss_rpn_bbox": 0.07953, "loss_cls": 0.41771, "acc": 89.22485, "loss_bbox": 0.377, "loss": 0.95403, "time": 0.55834}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.02, "memory": 8626, "data_time": 0.16022, "loss_rpn_cls": 0.06913, "loss_rpn_bbox": 0.07215, "loss_cls": 0.40363, "acc": 89.98438, "loss_bbox": 0.35183, "loss": 0.89674, "time": 0.56046}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.02, "memory": 8626, "data_time": 0.15671, "loss_rpn_cls": 0.06874, "loss_rpn_bbox": 0.07303, "loss_cls": 0.38953, "acc": 89.9231, "loss_bbox": 0.35559, "loss": 0.88689, "time": 0.55974}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.02, "memory": 8626, "data_time": 0.15794, "loss_rpn_cls": 0.08159, "loss_rpn_bbox": 0.07959, "loss_cls": 0.39744, "acc": 89.6709, "loss_bbox": 0.35653, "loss": 0.91515, "time": 0.55974}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.02, "memory": 8626, "data_time": 0.16087, "loss_rpn_cls": 0.0723, "loss_rpn_bbox": 0.07311, "loss_cls": 0.37274, "acc": 90.34351, "loss_bbox": 0.34258, "loss": 0.86073, "time": 0.55753}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.02, "memory": 8626, "data_time": 0.16458, "loss_rpn_cls": 0.06796, "loss_rpn_bbox": 0.07408, "loss_cls": 0.3818, "acc": 89.56982, "loss_bbox": 0.37025, "loss": 0.89408, "time": 0.56098}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.02, "memory": 8626, "data_time": 0.16232, "loss_rpn_cls": 0.07842, "loss_rpn_bbox": 0.08146, "loss_cls": 0.37789, "acc": 89.91333, "loss_bbox": 0.35687, "loss": 0.89465, "time": 0.55938}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.02, "memory": 8626, "data_time": 0.16244, "loss_rpn_cls": 0.06504, "loss_rpn_bbox": 0.07393, "loss_cls": 0.38422, "acc": 89.87988, "loss_bbox": 0.35595, "loss": 0.87915, "time": 0.55606}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.02, "memory": 8626, "data_time": 0.16199, "loss_rpn_cls": 0.07004, "loss_rpn_bbox": 0.07566, "loss_cls": 0.38306, "acc": 89.70947, "loss_bbox": 0.35394, "loss": 0.8827, "time": 0.55906}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 0.02, "memory": 8626, "data_time": 0.16224, "loss_rpn_cls": 0.06753, "loss_rpn_bbox": 0.07488, "loss_cls": 0.35953, "acc": 90.30371, "loss_bbox": 0.34135, "loss": 0.84329, "time": 0.55842}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.02, "memory": 8626, "data_time": 0.16118, "loss_rpn_cls": 0.07088, "loss_rpn_bbox": 0.07087, "loss_cls": 0.38745, "acc": 89.59131, "loss_bbox": 0.35813, "loss": 0.88732, "time": 0.56022}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 0.02, "memory": 8626, "data_time": 0.16113, "loss_rpn_cls": 0.07045, "loss_rpn_bbox": 0.07582, "loss_cls": 0.38351, "acc": 89.59814, "loss_bbox": 0.36073, "loss": 0.89051, "time": 0.55706}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.02, "memory": 8626, "data_time": 0.16578, "loss_rpn_cls": 0.06856, "loss_rpn_bbox": 0.07603, "loss_cls": 0.37003, "acc": 89.9978, "loss_bbox": 0.34721, "loss": 0.86182, "time": 0.559}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 0.02, "memory": 8626, "data_time": 0.1612, "loss_rpn_cls": 0.06713, "loss_rpn_bbox": 0.07566, "loss_cls": 0.37259, "acc": 89.69604, "loss_bbox": 0.35666, "loss": 0.87204, "time": 0.5588}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 0.02, "memory": 8626, "data_time": 0.15906, "loss_rpn_cls": 0.06535, "loss_rpn_bbox": 0.07392, "loss_cls": 0.35635, "acc": 90.18311, "loss_bbox": 0.33865, "loss": 0.83427, "time": 0.55828}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 0.02, "memory": 8626, "data_time": 0.16614, "loss_rpn_cls": 0.06389, "loss_rpn_bbox": 0.07411, "loss_cls": 0.35633, "acc": 89.99683, "loss_bbox": 0.34021, "loss": 0.83454, "time": 0.56019}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 0.02, "memory": 8626, "data_time": 0.1627, "loss_rpn_cls": 0.06457, "loss_rpn_bbox": 0.06991, "loss_cls": 0.37354, "acc": 89.81763, "loss_bbox": 0.34726, "loss": 0.85528, "time": 0.55721}
{"mode": "train", "epoch": 1, "iter": 2050, "lr": 0.02, "memory": 8626, "data_time": 0.16115, "loss_rpn_cls": 0.06578, "loss_rpn_bbox": 0.0732, "loss_cls": 0.36595, "acc": 89.87061, "loss_bbox": 0.34717, "loss": 0.8521, "time": 0.55667}
{"mode": "train", "epoch": 1, "iter": 2100, "lr": 0.02, "memory": 8626, "data_time": 0.16207, "loss_rpn_cls": 0.06246, "loss_rpn_bbox": 0.0691, "loss_cls": 0.34695, "acc": 90.17114, "loss_bbox": 0.33675, "loss": 0.81527, "time": 0.56162}
{"mode": "train", "epoch": 1, "iter": 2150, "lr": 0.02, "memory": 8626, "data_time": 0.15929, "loss_rpn_cls": 0.06311, "loss_rpn_bbox": 0.07013, "loss_cls": 0.35389, "acc": 90.16406, "loss_bbox": 0.33806, "loss": 0.82519, "time": 0.55853}
{"mode": "train", "epoch": 1, "iter": 2200, "lr": 0.02, "memory": 8626, "data_time": 0.16355, "loss_rpn_cls": 0.07205, "loss_rpn_bbox": 0.07538, "loss_cls": 0.36029, "acc": 90.10278, "loss_bbox": 0.33701, "loss": 0.84474, "time": 0.55627}
{"mode": "train", "epoch": 1, "iter": 2250, "lr": 0.02, "memory": 8626, "data_time": 0.16248, "loss_rpn_cls": 0.06194, "loss_rpn_bbox": 0.07131, "loss_cls": 0.35078, "acc": 90.2041, "loss_bbox": 0.33225, "loss": 0.81628, "time": 0.55769}
{"mode": "train", "epoch": 1, "iter": 2300, "lr": 0.02, "memory": 8626, "data_time": 0.15743, "loss_rpn_cls": 0.06654, "loss_rpn_bbox": 0.07407, "loss_cls": 0.36318, "acc": 89.86914, "loss_bbox": 0.35256, "loss": 0.85634, "time": 0.55665}
{"mode": "train", "epoch": 1, "iter": 2350, "lr": 0.02, "memory": 8626, "data_time": 0.16051, "loss_rpn_cls": 0.06489, "loss_rpn_bbox": 0.07276, "loss_cls": 0.35192, "acc": 90.17627, "loss_bbox": 0.33205, "loss": 0.82161, "time": 0.56471}
{"mode": "train", "epoch": 1, "iter": 2400, "lr": 0.02, "memory": 8626, "data_time": 0.15728, "loss_rpn_cls": 0.06256, "loss_rpn_bbox": 0.07181, "loss_cls": 0.35154, "acc": 90.08984, "loss_bbox": 0.33211, "loss": 0.81802, "time": 0.56498}
{"mode": "train", "epoch": 1, "iter": 2450, "lr": 0.02, "memory": 8626, "data_time": 0.1615, "loss_rpn_cls": 0.07041, "loss_rpn_bbox": 0.07008, "loss_cls": 0.34843, "acc": 90.1106, "loss_bbox": 0.33666, "loss": 0.82558, "time": 0.56056}
{"mode": "train", "epoch": 1, "iter": 2500, "lr": 0.02, "memory": 8626, "data_time": 0.14949, "loss_rpn_cls": 0.06008, "loss_rpn_bbox": 0.06927, "loss_cls": 0.34273, "acc": 90.39795, "loss_bbox": 0.33049, "loss": 0.80257, "time": 0.5615}
{"mode": "train", "epoch": 1, "iter": 2550, "lr": 0.02, "memory": 8626, "data_time": 0.15936, "loss_rpn_cls": 0.06384, "loss_rpn_bbox": 0.07006, "loss_cls": 0.34888, "acc": 90.03174, "loss_bbox": 0.33914, "loss": 0.82191, "time": 0.55507}
{"mode": "train", "epoch": 1, "iter": 2600, "lr": 0.02, "memory": 8626, "data_time": 0.15852, "loss_rpn_cls": 0.05858, "loss_rpn_bbox": 0.06781, "loss_cls": 0.34952, "acc": 89.98657, "loss_bbox": 0.34036, "loss": 0.81627, "time": 0.55688}
{"mode": "train", "epoch": 1, "iter": 2650, "lr": 0.02, "memory": 8626, "data_time": 0.16071, "loss_rpn_cls": 0.06046, "loss_rpn_bbox": 0.07115, "loss_cls": 0.35045, "acc": 89.87988, "loss_bbox": 0.34524, "loss": 0.8273, "time": 0.55815}
{"mode": "train", "epoch": 1, "iter": 2700, "lr": 0.02, "memory": 8626, "data_time": 0.16191, "loss_rpn_cls": 0.06248, "loss_rpn_bbox": 0.07183, "loss_cls": 0.35597, "acc": 90.02954, "loss_bbox": 0.3365, "loss": 0.82677, "time": 0.5623}
{"mode": "train", "epoch": 1, "iter": 2750, "lr": 0.02, "memory": 8626, "data_time": 0.16212, "loss_rpn_cls": 0.06364, "loss_rpn_bbox": 0.0686, "loss_cls": 0.33315, "acc": 90.51343, "loss_bbox": 0.32513, "loss": 0.79051, "time": 0.56147}
{"mode": "train", "epoch": 1, "iter": 2800, "lr": 0.02, "memory": 8626, "data_time": 0.16401, "loss_rpn_cls": 0.06354, "loss_rpn_bbox": 0.06889, "loss_cls": 0.33273, "acc": 90.53784, "loss_bbox": 0.32141, "loss": 0.78658, "time": 0.56004}
{"mode": "train", "epoch": 1, "iter": 2850, "lr": 0.02, "memory": 8626, "data_time": 0.16225, "loss_rpn_cls": 0.06104, "loss_rpn_bbox": 0.07093, "loss_cls": 0.33639, "acc": 90.37622, "loss_bbox": 0.32915, "loss": 0.79752, "time": 0.56184}
{"mode": "train", "epoch": 1, "iter": 2900, "lr": 0.02, "memory": 8626, "data_time": 0.16005, "loss_rpn_cls": 0.0577, "loss_rpn_bbox": 0.06795, "loss_cls": 0.34096, "acc": 90.24316, "loss_bbox": 0.33262, "loss": 0.79924, "time": 0.55572}
{"mode": "train", "epoch": 1, "iter": 2950, "lr": 0.02, "memory": 8626, "data_time": 0.16749, "loss_rpn_cls": 0.06447, "loss_rpn_bbox": 0.07149, "loss_cls": 0.34041, "acc": 90.36035, "loss_bbox": 0.32366, "loss": 0.80003, "time": 0.56192}
{"mode": "train", "epoch": 1, "iter": 3000, "lr": 0.02, "memory": 8626, "data_time": 0.15529, "loss_rpn_cls": 0.06563, "loss_rpn_bbox": 0.07629, "loss_cls": 0.34317, "acc": 90.33618, "loss_bbox": 0.32791, "loss": 0.81299, "time": 0.55574}
{"mode": "train", "epoch": 1, "iter": 3050, "lr": 0.02, "memory": 8626, "data_time": 0.15909, "loss_rpn_cls": 0.06438, "loss_rpn_bbox": 0.06908, "loss_cls": 0.34669, "acc": 90.01758, "loss_bbox": 0.33693, "loss": 0.81708, "time": 0.55795}
{"mode": "train", "epoch": 1, "iter": 3100, "lr": 0.02, "memory": 8626, "data_time": 0.1547, "loss_rpn_cls": 0.05863, "loss_rpn_bbox": 0.06752, "loss_cls": 0.34357, "acc": 90.08447, "loss_bbox": 0.33285, "loss": 0.80256, "time": 0.55722}
{"mode": "train", "epoch": 1, "iter": 3150, "lr": 0.02, "memory": 8626, "data_time": 0.16042, "loss_rpn_cls": 0.05882, "loss_rpn_bbox": 0.0712, "loss_cls": 0.33767, "acc": 90.43237, "loss_bbox": 0.32294, "loss": 0.79064, "time": 0.55829}
{"mode": "train", "epoch": 1, "iter": 3200, "lr": 0.02, "memory": 8626, "data_time": 0.16146, "loss_rpn_cls": 0.0634, "loss_rpn_bbox": 0.07022, "loss_cls": 0.33516, "acc": 90.50854, "loss_bbox": 0.32612, "loss": 0.79491, "time": 0.55609}
{"mode": "train", "epoch": 1, "iter": 3250, "lr": 0.02, "memory": 8626, "data_time": 0.15922, "loss_rpn_cls": 0.05711, "loss_rpn_bbox": 0.0681, "loss_cls": 0.34419, "acc": 89.84326, "loss_bbox": 0.3422, "loss": 0.8116, "time": 0.55653}
{"mode": "train", "epoch": 1, "iter": 3300, "lr": 0.02, "memory": 8626, "data_time": 0.1615, "loss_rpn_cls": 0.06003, "loss_rpn_bbox": 0.07106, "loss_cls": 0.35025, "acc": 90.0061, "loss_bbox": 0.33765, "loss": 0.81898, "time": 0.56308}
{"mode": "train", "epoch": 1, "iter": 3350, "lr": 0.02, "memory": 8626, "data_time": 0.15684, "loss_rpn_cls": 0.06557, "loss_rpn_bbox": 0.06623, "loss_cls": 0.33431, "acc": 90.36523, "loss_bbox": 0.32086, "loss": 0.78697, "time": 0.55168}
{"mode": "train", "epoch": 1, "iter": 3400, "lr": 0.02, "memory": 8626, "data_time": 0.1515, "loss_rpn_cls": 0.06542, "loss_rpn_bbox": 0.07267, "loss_cls": 0.32423, "acc": 90.37256, "loss_bbox": 0.32772, "loss": 0.79004, "time": 0.55547}
{"mode": "train", "epoch": 1, "iter": 3450, "lr": 0.02, "memory": 8626, "data_time": 0.15948, "loss_rpn_cls": 0.0617, "loss_rpn_bbox": 0.07221, "loss_cls": 0.34076, "acc": 90.29858, "loss_bbox": 0.32905, "loss": 0.80371, "time": 0.55828}
{"mode": "train", "epoch": 1, "iter": 3500, "lr": 0.02, "memory": 8626, "data_time": 0.15872, "loss_rpn_cls": 0.05943, "loss_rpn_bbox": 0.0676, "loss_cls": 0.33016, "acc": 90.36597, "loss_bbox": 0.32704, "loss": 0.78422, "time": 0.56585}
{"mode": "train", "epoch": 1, "iter": 3550, "lr": 0.02, "memory": 8626, "data_time": 0.16213, "loss_rpn_cls": 0.05756, "loss_rpn_bbox": 0.06786, "loss_cls": 0.33579, "acc": 90.28223, "loss_bbox": 0.32902, "loss": 0.79023, "time": 0.56275}
{"mode": "train", "epoch": 1, "iter": 3600, "lr": 0.02, "memory": 8626, "data_time": 0.15904, "loss_rpn_cls": 0.0599, "loss_rpn_bbox": 0.06521, "loss_cls": 0.33246, "acc": 90.15649, "loss_bbox": 0.32617, "loss": 0.78375, "time": 0.56274}
{"mode": "train", "epoch": 1, "iter": 3650, "lr": 0.02, "memory": 8626, "data_time": 0.16371, "loss_rpn_cls": 0.05936, "loss_rpn_bbox": 0.07144, "loss_cls": 0.33807, "acc": 90.08667, "loss_bbox": 0.33198, "loss": 0.80085, "time": 0.55833}
{"mode": "train", "epoch": 1, "iter": 3700, "lr": 0.02, "memory": 8626, "data_time": 0.15832, "loss_rpn_cls": 0.05805, "loss_rpn_bbox": 0.06809, "loss_cls": 0.32643, "acc": 90.34473, "loss_bbox": 0.32778, "loss": 0.78035, "time": 0.55684}
{"mode": "train", "epoch": 1, "iter": 3750, "lr": 0.02, "memory": 8626, "data_time": 0.1577, "loss_rpn_cls": 0.06069, "loss_rpn_bbox": 0.07331, "loss_cls": 0.34741, "acc": 89.72095, "loss_bbox": 0.3463, "loss": 0.8277, "time": 0.55376}
{"mode": "train", "epoch": 1, "iter": 3800, "lr": 0.02, "memory": 8626, "data_time": 0.16162, "loss_rpn_cls": 0.05646, "loss_rpn_bbox": 0.06789, "loss_cls": 0.34409, "acc": 90.2373, "loss_bbox": 0.32394, "loss": 0.79237, "time": 0.5567}
{"mode": "train", "epoch": 1, "iter": 3850, "lr": 0.02, "memory": 8626, "data_time": 0.16518, "loss_rpn_cls": 0.05964, "loss_rpn_bbox": 0.07005, "loss_cls": 0.33393, "acc": 90.31567, "loss_bbox": 0.3233, "loss": 0.78692, "time": 0.56166}
{"mode": "train", "epoch": 1, "iter": 3900, "lr": 0.02, "memory": 8626, "data_time": 0.16125, "loss_rpn_cls": 0.05444, "loss_rpn_bbox": 0.06573, "loss_cls": 0.34262, "acc": 89.94141, "loss_bbox": 0.33727, "loss": 0.80006, "time": 0.55633}
{"mode": "train", "epoch": 1, "iter": 3950, "lr": 0.02, "memory": 8626, "data_time": 0.15461, "loss_rpn_cls": 0.05486, "loss_rpn_bbox": 0.06545, "loss_cls": 0.3258, "acc": 90.53931, "loss_bbox": 0.31963, "loss": 0.76575, "time": 0.55742}
{"mode": "train", "epoch": 1, "iter": 4000, "lr": 0.02, "memory": 8626, "data_time": 0.16086, "loss_rpn_cls": 0.05623, "loss_rpn_bbox": 0.06722, "loss_cls": 0.32217, "acc": 90.65723, "loss_bbox": 0.31404, "loss": 0.75966, "time": 0.55296}
{"mode": "train", "epoch": 1, "iter": 4050, "lr": 0.02, "memory": 8626, "data_time": 0.16102, "loss_rpn_cls": 0.05529, "loss_rpn_bbox": 0.06809, "loss_cls": 0.31958, "acc": 90.56055, "loss_bbox": 0.3159, "loss": 0.75886, "time": 0.55564}
{"mode": "train", "epoch": 1, "iter": 4100, "lr": 0.02, "memory": 8626, "data_time": 0.1552, "loss_rpn_cls": 0.0603, "loss_rpn_bbox": 0.06813, "loss_cls": 0.31351, "acc": 90.73193, "loss_bbox": 0.30853, "loss": 0.75047, "time": 0.56181}
{"mode": "train", "epoch": 1, "iter": 4150, "lr": 0.02, "memory": 8626, "data_time": 0.15833, "loss_rpn_cls": 0.05929, "loss_rpn_bbox": 0.06802, "loss_cls": 0.32728, "acc": 90.11865, "loss_bbox": 0.32712, "loss": 0.7817, "time": 0.56477}
{"mode": "train", "epoch": 1, "iter": 4200, "lr": 0.02, "memory": 8626, "data_time": 0.15896, "loss_rpn_cls": 0.05842, "loss_rpn_bbox": 0.06606, "loss_cls": 0.32836, "acc": 90.60303, "loss_bbox": 0.32067, "loss": 0.77351, "time": 0.55778}
{"mode": "train", "epoch": 1, "iter": 4250, "lr": 0.02, "memory": 8626, "data_time": 0.15735, "loss_rpn_cls": 0.05725, "loss_rpn_bbox": 0.06785, "loss_cls": 0.32786, "acc": 90.37012, "loss_bbox": 0.32306, "loss": 0.77601, "time": 0.55161}
{"mode": "train", "epoch": 1, "iter": 4300, "lr": 0.02, "memory": 8626, "data_time": 0.15772, "loss_rpn_cls": 0.05634, "loss_rpn_bbox": 0.0661, "loss_cls": 0.31785, "acc": 90.45117, "loss_bbox": 0.32775, "loss": 0.76804, "time": 0.55773}
{"mode": "train", "epoch": 1, "iter": 4350, "lr": 0.02, "memory": 8626, "data_time": 0.15826, "loss_rpn_cls": 0.05939, "loss_rpn_bbox": 0.06343, "loss_cls": 0.3085, "acc": 90.89819, "loss_bbox": 0.30763, "loss": 0.73895, "time": 0.55565}
{"mode": "train", "epoch": 1, "iter": 4400, "lr": 0.02, "memory": 8626, "data_time": 0.15317, "loss_rpn_cls": 0.06107, "loss_rpn_bbox": 0.06715, "loss_cls": 0.31919, "acc": 90.70361, "loss_bbox": 0.3134, "loss": 0.76081, "time": 0.55856}
{"mode": "train", "epoch": 1, "iter": 4450, "lr": 0.02, "memory": 8626, "data_time": 0.15417, "loss_rpn_cls": 0.05675, "loss_rpn_bbox": 0.06352, "loss_cls": 0.32409, "acc": 90.42017, "loss_bbox": 0.31796, "loss": 0.76232, "time": 0.5559}
{"mode": "train", "epoch": 1, "iter": 4500, "lr": 0.02, "memory": 8626, "data_time": 0.15763, "loss_rpn_cls": 0.05393, "loss_rpn_bbox": 0.0657, "loss_cls": 0.30886, "acc": 90.68311, "loss_bbox": 0.31517, "loss": 0.74366, "time": 0.55468}
{"mode": "train", "epoch": 1, "iter": 4550, "lr": 0.02, "memory": 8626, "data_time": 0.15565, "loss_rpn_cls": 0.05392, "loss_rpn_bbox": 0.06409, "loss_cls": 0.30307, "acc": 91.0166, "loss_bbox": 0.29846, "loss": 0.71953, "time": 0.55599}
{"mode": "train", "epoch": 1, "iter": 4600, "lr": 0.02, "memory": 8626, "data_time": 0.15533, "loss_rpn_cls": 0.05638, "loss_rpn_bbox": 0.06379, "loss_cls": 0.30354, "acc": 91.06543, "loss_bbox": 0.2953, "loss": 0.719, "time": 0.55541}
{"mode": "train", "epoch": 1, "iter": 4650, "lr": 0.02, "memory": 8626, "data_time": 0.16084, "loss_rpn_cls": 0.05939, "loss_rpn_bbox": 0.06821, "loss_cls": 0.32386, "acc": 90.46362, "loss_bbox": 0.31789, "loss": 0.76935, "time": 0.5536}
{"mode": "train", "epoch": 1, "iter": 4700, "lr": 0.02, "memory": 8626, "data_time": 0.16365, "loss_rpn_cls": 0.05669, "loss_rpn_bbox": 0.06224, "loss_cls": 0.32205, "acc": 90.54785, "loss_bbox": 0.31333, "loss": 0.75431, "time": 0.55543}
{"mode": "train", "epoch": 1, "iter": 4750, "lr": 0.02, "memory": 8626, "data_time": 0.15522, "loss_rpn_cls": 0.06127, "loss_rpn_bbox": 0.06969, "loss_cls": 0.32502, "acc": 90.40698, "loss_bbox": 0.31915, "loss": 0.77513, "time": 0.55629}
{"mode": "train", "epoch": 1, "iter": 4800, "lr": 0.02, "memory": 8626, "data_time": 0.15861, "loss_rpn_cls": 0.05832, "loss_rpn_bbox": 0.06702, "loss_cls": 0.30962, "acc": 90.74976, "loss_bbox": 0.30721, "loss": 0.74217, "time": 0.55681}
{"mode": "train", "epoch": 1, "iter": 4850, "lr": 0.02, "memory": 8626, "data_time": 0.16355, "loss_rpn_cls": 0.05924, "loss_rpn_bbox": 0.06569, "loss_cls": 0.3197, "acc": 90.48926, "loss_bbox": 0.31928, "loss": 0.76391, "time": 0.55948}
{"mode": "train", "epoch": 1, "iter": 4900, "lr": 0.02, "memory": 8626, "data_time": 0.15607, "loss_rpn_cls": 0.06179, "loss_rpn_bbox": 0.07037, "loss_cls": 0.31679, "acc": 90.70068, "loss_bbox": 0.31012, "loss": 0.75908, "time": 0.55523}
{"mode": "train", "epoch": 1, "iter": 4950, "lr": 0.02, "memory": 8626, "data_time": 0.16162, "loss_rpn_cls": 0.05997, "loss_rpn_bbox": 0.06793, "loss_cls": 0.31751, "acc": 90.51611, "loss_bbox": 0.31142, "loss": 0.75683, "time": 0.55665}
{"mode": "train", "epoch": 1, "iter": 5000, "lr": 0.02, "memory": 8626, "data_time": 0.16087, "loss_rpn_cls": 0.05471, "loss_rpn_bbox": 0.06156, "loss_cls": 0.30532, "acc": 91.04102, "loss_bbox": 0.29722, "loss": 0.71881, "time": 0.55188}
{"mode": "train", "epoch": 1, "iter": 5050, "lr": 0.02, "memory": 8626, "data_time": 0.15712, "loss_rpn_cls": 0.05671, "loss_rpn_bbox": 0.06581, "loss_cls": 0.32248, "acc": 90.37622, "loss_bbox": 0.32327, "loss": 0.76828, "time": 0.55687}
{"mode": "train", "epoch": 1, "iter": 5100, "lr": 0.02, "memory": 8626, "data_time": 0.16106, "loss_rpn_cls": 0.05536, "loss_rpn_bbox": 0.06141, "loss_cls": 0.32842, "acc": 90.58765, "loss_bbox": 0.31117, "loss": 0.75636, "time": 0.55438}
{"mode": "train", "epoch": 1, "iter": 5150, "lr": 0.02, "memory": 8626, "data_time": 0.15984, "loss_rpn_cls": 0.05828, "loss_rpn_bbox": 0.06659, "loss_cls": 0.3172, "acc": 90.4314, "loss_bbox": 0.32325, "loss": 0.76532, "time": 0.55782}
{"mode": "train", "epoch": 1, "iter": 5200, "lr": 0.02, "memory": 8626, "data_time": 0.15848, "loss_rpn_cls": 0.06295, "loss_rpn_bbox": 0.06792, "loss_cls": 0.32094, "acc": 90.47339, "loss_bbox": 0.31982, "loss": 0.77164, "time": 0.56328}
{"mode": "train", "epoch": 1, "iter": 5250, "lr": 0.02, "memory": 8626, "data_time": 0.15976, "loss_rpn_cls": 0.05923, "loss_rpn_bbox": 0.06704, "loss_cls": 0.32586, "acc": 90.36426, "loss_bbox": 0.32349, "loss": 0.77562, "time": 0.55621}
{"mode": "train", "epoch": 1, "iter": 5300, "lr": 0.02, "memory": 8626, "data_time": 0.16035, "loss_rpn_cls": 0.05675, "loss_rpn_bbox": 0.06592, "loss_cls": 0.32245, "acc": 90.29224, "loss_bbox": 0.32393, "loss": 0.76906, "time": 0.5554}
{"mode": "train", "epoch": 1, "iter": 5350, "lr": 0.02, "memory": 8626, "data_time": 0.15309, "loss_rpn_cls": 0.05373, "loss_rpn_bbox": 0.06634, "loss_cls": 0.32666, "acc": 90.33179, "loss_bbox": 0.32246, "loss": 0.76919, "time": 0.55441}
{"mode": "train", "epoch": 1, "iter": 5400, "lr": 0.02, "memory": 8626, "data_time": 0.15629, "loss_rpn_cls": 0.05679, "loss_rpn_bbox": 0.06331, "loss_cls": 0.31633, "acc": 90.67749, "loss_bbox": 0.31079, "loss": 0.74722, "time": 0.55512}
{"mode": "train", "epoch": 1, "iter": 5450, "lr": 0.02, "memory": 8626, "data_time": 0.15774, "loss_rpn_cls": 0.05671, "loss_rpn_bbox": 0.06838, "loss_cls": 0.31097, "acc": 90.83105, "loss_bbox": 0.31154, "loss": 0.7476, "time": 0.55447}
{"mode": "train", "epoch": 1, "iter": 5500, "lr": 0.02, "memory": 8626, "data_time": 0.16455, "loss_rpn_cls": 0.05433, "loss_rpn_bbox": 0.06687, "loss_cls": 0.30316, "acc": 90.95312, "loss_bbox": 0.31213, "loss": 0.73649, "time": 0.56554}
