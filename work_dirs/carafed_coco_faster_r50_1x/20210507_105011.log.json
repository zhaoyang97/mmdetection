{"env_info": "sys.platform: linux\nPython: 3.7.9 (default, Aug 31 2020, 12:42:55) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.130\nGCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\nPyTorch: 1.6.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.5.0 (Git Hash e2ac1fac44c5078ca927cb9b90e1b3066a0b2ed0)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.7.0\nOpenCV: 4.4.0\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.2\nMMDetection: 2.12.0+", "config": "model = dict(\n    type='FasterRCNN',\n    pretrained=\n    'work_dirs/imagenet_resnet50_carafed/imagenet_resnet50_carafed_pretrained.pth',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=80,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))))\ntrain_cfg = dict(\n    rpn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.7,\n            neg_iou_thr=0.3,\n            min_pos_iou=0.3,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=256,\n            pos_fraction=0.5,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    rpn_proposal=dict(\n        nms_across_levels=False,\n        nms_pre=2000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0.5,\n            match_low_quality=False,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=512,\n            pos_fraction=0.25,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=True),\n        pos_weight=-1,\n        debug=False))\ntest_cfg = dict(\n    rpn=dict(\n        nms_across_levels=False,\n        nms_pre=1000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'CocoDataset'\ndata_root = '../data/coco/'\nannotations_root = '../data/coco/annotations/'\nimage_root = '../data/coco/'\nimg_scale = (1333, 800)\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=0,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/instances_train2017.json',\n        img_prefix='../data/coco/train2017',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/instances_val2017.json',\n        img_prefix='../data/coco/val2017',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/image_info_test-dev2017.json',\n        img_prefix='../data/coco/test2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/carafed_coco_faster_r50_1x'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "carafed_coco_faster_r50_1x.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 3942, "data_time": 0.14079, "loss_rpn_cls": 0.38249, "loss_rpn_bbox": 0.10712, "loss_cls": 0.77258, "acc": 93.29883, "loss_bbox": 0.22161, "loss": 1.4838, "time": 0.38465}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 3942, "data_time": 0.07806, "loss_rpn_cls": 0.29612, "loss_rpn_bbox": 0.11209, "loss_cls": 0.61196, "acc": 94.73047, "loss_bbox": 0.20948, "loss": 1.22965, "time": 0.3119}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 3942, "data_time": 0.07808, "loss_rpn_cls": 0.26304, "loss_rpn_bbox": 0.09899, "loss_cls": 0.61091, "acc": 94.5293, "loss_bbox": 0.20331, "loss": 1.17625, "time": 0.31347}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 3942, "data_time": 0.07922, "loss_rpn_cls": 0.27353, "loss_rpn_bbox": 0.11101, "loss_cls": 0.54267, "acc": 94.52148, "loss_bbox": 0.19236, "loss": 1.11956, "time": 0.31374}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 3942, "data_time": 0.0897, "loss_rpn_cls": 0.2472, "loss_rpn_bbox": 0.10347, "loss_cls": 0.53311, "acc": 94.50195, "loss_bbox": 0.20395, "loss": 1.08773, "time": 0.32242}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 3942, "data_time": 0.10697, "loss_rpn_cls": 0.24935, "loss_rpn_bbox": 0.11365, "loss_cls": 0.47534, "acc": 94.41797, "loss_bbox": 0.19315, "loss": 1.03148, "time": 0.34416}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 3942, "data_time": 0.10729, "loss_rpn_cls": 0.22784, "loss_rpn_bbox": 0.09338, "loss_cls": 0.47101, "acc": 94.54297, "loss_bbox": 0.19297, "loss": 0.9852, "time": 0.34525}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 3942, "data_time": 0.10766, "loss_rpn_cls": 0.19881, "loss_rpn_bbox": 0.07557, "loss_cls": 0.38714, "acc": 95.27734, "loss_bbox": 0.16607, "loss": 0.82758, "time": 0.34184}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 3942, "data_time": 0.10794, "loss_rpn_cls": 0.23211, "loss_rpn_bbox": 0.09421, "loss_cls": 0.42407, "acc": 94.1543, "loss_bbox": 0.20419, "loss": 0.95458, "time": 0.34186}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 3942, "data_time": 0.09729, "loss_rpn_cls": 0.27557, "loss_rpn_bbox": 0.12073, "loss_cls": 0.4485, "acc": 94.10156, "loss_bbox": 0.19496, "loss": 1.03975, "time": 0.33334}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 3942, "data_time": 0.11331, "loss_rpn_cls": 0.23109, "loss_rpn_bbox": 0.10565, "loss_cls": 0.43758, "acc": 93.91406, "loss_bbox": 0.21857, "loss": 0.99289, "time": 0.35184}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 3942, "data_time": 0.10269, "loss_rpn_cls": 0.23854, "loss_rpn_bbox": 0.0976, "loss_cls": 0.38308, "acc": 94.82812, "loss_bbox": 0.17592, "loss": 0.89513, "time": 0.33997}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 3942, "data_time": 0.1062, "loss_rpn_cls": 0.25266, "loss_rpn_bbox": 0.11077, "loss_cls": 0.41481, "acc": 94.37305, "loss_bbox": 0.19577, "loss": 0.97402, "time": 0.34017}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 3942, "data_time": 0.10191, "loss_rpn_cls": 0.28178, "loss_rpn_bbox": 0.11579, "loss_cls": 0.39486, "acc": 94.64062, "loss_bbox": 0.17174, "loss": 0.96417, "time": 0.33512}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 3942, "data_time": 0.10008, "loss_rpn_cls": 0.22892, "loss_rpn_bbox": 0.10712, "loss_cls": 0.41464, "acc": 94.41406, "loss_bbox": 0.19674, "loss": 0.94742, "time": 0.33167}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 3942, "data_time": 0.09736, "loss_rpn_cls": 0.26584, "loss_rpn_bbox": 0.11347, "loss_cls": 0.45338, "acc": 93.30469, "loss_bbox": 0.2285, "loss": 1.06119, "time": 0.33153}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.02, "memory": 3942, "data_time": 0.09938, "loss_rpn_cls": 0.1991, "loss_rpn_bbox": 0.08508, "loss_cls": 0.3745, "acc": 94.93359, "loss_bbox": 0.17457, "loss": 0.83324, "time": 0.33354}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.02, "memory": 3942, "data_time": 0.09953, "loss_rpn_cls": 0.21298, "loss_rpn_bbox": 0.09664, "loss_cls": 0.43066, "acc": 94.06836, "loss_bbox": 0.21193, "loss": 0.95221, "time": 0.33198}
