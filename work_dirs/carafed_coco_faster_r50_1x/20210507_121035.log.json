{"env_info": "sys.platform: linux\nPython: 3.7.9 (default, Aug 31 2020, 12:42:55) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.130\nGCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\nPyTorch: 1.6.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.5.0 (Git Hash e2ac1fac44c5078ca927cb9b90e1b3066a0b2ed0)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.7.0\nOpenCV: 4.4.0\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.2\nMMDetection: 2.12.0+", "config": "model = dict(\n    type='FasterRCNN',\n    pretrained=\n    'work_dirs/imagenet_resnet50_carafed/imagenet_resnet50_carafed_pretrained.pth',\n    backbone=dict(\n        type='ResNet_carafed',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=80,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))))\ntrain_cfg = dict(\n    rpn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.7,\n            neg_iou_thr=0.3,\n            min_pos_iou=0.3,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=256,\n            pos_fraction=0.5,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    rpn_proposal=dict(\n        nms_across_levels=False,\n        nms_pre=2000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0.5,\n            match_low_quality=False,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=512,\n            pos_fraction=0.25,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=True),\n        pos_weight=-1,\n        debug=False))\ntest_cfg = dict(\n    rpn=dict(\n        nms_across_levels=False,\n        nms_pre=1000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'CocoDataset'\ndata_root = '../data/coco/'\nannotations_root = '../data/coco/annotations/'\nimage_root = '../data/coco/'\nimg_scale = (1333, 800)\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=0,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/instances_train2017.json',\n        img_prefix='../data/coco/train2017',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/instances_val2017.json',\n        img_prefix='../data/coco/val2017',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/image_info_test-dev2017.json',\n        img_prefix='../data/coco/test2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/carafed_coco_faster_r50_1x'\ngpu_ids = range(0, 8)\n", "seed": null, "exp_name": "carafed_coco_faster_r50_1x.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 8625, "data_time": 0.21138, "loss_rpn_cls": 0.53513, "loss_rpn_bbox": 0.10403, "loss_cls": 0.95511, "acc": 89.80786, "loss_bbox": 0.11231, "loss": 1.70658, "time": 0.63811}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 8625, "data_time": 0.14878, "loss_rpn_cls": 0.21996, "loss_rpn_bbox": 0.09474, "loss_cls": 0.44636, "acc": 94.07642, "loss_bbox": 0.22593, "loss": 0.98699, "time": 0.54699}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 8625, "data_time": 0.15153, "loss_rpn_cls": 0.17857, "loss_rpn_bbox": 0.09504, "loss_cls": 0.48856, "acc": 93.29858, "loss_bbox": 0.25032, "loss": 1.0125, "time": 0.5425}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 8625, "data_time": 0.154, "loss_rpn_cls": 0.15004, "loss_rpn_bbox": 0.098, "loss_cls": 0.48358, "acc": 92.04932, "loss_bbox": 0.29711, "loss": 1.02873, "time": 0.54069}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 8625, "data_time": 0.14466, "loss_rpn_cls": 0.13373, "loss_rpn_bbox": 0.0984, "loss_cls": 0.48635, "acc": 91.54541, "loss_bbox": 0.31732, "loss": 1.03581, "time": 0.54095}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 8625, "data_time": 0.14424, "loss_rpn_cls": 0.11318, "loss_rpn_bbox": 0.08871, "loss_cls": 0.51432, "acc": 90.75854, "loss_bbox": 0.34902, "loss": 1.06523, "time": 0.53906}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 8625, "data_time": 0.14732, "loss_rpn_cls": 0.1046, "loss_rpn_bbox": 0.08717, "loss_cls": 0.50426, "acc": 90.82446, "loss_bbox": 0.35007, "loss": 1.04611, "time": 0.54446}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 8625, "data_time": 0.14543, "loss_rpn_cls": 0.10582, "loss_rpn_bbox": 0.08854, "loss_cls": 0.53454, "acc": 89.81421, "loss_bbox": 0.38528, "loss": 1.11418, "time": 0.53928}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 8625, "data_time": 0.14389, "loss_rpn_cls": 0.10063, "loss_rpn_bbox": 0.08638, "loss_cls": 0.50139, "acc": 90.10645, "loss_bbox": 0.38105, "loss": 1.06946, "time": 0.53787}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 8625, "data_time": 0.14671, "loss_rpn_cls": 0.09466, "loss_rpn_bbox": 0.08162, "loss_cls": 0.50555, "acc": 89.76685, "loss_bbox": 0.38511, "loss": 1.06694, "time": 0.53752}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 8625, "data_time": 0.1436, "loss_rpn_cls": 0.09446, "loss_rpn_bbox": 0.08045, "loss_cls": 0.49425, "acc": 89.74292, "loss_bbox": 0.38488, "loss": 1.05405, "time": 0.53802}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 8625, "data_time": 0.14831, "loss_rpn_cls": 0.09508, "loss_rpn_bbox": 0.08254, "loss_cls": 0.48904, "acc": 89.78955, "loss_bbox": 0.37658, "loss": 1.04324, "time": 0.54}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 8625, "data_time": 0.14471, "loss_rpn_cls": 0.09012, "loss_rpn_bbox": 0.08542, "loss_cls": 0.46455, "acc": 89.81372, "loss_bbox": 0.37896, "loss": 1.01905, "time": 0.53647}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 8625, "data_time": 0.14762, "loss_rpn_cls": 0.09044, "loss_rpn_bbox": 0.08347, "loss_cls": 0.46746, "acc": 89.44312, "loss_bbox": 0.38875, "loss": 1.03012, "time": 0.54326}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 8625, "data_time": 0.14877, "loss_rpn_cls": 0.08454, "loss_rpn_bbox": 0.08224, "loss_cls": 0.44835, "acc": 89.69409, "loss_bbox": 0.37716, "loss": 0.99229, "time": 0.53899}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 8625, "data_time": 0.15096, "loss_rpn_cls": 0.08333, "loss_rpn_bbox": 0.08273, "loss_cls": 0.45971, "acc": 89.36426, "loss_bbox": 0.38247, "loss": 1.00824, "time": 0.53992}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.02, "memory": 8625, "data_time": 0.15345, "loss_rpn_cls": 0.07807, "loss_rpn_bbox": 0.07867, "loss_cls": 0.43761, "acc": 89.63452, "loss_bbox": 0.37488, "loss": 0.96923, "time": 0.54226}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.02, "memory": 8625, "data_time": 0.15306, "loss_rpn_cls": 0.0772, "loss_rpn_bbox": 0.0788, "loss_cls": 0.43298, "acc": 89.57642, "loss_bbox": 0.3747, "loss": 0.96367, "time": 0.54032}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.02, "memory": 8625, "data_time": 0.15089, "loss_rpn_cls": 0.07867, "loss_rpn_bbox": 0.07751, "loss_cls": 0.42826, "acc": 89.66333, "loss_bbox": 0.36757, "loss": 0.95201, "time": 0.53864}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.02, "memory": 8625, "data_time": 0.1509, "loss_rpn_cls": 0.07671, "loss_rpn_bbox": 0.07694, "loss_cls": 0.41686, "acc": 89.64185, "loss_bbox": 0.3707, "loss": 0.94122, "time": 0.54033}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.02, "memory": 8625, "data_time": 0.14528, "loss_rpn_cls": 0.07782, "loss_rpn_bbox": 0.07656, "loss_cls": 0.41601, "acc": 89.80835, "loss_bbox": 0.36028, "loss": 0.93067, "time": 0.54165}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.02, "memory": 8625, "data_time": 0.14981, "loss_rpn_cls": 0.06882, "loss_rpn_bbox": 0.07304, "loss_cls": 0.40444, "acc": 89.83569, "loss_bbox": 0.36439, "loss": 0.9107, "time": 0.541}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.02, "memory": 8625, "data_time": 0.14613, "loss_rpn_cls": 0.07665, "loss_rpn_bbox": 0.08028, "loss_cls": 0.42399, "acc": 89.25195, "loss_bbox": 0.38047, "loss": 0.96139, "time": 0.53891}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.02, "memory": 8625, "data_time": 0.15495, "loss_rpn_cls": 0.07944, "loss_rpn_bbox": 0.08114, "loss_cls": 0.41923, "acc": 89.32446, "loss_bbox": 0.37753, "loss": 0.95734, "time": 0.54109}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.02, "memory": 8625, "data_time": 0.1521, "loss_rpn_cls": 0.07007, "loss_rpn_bbox": 0.0722, "loss_cls": 0.38672, "acc": 90.073, "loss_bbox": 0.35113, "loss": 0.88013, "time": 0.54157}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.02, "memory": 8625, "data_time": 0.15014, "loss_rpn_cls": 0.07041, "loss_rpn_bbox": 0.07318, "loss_cls": 0.38054, "acc": 89.93604, "loss_bbox": 0.36034, "loss": 0.88447, "time": 0.5435}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.02, "memory": 8625, "data_time": 0.15027, "loss_rpn_cls": 0.08292, "loss_rpn_bbox": 0.08008, "loss_cls": 0.40062, "acc": 89.61011, "loss_bbox": 0.35884, "loss": 0.92245, "time": 0.53886}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.02, "memory": 8625, "data_time": 0.14658, "loss_rpn_cls": 0.06956, "loss_rpn_bbox": 0.07259, "loss_cls": 0.37731, "acc": 90.10791, "loss_bbox": 0.34885, "loss": 0.86831, "time": 0.54057}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.02, "memory": 8625, "data_time": 0.15455, "loss_rpn_cls": 0.06979, "loss_rpn_bbox": 0.07446, "loss_cls": 0.3834, "acc": 89.6145, "loss_bbox": 0.36802, "loss": 0.89567, "time": 0.53775}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.02, "memory": 8625, "data_time": 0.14926, "loss_rpn_cls": 0.07824, "loss_rpn_bbox": 0.08052, "loss_cls": 0.3746, "acc": 89.96777, "loss_bbox": 0.35719, "loss": 0.89056, "time": 0.53675}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.02, "memory": 8625, "data_time": 0.14999, "loss_rpn_cls": 0.06663, "loss_rpn_bbox": 0.07366, "loss_cls": 0.37179, "acc": 89.93481, "loss_bbox": 0.35173, "loss": 0.86382, "time": 0.54169}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.02, "memory": 8625, "data_time": 0.14738, "loss_rpn_cls": 0.0724, "loss_rpn_bbox": 0.07592, "loss_cls": 0.3799, "acc": 89.82227, "loss_bbox": 0.35514, "loss": 0.88335, "time": 0.53744}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 0.02, "memory": 8625, "data_time": 0.14947, "loss_rpn_cls": 0.06983, "loss_rpn_bbox": 0.07522, "loss_cls": 0.36582, "acc": 90.10449, "loss_bbox": 0.34271, "loss": 0.85358, "time": 0.54008}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.02, "memory": 8625, "data_time": 0.15378, "loss_rpn_cls": 0.07011, "loss_rpn_bbox": 0.07128, "loss_cls": 0.38477, "acc": 89.74512, "loss_bbox": 0.35302, "loss": 0.87918, "time": 0.54109}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 0.02, "memory": 8625, "data_time": 0.1491, "loss_rpn_cls": 0.0731, "loss_rpn_bbox": 0.07541, "loss_cls": 0.38034, "acc": 89.51709, "loss_bbox": 0.35859, "loss": 0.88743, "time": 0.54057}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.02, "memory": 8625, "data_time": 0.15173, "loss_rpn_cls": 0.06954, "loss_rpn_bbox": 0.07596, "loss_cls": 0.36962, "acc": 89.98657, "loss_bbox": 0.34568, "loss": 0.8608, "time": 0.53858}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 0.02, "memory": 8625, "data_time": 0.15318, "loss_rpn_cls": 0.06793, "loss_rpn_bbox": 0.07563, "loss_cls": 0.37757, "acc": 89.60498, "loss_bbox": 0.35566, "loss": 0.87679, "time": 0.54057}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 0.02, "memory": 8625, "data_time": 0.14231, "loss_rpn_cls": 0.06627, "loss_rpn_bbox": 0.07335, "loss_cls": 0.35717, "acc": 90.22192, "loss_bbox": 0.33671, "loss": 0.8335, "time": 0.53906}
