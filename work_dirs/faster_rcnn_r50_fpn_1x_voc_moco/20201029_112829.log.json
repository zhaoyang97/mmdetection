{"env_info": "sys.platform: linux\nPython: 3.6.12 |Anaconda, Inc.| (default, Sep  8 2020, 23:10:56) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.130\nGCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\nPyTorch: 1.4.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CUDA Runtime 10.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.1\n  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.5.0\nOpenCV: 4.4.0\nMMCV: 1.1.5\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.0\nMMDetection: 2.5.0+", "config": "model = dict(\n    type='FasterRCNN',\n    pretrained='icode/moco_v2_800ep_pretrain_rename.pth',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=20,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))))\ntrain_cfg = dict(\n    rpn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.7,\n            neg_iou_thr=0.3,\n            min_pos_iou=0.3,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=256,\n            pos_fraction=0.5,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    rpn_proposal=dict(\n        nms_across_levels=False,\n        nms_pre=2000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0.5,\n            match_low_quality=False,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=512,\n            pos_fraction=0.25,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=True),\n        pos_weight=-1,\n        debug=False))\ntest_cfg = dict(\n    rpn=dict(\n        nms_across_levels=False,\n        nms_pre=1000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'VOCDataset'\ndata_root = '/root/userfolder/data/voc0712/VOCdevkit/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1000, 600), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1000, 600),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=0,\n    train=dict(\n        type='RepeatDataset',\n        times=3,\n        dataset=dict(\n            type='VOCDataset',\n            ann_file=[\n                '/root/userfolder/data/voc0712/VOCdevkit/VOC2007/ImageSets/Main/trainval.txt',\n                '/root/userfolder/data/voc0712/VOCdevkit/VOC2012/ImageSets/Main/trainval.txt'\n            ],\n            img_prefix=[\n                '/root/userfolder/data/voc0712/VOCdevkit/VOC2007/',\n                '/root/userfolder/data/voc0712/VOCdevkit/VOC2012/'\n            ],\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations', with_bbox=True),\n                dict(type='Resize', img_scale=(1000, 600), keep_ratio=True),\n                dict(type='RandomFlip', flip_ratio=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size_divisor=32),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n            ])),\n    val=dict(\n        type='VOCDataset',\n        ann_file=\n        '/root/userfolder/data/voc0712/VOCdevkit/VOC2007/ImageSets/Main/test.txt',\n        img_prefix='/root/userfolder/data/voc0712/VOCdevkit/VOC2007/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1000, 600),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='VOCDataset',\n        ann_file=\n        '/root/userfolder/data/voc0712/VOCdevkit/VOC2007/ImageSets/Main/test.txt',\n        img_prefix='/root/userfolder/data/voc0712/VOCdevkit/VOC2007/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1000, 600),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='mAP')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\ntotal_epochs = 12\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/faster_rcnn_r50_fpn_1x_voc_moco'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "faster_rcnn_r50_fpn_1x_voc_moco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 2569, "data_time": 0.14369, "loss_rpn_cls": 0.47508, "loss_rpn_bbox": 0.02456, "loss_cls": 1.54452, "acc": 84.27148, "loss_bbox": 0.06396, "loss": 2.10811, "time": 0.33167}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 2569, "data_time": 0.08193, "loss_rpn_cls": 0.08716, "loss_rpn_bbox": 0.02307, "loss_cls": 0.40191, "acc": 96.37598, "loss_bbox": 0.14497, "loss": 0.65711, "time": 0.26462}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 2569, "data_time": 0.08149, "loss_rpn_cls": 0.08369, "loss_rpn_bbox": 0.02186, "loss_cls": 0.38031, "acc": 96.5332, "loss_bbox": 0.1357, "loss": 0.62156, "time": 0.25932}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 2569, "data_time": 0.07877, "loss_rpn_cls": 0.07248, "loss_rpn_bbox": 0.0203, "loss_cls": 0.35086, "acc": 96.36621, "loss_bbox": 0.14363, "loss": 0.58727, "time": 0.25942}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 2569, "data_time": 0.09609, "loss_rpn_cls": 0.07008, "loss_rpn_bbox": 0.02194, "loss_cls": 0.29994, "acc": 96.15234, "loss_bbox": 0.15026, "loss": 0.54222, "time": 0.28021}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 2569, "data_time": 0.09159, "loss_rpn_cls": 0.07073, "loss_rpn_bbox": 0.0192, "loss_cls": 0.28341, "acc": 96.24609, "loss_bbox": 0.1474, "loss": 0.52073, "time": 0.27891}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 2569, "data_time": 0.0868, "loss_rpn_cls": 0.08308, "loss_rpn_bbox": 0.02446, "loss_cls": 0.31909, "acc": 95.31738, "loss_bbox": 0.18418, "loss": 0.61081, "time": 0.27671}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 2569, "data_time": 0.08185, "loss_rpn_cls": 0.08032, "loss_rpn_bbox": 0.02176, "loss_cls": 0.26523, "acc": 95.91895, "loss_bbox": 0.15796, "loss": 0.52527, "time": 0.2658}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 2569, "data_time": 0.0855, "loss_rpn_cls": 0.07401, "loss_rpn_bbox": 0.02209, "loss_cls": 0.2707, "acc": 95.87891, "loss_bbox": 0.16272, "loss": 0.52952, "time": 0.26494}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 2569, "data_time": 0.09409, "loss_rpn_cls": 0.0785, "loss_rpn_bbox": 0.02473, "loss_cls": 0.28376, "acc": 95.49023, "loss_bbox": 0.17904, "loss": 0.56603, "time": 0.27098}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 2569, "data_time": 0.08294, "loss_rpn_cls": 0.05482, "loss_rpn_bbox": 0.0186, "loss_cls": 0.24424, "acc": 95.99316, "loss_bbox": 0.1595, "loss": 0.47717, "time": 0.26493}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 2569, "data_time": 0.08284, "loss_rpn_cls": 0.0631, "loss_rpn_bbox": 0.02119, "loss_cls": 0.26466, "acc": 95.67676, "loss_bbox": 0.17273, "loss": 0.52169, "time": 0.26861}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 2569, "data_time": 0.08348, "loss_rpn_cls": 0.06824, "loss_rpn_bbox": 0.0226, "loss_cls": 0.26014, "acc": 95.82422, "loss_bbox": 0.16584, "loss": 0.51682, "time": 0.26856}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 2569, "data_time": 0.09089, "loss_rpn_cls": 0.06289, "loss_rpn_bbox": 0.02432, "loss_cls": 0.25636, "acc": 95.69629, "loss_bbox": 0.17117, "loss": 0.51474, "time": 0.27111}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 2569, "data_time": 0.07979, "loss_rpn_cls": 0.06144, "loss_rpn_bbox": 0.0209, "loss_cls": 0.27479, "acc": 95.37402, "loss_bbox": 0.18574, "loss": 0.54286, "time": 0.262}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 2569, "data_time": 0.07855, "loss_rpn_cls": 0.07119, "loss_rpn_bbox": 0.022, "loss_cls": 0.23413, "acc": 95.85059, "loss_bbox": 0.16246, "loss": 0.48978, "time": 0.25993}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.02, "memory": 2569, "data_time": 0.08066, "loss_rpn_cls": 0.05645, "loss_rpn_bbox": 0.01934, "loss_cls": 0.25246, "acc": 95.57422, "loss_bbox": 0.17658, "loss": 0.50483, "time": 0.26302}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.02, "memory": 2569, "data_time": 0.08119, "loss_rpn_cls": 0.06707, "loss_rpn_bbox": 0.02174, "loss_cls": 0.25784, "acc": 95.85547, "loss_bbox": 0.16374, "loss": 0.5104, "time": 0.25914}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.02, "memory": 2569, "data_time": 0.08073, "loss_rpn_cls": 0.05652, "loss_rpn_bbox": 0.0203, "loss_cls": 0.26252, "acc": 95.41797, "loss_bbox": 0.18223, "loss": 0.52157, "time": 0.26408}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.02, "memory": 2569, "data_time": 0.08084, "loss_rpn_cls": 0.06593, "loss_rpn_bbox": 0.02248, "loss_cls": 0.25708, "acc": 95.71875, "loss_bbox": 0.16925, "loss": 0.51475, "time": 0.26368}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.02, "memory": 2569, "data_time": 0.08366, "loss_rpn_cls": 0.06906, "loss_rpn_bbox": 0.02641, "loss_cls": 0.29469, "acc": 94.71582, "loss_bbox": 0.2055, "loss": 0.59566, "time": 0.26391}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.02, "memory": 2569, "data_time": 0.08175, "loss_rpn_cls": 0.05657, "loss_rpn_bbox": 0.0219, "loss_cls": 0.24308, "acc": 95.78711, "loss_bbox": 0.16346, "loss": 0.48501, "time": 0.26258}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.02, "memory": 2569, "data_time": 0.08129, "loss_rpn_cls": 0.07034, "loss_rpn_bbox": 0.02516, "loss_cls": 0.28239, "acc": 95.18262, "loss_bbox": 0.18589, "loss": 0.56379, "time": 0.26134}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.02, "memory": 2569, "data_time": 0.08019, "loss_rpn_cls": 0.06682, "loss_rpn_bbox": 0.02436, "loss_cls": 0.25532, "acc": 95.56641, "loss_bbox": 0.17216, "loss": 0.51866, "time": 0.26416}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.02, "memory": 2569, "data_time": 0.07941, "loss_rpn_cls": 0.05911, "loss_rpn_bbox": 0.02128, "loss_cls": 0.27034, "acc": 95.26562, "loss_bbox": 0.18781, "loss": 0.53855, "time": 0.25853}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.02, "memory": 2569, "data_time": 0.07915, "loss_rpn_cls": 0.0531, "loss_rpn_bbox": 0.02382, "loss_cls": 0.25171, "acc": 95.57617, "loss_bbox": 0.17116, "loss": 0.49979, "time": 0.26324}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.02, "memory": 2569, "data_time": 0.07966, "loss_rpn_cls": 0.05658, "loss_rpn_bbox": 0.02146, "loss_cls": 0.25304, "acc": 95.42285, "loss_bbox": 0.17516, "loss": 0.50623, "time": 0.2581}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.02, "memory": 2569, "data_time": 0.08104, "loss_rpn_cls": 0.06278, "loss_rpn_bbox": 0.02234, "loss_cls": 0.27069, "acc": 95.24609, "loss_bbox": 0.18144, "loss": 0.53725, "time": 0.25677}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.02, "memory": 2569, "data_time": 0.07849, "loss_rpn_cls": 0.06383, "loss_rpn_bbox": 0.02356, "loss_cls": 0.26016, "acc": 95.45801, "loss_bbox": 0.17371, "loss": 0.52126, "time": 0.25847}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.02, "memory": 2569, "data_time": 0.07783, "loss_rpn_cls": 0.0537, "loss_rpn_bbox": 0.02192, "loss_cls": 0.25826, "acc": 95.29199, "loss_bbox": 0.18188, "loss": 0.51576, "time": 0.25905}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.02, "memory": 2569, "data_time": 0.07763, "loss_rpn_cls": 0.05129, "loss_rpn_bbox": 0.02192, "loss_cls": 0.28614, "acc": 94.92676, "loss_bbox": 0.19414, "loss": 0.55349, "time": 0.25329}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.02, "memory": 2569, "data_time": 0.07952, "loss_rpn_cls": 0.05073, "loss_rpn_bbox": 0.02202, "loss_cls": 0.23437, "acc": 95.79785, "loss_bbox": 0.15741, "loss": 0.46453, "time": 0.25899}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 0.02, "memory": 2569, "data_time": 0.07933, "loss_rpn_cls": 0.04495, "loss_rpn_bbox": 0.02061, "loss_cls": 0.25538, "acc": 95.39648, "loss_bbox": 0.17582, "loss": 0.49675, "time": 0.26153}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.02, "memory": 2569, "data_time": 0.07758, "loss_rpn_cls": 0.03802, "loss_rpn_bbox": 0.01922, "loss_cls": 0.25468, "acc": 95.14355, "loss_bbox": 0.18082, "loss": 0.49275, "time": 0.25599}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 0.02, "memory": 2569, "data_time": 0.07997, "loss_rpn_cls": 0.05014, "loss_rpn_bbox": 0.02196, "loss_cls": 0.27343, "acc": 94.79785, "loss_bbox": 0.19364, "loss": 0.53916, "time": 0.26245}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.02, "memory": 2569, "data_time": 0.0833, "loss_rpn_cls": 0.04756, "loss_rpn_bbox": 0.02142, "loss_cls": 0.26546, "acc": 95.0957, "loss_bbox": 0.18275, "loss": 0.51719, "time": 0.26057}
