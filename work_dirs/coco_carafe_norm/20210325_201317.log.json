{"env_info": "sys.platform: linux\nPython: 3.6.12 |Anaconda, Inc.| (default, Sep  8 2020, 23:10:56) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: GeForce RTX 2080 Ti\nCUDA_HOME: None\nGCC: gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44)\nPyTorch: 1.4.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CUDA Runtime 10.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.1\n  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.5.0\nOpenCV: 4.5.1\nMMCV: 1.1.6\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.0\nMMDetection: 2.5.0+", "config": "model = dict(\n    type='FasterRCNN',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN_CARAFE_norm',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5,\n        start_level=0,\n        end_level=-1,\n        norm_cfg=None,\n        act_cfg=None,\n        order=('conv', 'norm', 'act'),\n        upsample_cfg=dict(\n            type='carafe',\n            up_kernel=5,\n            up_group=1,\n            encoder_kernel=3,\n            encoder_dilation=1,\n            compressed_channels=64)),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=80,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))))\ntrain_cfg = dict(\n    rpn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.7,\n            neg_iou_thr=0.3,\n            min_pos_iou=0.3,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=256,\n            pos_fraction=0.5,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    rpn_proposal=dict(\n        nms_across_levels=False,\n        nms_pre=2000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0.5,\n            match_low_quality=False,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=512,\n            pos_fraction=0.25,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=True),\n        pos_weight=-1,\n        debug=False))\ntest_cfg = dict(\n    rpn=dict(\n        nms_across_levels=False,\n        nms_pre=1000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'CocoDataset'\ndata_root = '../data/coco/'\nannotations_root = '../data/coco/annotations/'\nimage_root = '../data/coco/'\nimg_scale = (1333, 800)\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=64),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=64),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=0,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/instances_train2017.json',\n        img_prefix='../data/coco/train2017',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=64),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/instances_val2017.json',\n        img_prefix='../data/coco/val2017',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=64),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/image_info_test-dev2017.json',\n        img_prefix='../data/coco/test2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=64),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\ntotal_epochs = 12\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/coco_carafe_norm'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "coco_carafe_norm.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 4268, "data_time": 0.35175, "loss_rpn_cls": 0.46264, "loss_rpn_bbox": 0.11911, "loss_cls": 1.2787, "acc": 88.58252, "loss_bbox": 0.09298, "loss": 1.95342, "time": 0.68927}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 4268, "data_time": 0.21398, "loss_rpn_cls": 0.20864, "loss_rpn_bbox": 0.08523, "loss_cls": 0.48214, "acc": 94.56641, "loss_bbox": 0.18386, "loss": 0.95988, "time": 0.53569}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 4268, "data_time": 0.21189, "loss_rpn_cls": 0.18304, "loss_rpn_bbox": 0.09523, "loss_cls": 0.43501, "acc": 93.93408, "loss_bbox": 0.20445, "loss": 0.91772, "time": 0.54032}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 4268, "data_time": 0.21021, "loss_rpn_cls": 0.15802, "loss_rpn_bbox": 0.09257, "loss_cls": 0.4287, "acc": 93.64795, "loss_bbox": 0.219, "loss": 0.89829, "time": 0.53362}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 4268, "data_time": 0.20575, "loss_rpn_cls": 0.1535, "loss_rpn_bbox": 0.1021, "loss_cls": 0.47575, "acc": 92.7168, "loss_bbox": 0.25437, "loss": 0.98572, "time": 0.52995}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 4268, "data_time": 0.21818, "loss_rpn_cls": 0.12907, "loss_rpn_bbox": 0.0909, "loss_cls": 0.48763, "acc": 92.37744, "loss_bbox": 0.27273, "loss": 0.98033, "time": 0.53484}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 4268, "data_time": 0.22217, "loss_rpn_cls": 0.14363, "loss_rpn_bbox": 0.09764, "loss_cls": 0.48271, "acc": 92.44043, "loss_bbox": 0.26497, "loss": 0.98894, "time": 0.5427}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 4268, "data_time": 0.21621, "loss_rpn_cls": 0.13085, "loss_rpn_bbox": 0.08463, "loss_cls": 0.49068, "acc": 92.09717, "loss_bbox": 0.28419, "loss": 0.99036, "time": 0.53654}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 4268, "data_time": 0.20885, "loss_rpn_cls": 0.12054, "loss_rpn_bbox": 0.09036, "loss_cls": 0.51115, "acc": 91.80664, "loss_bbox": 0.28878, "loss": 1.01083, "time": 0.52887}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 4268, "data_time": 0.2072, "loss_rpn_cls": 0.13135, "loss_rpn_bbox": 0.095, "loss_cls": 0.53722, "acc": 91.27979, "loss_bbox": 0.3071, "loss": 1.07067, "time": 0.52779}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 4268, "data_time": 0.20542, "loss_rpn_cls": 0.1385, "loss_rpn_bbox": 0.10267, "loss_cls": 0.52736, "acc": 90.99561, "loss_bbox": 0.31602, "loss": 1.08455, "time": 0.52842}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 4268, "data_time": 0.21053, "loss_rpn_cls": 0.10788, "loss_rpn_bbox": 0.08586, "loss_cls": 0.47503, "acc": 91.91943, "loss_bbox": 0.28683, "loss": 0.95561, "time": 0.53801}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 4268, "data_time": 0.21444, "loss_rpn_cls": 0.11592, "loss_rpn_bbox": 0.09657, "loss_cls": 0.48081, "acc": 91.67236, "loss_bbox": 0.28968, "loss": 0.98299, "time": 0.5359}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 4268, "data_time": 0.20082, "loss_rpn_cls": 0.10989, "loss_rpn_bbox": 0.08586, "loss_cls": 0.49329, "acc": 90.93359, "loss_bbox": 0.32567, "loss": 1.0147, "time": 0.5221}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 4268, "data_time": 0.20071, "loss_rpn_cls": 0.11654, "loss_rpn_bbox": 0.08952, "loss_cls": 0.47966, "acc": 91.4873, "loss_bbox": 0.29758, "loss": 0.98329, "time": 0.52946}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 4268, "data_time": 0.20146, "loss_rpn_cls": 0.08615, "loss_rpn_bbox": 0.08372, "loss_cls": 0.47259, "acc": 90.68652, "loss_bbox": 0.33003, "loss": 0.97249, "time": 0.5256}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.02, "memory": 4268, "data_time": 0.21296, "loss_rpn_cls": 0.08927, "loss_rpn_bbox": 0.08387, "loss_cls": 0.49696, "acc": 90.19238, "loss_bbox": 0.34836, "loss": 1.01846, "time": 0.5323}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.02, "memory": 4268, "data_time": 0.20221, "loss_rpn_cls": 0.09802, "loss_rpn_bbox": 0.08656, "loss_cls": 0.49228, "acc": 90.14062, "loss_bbox": 0.34871, "loss": 1.02557, "time": 0.52897}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.02, "memory": 4268, "data_time": 0.21081, "loss_rpn_cls": 0.09237, "loss_rpn_bbox": 0.08534, "loss_cls": 0.47843, "acc": 90.28271, "loss_bbox": 0.33012, "loss": 0.98626, "time": 0.53298}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.02, "memory": 4268, "data_time": 0.22293, "loss_rpn_cls": 0.09093, "loss_rpn_bbox": 0.08137, "loss_cls": 0.48703, "acc": 90.49756, "loss_bbox": 0.33637, "loss": 0.9957, "time": 0.56556}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.02, "memory": 4268, "data_time": 0.20916, "loss_rpn_cls": 0.07818, "loss_rpn_bbox": 0.0723, "loss_cls": 0.46514, "acc": 90.43555, "loss_bbox": 0.33343, "loss": 0.94905, "time": 0.53127}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.02, "memory": 4268, "data_time": 0.20433, "loss_rpn_cls": 0.08373, "loss_rpn_bbox": 0.08144, "loss_cls": 0.47528, "acc": 90.17285, "loss_bbox": 0.34306, "loss": 0.9835, "time": 0.52636}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.02, "memory": 4268, "data_time": 0.19686, "loss_rpn_cls": 0.08316, "loss_rpn_bbox": 0.08345, "loss_cls": 0.45516, "acc": 90.33545, "loss_bbox": 0.33444, "loss": 0.95619, "time": 0.51825}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.02, "memory": 4268, "data_time": 0.20482, "loss_rpn_cls": 0.08887, "loss_rpn_bbox": 0.08066, "loss_cls": 0.43973, "acc": 90.32666, "loss_bbox": 0.33682, "loss": 0.94609, "time": 0.52912}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.02, "memory": 4268, "data_time": 0.20939, "loss_rpn_cls": 0.08312, "loss_rpn_bbox": 0.08014, "loss_cls": 0.47634, "acc": 89.33252, "loss_bbox": 0.36366, "loss": 1.00326, "time": 0.53646}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.02, "memory": 4268, "data_time": 0.20273, "loss_rpn_cls": 0.08422, "loss_rpn_bbox": 0.08321, "loss_cls": 0.45876, "acc": 89.72461, "loss_bbox": 0.35589, "loss": 0.98208, "time": 0.529}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.02, "memory": 4268, "data_time": 0.20052, "loss_rpn_cls": 0.08124, "loss_rpn_bbox": 0.08555, "loss_cls": 0.44303, "acc": 90.30811, "loss_bbox": 0.3327, "loss": 0.94253, "time": 0.52427}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.02, "memory": 4268, "data_time": 0.34114, "loss_rpn_cls": 0.07835, "loss_rpn_bbox": 0.07663, "loss_cls": 0.45375, "acc": 90.15918, "loss_bbox": 0.32856, "loss": 0.93729, "time": 0.6809}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.02, "memory": 4268, "data_time": 0.52977, "loss_rpn_cls": 0.08841, "loss_rpn_bbox": 0.07498, "loss_cls": 0.44138, "acc": 90.35498, "loss_bbox": 0.32503, "loss": 0.92979, "time": 0.88062}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.02, "memory": 4268, "data_time": 0.38948, "loss_rpn_cls": 0.09037, "loss_rpn_bbox": 0.08423, "loss_cls": 0.47423, "acc": 89.65723, "loss_bbox": 0.34895, "loss": 0.99779, "time": 0.72192}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.02, "memory": 4268, "data_time": 0.26526, "loss_rpn_cls": 0.06773, "loss_rpn_bbox": 0.07482, "loss_cls": 0.44444, "acc": 90.17676, "loss_bbox": 0.32356, "loss": 0.91056, "time": 0.59478}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.02, "memory": 4268, "data_time": 0.25091, "loss_rpn_cls": 0.08603, "loss_rpn_bbox": 0.07878, "loss_cls": 0.42325, "acc": 90.47754, "loss_bbox": 0.3229, "loss": 0.91097, "time": 0.58804}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 0.02, "memory": 4268, "data_time": 0.21049, "loss_rpn_cls": 0.0752, "loss_rpn_bbox": 0.07792, "loss_cls": 0.42682, "acc": 90.1416, "loss_bbox": 0.32838, "loss": 0.90832, "time": 0.53297}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.02, "memory": 4268, "data_time": 0.21096, "loss_rpn_cls": 0.08156, "loss_rpn_bbox": 0.07842, "loss_cls": 0.4425, "acc": 89.94922, "loss_bbox": 0.33469, "loss": 0.93717, "time": 0.54094}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 0.02, "memory": 4268, "data_time": 0.19438, "loss_rpn_cls": 0.07403, "loss_rpn_bbox": 0.07182, "loss_cls": 0.43766, "acc": 89.73242, "loss_bbox": 0.3381, "loss": 0.92161, "time": 0.51526}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.02, "memory": 4268, "data_time": 0.2133, "loss_rpn_cls": 0.07215, "loss_rpn_bbox": 0.07868, "loss_cls": 0.43521, "acc": 89.72314, "loss_bbox": 0.33981, "loss": 0.92585, "time": 0.53466}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 0.02, "memory": 4268, "data_time": 0.21185, "loss_rpn_cls": 0.08537, "loss_rpn_bbox": 0.07829, "loss_cls": 0.45678, "acc": 89.65186, "loss_bbox": 0.34064, "loss": 0.96107, "time": 0.53389}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 0.02, "memory": 4268, "data_time": 0.20497, "loss_rpn_cls": 0.07207, "loss_rpn_bbox": 0.07436, "loss_cls": 0.42401, "acc": 90.23242, "loss_bbox": 0.3267, "loss": 0.89714, "time": 0.52968}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 0.02, "memory": 4268, "data_time": 0.20237, "loss_rpn_cls": 0.07817, "loss_rpn_bbox": 0.07062, "loss_cls": 0.43277, "acc": 90.17041, "loss_bbox": 0.32696, "loss": 0.90851, "time": 0.52201}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 0.02, "memory": 4268, "data_time": 0.21162, "loss_rpn_cls": 0.07232, "loss_rpn_bbox": 0.08039, "loss_cls": 0.43956, "acc": 89.72217, "loss_bbox": 0.34202, "loss": 0.93429, "time": 0.53355}
{"mode": "train", "epoch": 1, "iter": 2050, "lr": 0.02, "memory": 4268, "data_time": 0.23884, "loss_rpn_cls": 0.07592, "loss_rpn_bbox": 0.08115, "loss_cls": 0.43458, "acc": 89.45947, "loss_bbox": 0.34386, "loss": 0.9355, "time": 0.56596}
{"mode": "train", "epoch": 1, "iter": 2100, "lr": 0.02, "memory": 4268, "data_time": 0.21085, "loss_rpn_cls": 0.07706, "loss_rpn_bbox": 0.08297, "loss_cls": 0.41199, "acc": 89.83203, "loss_bbox": 0.34045, "loss": 0.91247, "time": 0.53002}
{"mode": "train", "epoch": 1, "iter": 2150, "lr": 0.02, "memory": 4268, "data_time": 0.20887, "loss_rpn_cls": 0.06969, "loss_rpn_bbox": 0.07283, "loss_cls": 0.39979, "acc": 90.49707, "loss_bbox": 0.31078, "loss": 0.8531, "time": 0.53556}
{"mode": "train", "epoch": 1, "iter": 2200, "lr": 0.02, "memory": 4268, "data_time": 0.2093, "loss_rpn_cls": 0.06557, "loss_rpn_bbox": 0.07153, "loss_cls": 0.42274, "acc": 89.97217, "loss_bbox": 0.33122, "loss": 0.89106, "time": 0.5333}
{"mode": "train", "epoch": 1, "iter": 2250, "lr": 0.02, "memory": 4268, "data_time": 0.20606, "loss_rpn_cls": 0.0727, "loss_rpn_bbox": 0.07442, "loss_cls": 0.39362, "acc": 90.54248, "loss_bbox": 0.3134, "loss": 0.85414, "time": 0.52651}
