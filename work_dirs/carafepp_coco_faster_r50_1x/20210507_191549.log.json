{"env_info": "sys.platform: linux\nPython: 3.7.9 (default, Aug 31 2020, 12:42:55) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: GeForce RTX 2080 Ti\nCUDA_HOME: None\nGCC: gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44)\nPyTorch: 1.6.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.5.0 (Git Hash e2ac1fac44c5078ca927cb9b90e1b3066a0b2ed0)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.7.0\nOpenCV: 4.4.0\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.2\nMMDetection: 2.12.0+", "config": "model = dict(\n    type='FasterRCNN',\n    pretrained='work_dirs/ipth/imagenet_resnet50_carafed_pretrained.pth',\n    backbone=dict(\n        type='ResNet_carafed',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN_CARAFE',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5,\n        upsample_cfg=dict(\n            type='carafe',\n            up_kernel=5,\n            up_group=1,\n            encoder_kernel=3,\n            encoder_dilation=1,\n            compressed_channels=64)),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=80,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))))\ntrain_cfg = dict(\n    rpn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.7,\n            neg_iou_thr=0.3,\n            min_pos_iou=0.3,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=256,\n            pos_fraction=0.5,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    rpn_proposal=dict(\n        nms_across_levels=False,\n        nms_pre=2000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0.5,\n            match_low_quality=False,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=512,\n            pos_fraction=0.25,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=True),\n        pos_weight=-1,\n        debug=False))\ntest_cfg = dict(\n    rpn=dict(\n        nms_across_levels=False,\n        nms_pre=1000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'CocoDataset'\ndata_root = '../data/coco/'\nannotations_root = '../data/coco/annotations/'\nimage_root = '../data/coco/'\nimg_scale = (1333, 800)\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=0,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/instances_train2017.json',\n        img_prefix='../data/coco/train2017',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/instances_val2017.json',\n        img_prefix='../data/coco/val2017',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/image_info_test-dev2017.json',\n        img_prefix='../data/coco/test2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/carafepp_coco_faster_r50_1x'\ngpu_ids = range(0, 8)\n", "seed": null, "exp_name": "carafepp_coco_faster_r50_1x.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 8797, "data_time": 0.24357, "loss_rpn_cls": 0.45721, "loss_rpn_bbox": 0.10245, "loss_cls": 1.14891, "acc": 89.96973, "loss_bbox": 0.09263, "loss": 1.80119, "time": 0.73975}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 8797, "data_time": 0.18169, "loss_rpn_cls": 0.25038, "loss_rpn_bbox": 0.0946, "loss_cls": 0.49452, "acc": 94.79736, "loss_bbox": 0.19436, "loss": 1.03386, "time": 0.64038}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 8797, "data_time": 0.18109, "loss_rpn_cls": 0.22113, "loss_rpn_bbox": 0.09333, "loss_cls": 0.46893, "acc": 94.31372, "loss_bbox": 0.20637, "loss": 0.98976, "time": 0.64056}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 8797, "data_time": 0.18425, "loss_rpn_cls": 0.20318, "loss_rpn_bbox": 0.09625, "loss_cls": 0.44635, "acc": 93.8064, "loss_bbox": 0.22087, "loss": 0.96664, "time": 0.64095}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 8797, "data_time": 0.18155, "loss_rpn_cls": 0.16096, "loss_rpn_bbox": 0.09742, "loss_cls": 0.42671, "acc": 93.48096, "loss_bbox": 0.23198, "loss": 0.91707, "time": 0.63966}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 8797, "data_time": 0.18475, "loss_rpn_cls": 0.13801, "loss_rpn_bbox": 0.09172, "loss_cls": 0.44739, "acc": 92.84717, "loss_bbox": 0.2612, "loss": 0.93832, "time": 0.6391}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 8797, "data_time": 0.18139, "loss_rpn_cls": 0.12142, "loss_rpn_bbox": 0.08889, "loss_cls": 0.44159, "acc": 92.73022, "loss_bbox": 0.27043, "loss": 0.92233, "time": 0.63934}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 8797, "data_time": 0.18235, "loss_rpn_cls": 0.12655, "loss_rpn_bbox": 0.09025, "loss_cls": 0.4799, "acc": 91.59033, "loss_bbox": 0.31299, "loss": 1.0097, "time": 0.64119}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 8797, "data_time": 0.18274, "loss_rpn_cls": 0.11613, "loss_rpn_bbox": 0.08776, "loss_cls": 0.48225, "acc": 91.28662, "loss_bbox": 0.33067, "loss": 1.01681, "time": 0.64189}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 8797, "data_time": 0.1856, "loss_rpn_cls": 0.11427, "loss_rpn_bbox": 0.086, "loss_cls": 0.49157, "acc": 91.1377, "loss_bbox": 0.33785, "loss": 1.02969, "time": 0.63978}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 8797, "data_time": 0.18451, "loss_rpn_cls": 0.10854, "loss_rpn_bbox": 0.08247, "loss_cls": 0.48514, "acc": 90.88062, "loss_bbox": 0.34175, "loss": 1.01791, "time": 0.63926}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 8797, "data_time": 0.18914, "loss_rpn_cls": 0.10156, "loss_rpn_bbox": 0.08285, "loss_cls": 0.48188, "acc": 90.25757, "loss_bbox": 0.36712, "loss": 1.03341, "time": 0.64383}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 8797, "data_time": 0.18184, "loss_rpn_cls": 0.09934, "loss_rpn_bbox": 0.08806, "loss_cls": 0.46906, "acc": 90.28052, "loss_bbox": 0.36726, "loss": 1.02371, "time": 0.64164}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 8797, "data_time": 0.1801, "loss_rpn_cls": 0.09285, "loss_rpn_bbox": 0.0843, "loss_cls": 0.46899, "acc": 89.60059, "loss_bbox": 0.3939, "loss": 1.04004, "time": 0.6448}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 8797, "data_time": 0.1882, "loss_rpn_cls": 0.08469, "loss_rpn_bbox": 0.08449, "loss_cls": 0.44762, "acc": 89.91455, "loss_bbox": 0.37827, "loss": 0.99507, "time": 0.64292}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 8797, "data_time": 0.18581, "loss_rpn_cls": 0.08579, "loss_rpn_bbox": 0.08333, "loss_cls": 0.45363, "acc": 89.81641, "loss_bbox": 0.37778, "loss": 1.00053, "time": 0.64461}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.02, "memory": 8797, "data_time": 0.18352, "loss_rpn_cls": 0.07893, "loss_rpn_bbox": 0.07973, "loss_cls": 0.43588, "acc": 89.88843, "loss_bbox": 0.37471, "loss": 0.96925, "time": 0.64116}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.02, "memory": 8797, "data_time": 0.18734, "loss_rpn_cls": 0.07721, "loss_rpn_bbox": 0.07947, "loss_cls": 0.44293, "acc": 89.70117, "loss_bbox": 0.38483, "loss": 0.98445, "time": 0.64075}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.02, "memory": 8797, "data_time": 0.1864, "loss_rpn_cls": 0.08099, "loss_rpn_bbox": 0.0779, "loss_cls": 0.43326, "acc": 89.9104, "loss_bbox": 0.37063, "loss": 0.96278, "time": 0.64314}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.02, "memory": 8797, "data_time": 0.18116, "loss_rpn_cls": 0.07832, "loss_rpn_bbox": 0.07785, "loss_cls": 0.42238, "acc": 89.72192, "loss_bbox": 0.3711, "loss": 0.94965, "time": 0.6391}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.02, "memory": 8797, "data_time": 0.18239, "loss_rpn_cls": 0.07358, "loss_rpn_bbox": 0.07551, "loss_cls": 0.41866, "acc": 89.79297, "loss_bbox": 0.37078, "loss": 0.93853, "time": 0.64276}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.02, "memory": 8797, "data_time": 0.18593, "loss_rpn_cls": 0.06628, "loss_rpn_bbox": 0.07314, "loss_cls": 0.39294, "acc": 90.22144, "loss_bbox": 0.36042, "loss": 0.89277, "time": 0.64051}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.02, "memory": 8797, "data_time": 0.18918, "loss_rpn_cls": 0.07277, "loss_rpn_bbox": 0.08058, "loss_cls": 0.40919, "acc": 89.74829, "loss_bbox": 0.37448, "loss": 0.93703, "time": 0.64315}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.02, "memory": 8797, "data_time": 0.18981, "loss_rpn_cls": 0.07562, "loss_rpn_bbox": 0.08054, "loss_cls": 0.40161, "acc": 89.79102, "loss_bbox": 0.3735, "loss": 0.93126, "time": 0.64477}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.02, "memory": 8797, "data_time": 0.18499, "loss_rpn_cls": 0.06592, "loss_rpn_bbox": 0.07195, "loss_cls": 0.38647, "acc": 90.28882, "loss_bbox": 0.35226, "loss": 0.8766, "time": 0.6445}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.02, "memory": 8797, "data_time": 0.19177, "loss_rpn_cls": 0.06836, "loss_rpn_bbox": 0.07334, "loss_cls": 0.38091, "acc": 90.16089, "loss_bbox": 0.35251, "loss": 0.87511, "time": 0.65327}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.02, "memory": 8797, "data_time": 0.22943, "loss_rpn_cls": 0.0783, "loss_rpn_bbox": 0.07707, "loss_cls": 0.39261, "acc": 89.72656, "loss_bbox": 0.36815, "loss": 0.91613, "time": 0.72145}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.02, "memory": 8797, "data_time": 0.20045, "loss_rpn_cls": 0.06746, "loss_rpn_bbox": 0.07144, "loss_cls": 0.36634, "acc": 90.4375, "loss_bbox": 0.34858, "loss": 0.85382, "time": 0.69465}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.02, "memory": 8797, "data_time": 0.19267, "loss_rpn_cls": 0.06492, "loss_rpn_bbox": 0.0725, "loss_cls": 0.38274, "acc": 89.74219, "loss_bbox": 0.3735, "loss": 0.89366, "time": 0.6518}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.02, "memory": 8797, "data_time": 0.18624, "loss_rpn_cls": 0.07115, "loss_rpn_bbox": 0.07901, "loss_cls": 0.37196, "acc": 90.06763, "loss_bbox": 0.35637, "loss": 0.87849, "time": 0.64592}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.02, "memory": 8797, "data_time": 0.19115, "loss_rpn_cls": 0.06201, "loss_rpn_bbox": 0.07125, "loss_cls": 0.3644, "acc": 90.09668, "loss_bbox": 0.35429, "loss": 0.85196, "time": 0.64332}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.02, "memory": 8797, "data_time": 0.18703, "loss_rpn_cls": 0.06449, "loss_rpn_bbox": 0.07334, "loss_cls": 0.36781, "acc": 90.13403, "loss_bbox": 0.35284, "loss": 0.85848, "time": 0.64376}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 0.02, "memory": 8797, "data_time": 0.18798, "loss_rpn_cls": 0.06385, "loss_rpn_bbox": 0.07377, "loss_cls": 0.35631, "acc": 90.39795, "loss_bbox": 0.34061, "loss": 0.83455, "time": 0.64426}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.02, "memory": 8797, "data_time": 0.18932, "loss_rpn_cls": 0.06579, "loss_rpn_bbox": 0.06917, "loss_cls": 0.37201, "acc": 90.01807, "loss_bbox": 0.35118, "loss": 0.85814, "time": 0.64086}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 0.02, "memory": 8797, "data_time": 0.18063, "loss_rpn_cls": 0.06739, "loss_rpn_bbox": 0.07295, "loss_cls": 0.3741, "acc": 89.78198, "loss_bbox": 0.36283, "loss": 0.87728, "time": 0.64276}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.02, "memory": 8797, "data_time": 0.18886, "loss_rpn_cls": 0.06193, "loss_rpn_bbox": 0.07447, "loss_cls": 0.36034, "acc": 90.30835, "loss_bbox": 0.34702, "loss": 0.84376, "time": 0.64286}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 0.02, "memory": 8797, "data_time": 0.18229, "loss_rpn_cls": 0.0621, "loss_rpn_bbox": 0.07404, "loss_cls": 0.36757, "acc": 89.77173, "loss_bbox": 0.35679, "loss": 0.8605, "time": 0.64127}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 0.02, "memory": 8797, "data_time": 0.18525, "loss_rpn_cls": 0.06186, "loss_rpn_bbox": 0.07067, "loss_cls": 0.34973, "acc": 90.34619, "loss_bbox": 0.34135, "loss": 0.8236, "time": 0.64252}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 0.02, "memory": 8797, "data_time": 0.18598, "loss_rpn_cls": 0.05954, "loss_rpn_bbox": 0.07381, "loss_cls": 0.34623, "acc": 90.30322, "loss_bbox": 0.33656, "loss": 0.81615, "time": 0.64192}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 0.02, "memory": 8797, "data_time": 0.18844, "loss_rpn_cls": 0.05857, "loss_rpn_bbox": 0.06967, "loss_cls": 0.37003, "acc": 90.0647, "loss_bbox": 0.34673, "loss": 0.84501, "time": 0.64482}
{"mode": "train", "epoch": 1, "iter": 2050, "lr": 0.02, "memory": 8797, "data_time": 0.18375, "loss_rpn_cls": 0.05723, "loss_rpn_bbox": 0.07063, "loss_cls": 0.36042, "acc": 89.86011, "loss_bbox": 0.35879, "loss": 0.84706, "time": 0.64222}
{"mode": "train", "epoch": 1, "iter": 2100, "lr": 0.02, "memory": 8797, "data_time": 0.18642, "loss_rpn_cls": 0.05614, "loss_rpn_bbox": 0.06627, "loss_cls": 0.34265, "acc": 90.28369, "loss_bbox": 0.34128, "loss": 0.80635, "time": 0.64546}
{"mode": "train", "epoch": 1, "iter": 2150, "lr": 0.02, "memory": 8797, "data_time": 0.18786, "loss_rpn_cls": 0.06008, "loss_rpn_bbox": 0.06804, "loss_cls": 0.33996, "acc": 90.36377, "loss_bbox": 0.33684, "loss": 0.80492, "time": 0.64241}
