2021-05-07 11:04:41,544 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.9 (default, Aug 31 2020, 12:42:55) [GCC 7.3.0]
CUDA available: True
GPU 0,1,2,3,4,5,6,7: GeForce RTX 2080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 10.0, V10.0.130
GCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609
PyTorch: 1.6.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.5.0 (Git Hash e2ac1fac44c5078ca927cb9b90e1b3066a0b2ed0)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

TorchVision: 0.7.0
OpenCV: 4.4.0
MMCV: 1.3.3
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 10.2
MMDetection: 2.12.0+
------------------------------------------------------------

2021-05-07 11:04:42,010 - mmdet - INFO - Distributed training: True
2021-05-07 11:04:42,439 - mmdet - INFO - Config:
model = dict(
    type='MaskRCNN',
    pretrained='work_dirs/ipth/pretrained.pth',
    backbone=dict(
        type='ResNet_carafed',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch'),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
    roi_head=dict(
        type='StandardRoIHead',
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=dict(
            type='Shared2FCBBoxHead',
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=80,
            bbox_coder=dict(
                type='DeltaXYWHBBoxCoder',
                target_means=[0.0, 0.0, 0.0, 0.0],
                target_stds=[0.1, 0.1, 0.2, 0.2]),
            reg_class_agnostic=False,
            loss_cls=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
        mask_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        mask_head=dict(
            type='FCNMaskHead',
            num_convs=4,
            in_channels=256,
            conv_out_channels=256,
            num_classes=80,
            loss_mask=dict(
                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0),
            upsample_cfg=dict(type='deconv', scale_factor=2))),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=-1,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.5,
                neg_iou_thr=0.5,
                min_pos_iou=0.5,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=512,
                pos_fraction=0.25,
                neg_pos_ub=-1,
                add_gt_as_proposals=True),
            mask_size=28,
            pos_weight=-1,
            debug=False)),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100,
            mask_thr_binary=0.5)))
dataset_type = 'CocoDataset'
data_root = '../data/coco/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=0,
    train=dict(
        type='CocoDataset',
        ann_file='../data/coco/annotations/instances_train2017.json',
        img_prefix='../data/coco/train2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(
                type='Collect',
                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file='../data/coco/annotations/instances_val2017.json',
        img_prefix='../data/coco/val2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file='../data/coco/annotations/image_info_test-dev2017.json',
        img_prefix='../data/coco/test2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(metric=['bbox', 'segm'])
optimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001,
    step=[8, 11])
runner = dict(type='EpochBasedRunner', max_epochs=12)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = './work_dirs/carafeppp_coco_mask_r50_1x__BK'
gpu_ids = range(0, 1)

2021-05-07 11:05:07,594 - mmdet - INFO - Start running, host: root@c29bb9d22aa7, work_dir: /root/userfolder/mmdetection/work_dirs/carafeppp_coco_mask_r50_1x__BK
2021-05-07 11:05:07,594 - mmdet - INFO - workflow: [('train', 1)], max: 12 epochs
2021-05-07 11:05:35,672 - mmdet - INFO - Epoch [1][50/58633]	lr: 1.978e-03, eta: 4 days, 13:39:10, time: 0.561, data_time: 0.173, memory: 8661, loss_rpn_cls: 0.4464, loss_rpn_bbox: 0.1038, loss_cls: 0.9283, acc: 89.8398, loss_bbox: 0.1392, loss_mask: 0.7784, loss: 2.3962
2021-05-07 11:05:59,588 - mmdet - INFO - Epoch [1][100/58633]	lr: 3.976e-03, eta: 4 days, 5:33:07, time: 0.478, data_time: 0.105, memory: 8661, loss_rpn_cls: 0.2312, loss_rpn_bbox: 0.1110, loss_cls: 0.4897, acc: 94.4746, loss_bbox: 0.2104, loss_mask: 0.6942, loss: 1.7365
2021-05-07 11:06:24,193 - mmdet - INFO - Epoch [1][150/58633]	lr: 5.974e-03, eta: 4 days, 3:45:11, time: 0.492, data_time: 0.110, memory: 8661, loss_rpn_cls: 0.1756, loss_rpn_bbox: 0.0904, loss_cls: 0.5101, acc: 92.9121, loss_bbox: 0.2672, loss_mask: 0.6728, loss: 1.7161
2021-05-07 11:06:48,939 - mmdet - INFO - Epoch [1][200/58633]	lr: 7.972e-03, eta: 4 days, 2:59:04, time: 0.495, data_time: 0.117, memory: 8661, loss_rpn_cls: 0.1641, loss_rpn_bbox: 0.1077, loss_cls: 0.4996, acc: 92.3125, loss_bbox: 0.2934, loss_mask: 0.6547, loss: 1.7195
2021-05-07 11:07:13,149 - mmdet - INFO - Epoch [1][250/58633]	lr: 9.970e-03, eta: 4 days, 2:05:58, time: 0.484, data_time: 0.105, memory: 8863, loss_rpn_cls: 0.1712, loss_rpn_bbox: 0.1044, loss_cls: 0.4885, acc: 92.4707, loss_bbox: 0.2862, loss_mask: 0.6460, loss: 1.6963
2021-05-07 11:07:37,709 - mmdet - INFO - Epoch [1][300/58633]	lr: 1.197e-02, eta: 4 days, 1:44:14, time: 0.491, data_time: 0.106, memory: 8863, loss_rpn_cls: 0.1753, loss_rpn_bbox: 0.1090, loss_cls: 0.5308, acc: 91.6758, loss_bbox: 0.3113, loss_mask: 0.6354, loss: 1.7618
2021-05-07 11:08:02,262 - mmdet - INFO - Epoch [1][350/58633]	lr: 1.397e-02, eta: 4 days, 1:28:23, time: 0.491, data_time: 0.106, memory: 8863, loss_rpn_cls: 0.1510, loss_rpn_bbox: 0.0952, loss_cls: 0.5504, acc: 92.3320, loss_bbox: 0.2877, loss_mask: 0.6407, loss: 1.7250
2021-05-07 11:08:25,860 - mmdet - INFO - Epoch [1][400/58633]	lr: 1.596e-02, eta: 4 days, 0:48:30, time: 0.472, data_time: 0.100, memory: 8863, loss_rpn_cls: 0.1256, loss_rpn_bbox: 0.0733, loss_cls: 0.4730, acc: 93.4102, loss_bbox: 0.2453, loss_mask: 0.6245, loss: 1.5418
2021-05-07 11:08:50,043 - mmdet - INFO - Epoch [1][450/58633]	lr: 1.796e-02, eta: 4 days, 0:32:21, time: 0.484, data_time: 0.104, memory: 8863, loss_rpn_cls: 0.1639, loss_rpn_bbox: 0.0954, loss_cls: 0.5525, acc: 91.9395, loss_bbox: 0.2964, loss_mask: 0.6235, loss: 1.7317
2021-05-07 11:09:14,747 - mmdet - INFO - Epoch [1][500/58633]	lr: 1.996e-02, eta: 4 days, 0:31:44, time: 0.494, data_time: 0.117, memory: 8863, loss_rpn_cls: 0.3435, loss_rpn_bbox: 0.1626, loss_cls: 0.6603, acc: 93.9199, loss_bbox: 0.2277, loss_mask: 0.6777, loss: 2.0717
2021-05-07 11:09:39,051 - mmdet - INFO - Epoch [1][550/58633]	lr: 2.000e-02, eta: 4 days, 0:22:34, time: 0.486, data_time: 0.109, memory: 8863, loss_rpn_cls: 0.2428, loss_rpn_bbox: 0.1161, loss_cls: 0.5709, acc: 93.8105, loss_bbox: 0.2419, loss_mask: 0.6778, loss: 1.8495
2021-05-07 11:10:02,944 - mmdet - INFO - Epoch [1][600/58633]	lr: 2.000e-02, eta: 4 days, 0:06:54, time: 0.478, data_time: 0.104, memory: 8863, loss_rpn_cls: 0.2585, loss_rpn_bbox: 0.1014, loss_cls: 0.4320, acc: 94.4004, loss_bbox: 0.1980, loss_mask: 0.6547, loss: 1.6446
2021-05-07 11:10:26,913 - mmdet - INFO - Epoch [1][650/58633]	lr: 2.000e-02, eta: 3 days, 23:54:55, time: 0.479, data_time: 0.105, memory: 8863, loss_rpn_cls: 0.2517, loss_rpn_bbox: 0.1171, loss_cls: 0.4508, acc: 93.9824, loss_bbox: 0.2124, loss_mask: 0.6421, loss: 1.6742
2021-05-07 11:10:50,998 - mmdet - INFO - Epoch [1][700/58633]	lr: 2.000e-02, eta: 3 days, 23:46:33, time: 0.482, data_time: 0.115, memory: 8863, loss_rpn_cls: 0.2914, loss_rpn_bbox: 0.1300, loss_cls: 0.4151, acc: 94.5234, loss_bbox: 0.1808, loss_mask: 0.6471, loss: 1.6643
2021-05-07 11:11:14,750 - mmdet - INFO - Epoch [1][750/58633]	lr: 2.000e-02, eta: 3 days, 23:34:04, time: 0.475, data_time: 0.108, memory: 8863, loss_rpn_cls: 0.2202, loss_rpn_bbox: 0.1130, loss_cls: 0.4622, acc: 93.7031, loss_bbox: 0.2263, loss_mask: 0.6468, loss: 1.6685
2021-05-07 11:11:39,396 - mmdet - INFO - Epoch [1][800/58633]	lr: 2.000e-02, eta: 3 days, 23:36:08, time: 0.493, data_time: 0.117, memory: 8873, loss_rpn_cls: 0.2565, loss_rpn_bbox: 0.1169, loss_cls: 0.4736, acc: 92.9004, loss_bbox: 0.2501, loss_mask: 0.6398, loss: 1.7369
2021-05-07 11:12:02,990 - mmdet - INFO - Epoch [1][850/58633]	lr: 2.000e-02, eta: 3 days, 23:23:26, time: 0.472, data_time: 0.102, memory: 8873, loss_rpn_cls: 0.1757, loss_rpn_bbox: 0.0869, loss_cls: 0.3982, acc: 94.5020, loss_bbox: 0.1949, loss_mask: 0.6438, loss: 1.4995
