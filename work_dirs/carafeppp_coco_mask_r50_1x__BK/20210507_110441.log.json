{"env_info": "sys.platform: linux\nPython: 3.7.9 (default, Aug 31 2020, 12:42:55) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.130\nGCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\nPyTorch: 1.6.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.5.0 (Git Hash e2ac1fac44c5078ca927cb9b90e1b3066a0b2ed0)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.7.0\nOpenCV: 4.4.0\nMMCV: 1.3.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.2\nMMDetection: 2.12.0+", "config": "model = dict(\n    type='MaskRCNN',\n    pretrained='work_dirs/ipth/pretrained.pth',\n    backbone=dict(\n        type='ResNet_carafed',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=80,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=80,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0),\n            upsample_cfg=dict(type='deconv', scale_factor=2))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = '../data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=0,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/instances_train2017.json',\n        img_prefix='../data/coco/train2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/instances_val2017.json',\n        img_prefix='../data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/image_info_test-dev2017.json',\n        img_prefix='../data/coco/test2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/carafeppp_coco_mask_r50_1x__BK'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "carafeppp_coco_mask_r50_1x__BK.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 8661, "data_time": 0.17295, "loss_rpn_cls": 0.44644, "loss_rpn_bbox": 0.1038, "loss_cls": 0.92827, "acc": 89.83984, "loss_bbox": 0.13925, "loss_mask": 0.7784, "loss": 2.39616, "time": 0.56109}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 8661, "data_time": 0.10532, "loss_rpn_cls": 0.23118, "loss_rpn_bbox": 0.11104, "loss_cls": 0.48967, "acc": 94.47461, "loss_bbox": 0.21045, "loss_mask": 0.69419, "loss": 1.73653, "time": 0.47826}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 8661, "data_time": 0.10952, "loss_rpn_cls": 0.17562, "loss_rpn_bbox": 0.09039, "loss_cls": 0.51006, "acc": 92.91211, "loss_bbox": 0.26719, "loss_mask": 0.67284, "loss": 1.71609, "time": 0.49217}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 8661, "data_time": 0.11693, "loss_rpn_cls": 0.1641, "loss_rpn_bbox": 0.10773, "loss_cls": 0.49956, "acc": 92.3125, "loss_bbox": 0.29343, "loss_mask": 0.6547, "loss": 1.71952, "time": 0.49491}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 8863, "data_time": 0.10465, "loss_rpn_cls": 0.17118, "loss_rpn_bbox": 0.10444, "loss_cls": 0.48851, "acc": 92.4707, "loss_bbox": 0.28616, "loss_mask": 0.64603, "loss": 1.69632, "time": 0.48414}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 8863, "data_time": 0.10622, "loss_rpn_cls": 0.17528, "loss_rpn_bbox": 0.10901, "loss_cls": 0.53084, "acc": 91.67578, "loss_bbox": 0.31128, "loss_mask": 0.63541, "loss": 1.76182, "time": 0.4912}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 8863, "data_time": 0.10598, "loss_rpn_cls": 0.15101, "loss_rpn_bbox": 0.09521, "loss_cls": 0.55036, "acc": 92.33203, "loss_bbox": 0.2877, "loss_mask": 0.64071, "loss": 1.72499, "time": 0.49108}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 8863, "data_time": 0.10027, "loss_rpn_cls": 0.12558, "loss_rpn_bbox": 0.07332, "loss_cls": 0.47297, "acc": 93.41016, "loss_bbox": 0.24533, "loss_mask": 0.62454, "loss": 1.54176, "time": 0.47203}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 8863, "data_time": 0.1038, "loss_rpn_cls": 0.16391, "loss_rpn_bbox": 0.09541, "loss_cls": 0.55253, "acc": 91.93945, "loss_bbox": 0.2964, "loss_mask": 0.62347, "loss": 1.73173, "time": 0.48353}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 8863, "data_time": 0.11709, "loss_rpn_cls": 0.34349, "loss_rpn_bbox": 0.16263, "loss_cls": 0.66029, "acc": 93.91992, "loss_bbox": 0.22766, "loss_mask": 0.67767, "loss": 2.07174, "time": 0.49409}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 8863, "data_time": 0.10856, "loss_rpn_cls": 0.24284, "loss_rpn_bbox": 0.11614, "loss_cls": 0.57086, "acc": 93.81055, "loss_bbox": 0.24186, "loss_mask": 0.67782, "loss": 1.84953, "time": 0.48603}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 8863, "data_time": 0.10418, "loss_rpn_cls": 0.25849, "loss_rpn_bbox": 0.10144, "loss_cls": 0.432, "acc": 94.40039, "loss_bbox": 0.198, "loss_mask": 0.65473, "loss": 1.64465, "time": 0.47789}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 8863, "data_time": 0.10464, "loss_rpn_cls": 0.25173, "loss_rpn_bbox": 0.11714, "loss_cls": 0.45082, "acc": 93.98242, "loss_bbox": 0.21236, "loss_mask": 0.64214, "loss": 1.67419, "time": 0.47935}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 8863, "data_time": 0.1149, "loss_rpn_cls": 0.29138, "loss_rpn_bbox": 0.12997, "loss_cls": 0.41506, "acc": 94.52344, "loss_bbox": 0.18085, "loss_mask": 0.64706, "loss": 1.66431, "time": 0.48171}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 8863, "data_time": 0.1077, "loss_rpn_cls": 0.22023, "loss_rpn_bbox": 0.11295, "loss_cls": 0.46221, "acc": 93.70312, "loss_bbox": 0.22628, "loss_mask": 0.64685, "loss": 1.66852, "time": 0.47507}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 8873, "data_time": 0.11728, "loss_rpn_cls": 0.25654, "loss_rpn_bbox": 0.11688, "loss_cls": 0.47361, "acc": 92.90039, "loss_bbox": 0.25014, "loss_mask": 0.63975, "loss": 1.73692, "time": 0.49288}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.02, "memory": 8873, "data_time": 0.10201, "loss_rpn_cls": 0.17569, "loss_rpn_bbox": 0.08691, "loss_cls": 0.39821, "acc": 94.50195, "loss_bbox": 0.19487, "loss_mask": 0.64377, "loss": 1.49945, "time": 0.47187}
