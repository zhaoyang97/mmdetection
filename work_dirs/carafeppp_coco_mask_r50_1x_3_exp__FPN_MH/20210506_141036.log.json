{"env_info": "sys.platform: linux\nPython: 3.6.12 |Anaconda, Inc.| (default, Sep  8 2020, 23:10:56) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.130\nGCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\nPyTorch: 1.4.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CUDA Runtime 10.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.1\n  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.5.0\nOpenCV: 4.4.0\nMMCV: 1.1.5\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.0\nMMDetection: 2.5.0+", "config": "model = dict(\n    type='MaskRCNN',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN_CARAFE_3_exp',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=80,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead_3_exp',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=80,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0),\n            upsample_cfg=dict(type='carafe', scale_factor=2))))\ntrain_cfg = dict(\n    rpn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.7,\n            neg_iou_thr=0.3,\n            min_pos_iou=0.3,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=256,\n            pos_fraction=0.5,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    rpn_proposal=dict(\n        nms_across_levels=False,\n        nms_pre=2000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0.5,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=512,\n            pos_fraction=0.25,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=True),\n        mask_size=28,\n        pos_weight=-1,\n        debug=False))\ntest_cfg = dict(\n    rpn=dict(\n        nms_across_levels=False,\n        nms_pre=1000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100,\n        mask_thr_binary=0.5))\ndataset_type = 'CocoDataset'\ndata_root = '../data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=0,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/instances_train2017.json',\n        img_prefix='../data/coco/train2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/instances_val2017.json',\n        img_prefix='../data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../data/coco/annotations/image_info_test-dev2017.json',\n        img_prefix='../data/coco/test2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\ntotal_epochs = 12\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/carafeppp_coco_mask_r50_1x_3_exp__FPN_MH'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "carafeppp_coco_mask_r50_1x_3_exp__FPN_MH.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 4162, "data_time": 0.33517, "loss_rpn_cls": 0.4944, "loss_rpn_bbox": 0.10577, "loss_cls": 1.49374, "acc": 84.40674, "loss_bbox": 0.07555, "loss_mask": 0.69521, "loss": 2.86466, "time": 0.82188}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 4371, "data_time": 0.25235, "loss_rpn_cls": 0.23406, "loss_rpn_bbox": 0.09324, "loss_cls": 0.46391, "acc": 94.69897, "loss_bbox": 0.17708, "loss_mask": 0.66405, "loss": 1.63235, "time": 0.66803}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 4371, "data_time": 0.25533, "loss_rpn_cls": 0.17897, "loss_rpn_bbox": 0.09315, "loss_cls": 0.41684, "acc": 94.32764, "loss_bbox": 0.18803, "loss_mask": 0.647, "loss": 1.52398, "time": 0.67838}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 4371, "data_time": 0.25057, "loss_rpn_cls": 0.15391, "loss_rpn_bbox": 0.09661, "loss_cls": 0.44403, "acc": 93.18994, "loss_bbox": 0.23462, "loss_mask": 0.63734, "loss": 1.56651, "time": 0.69048}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 4371, "data_time": 0.26134, "loss_rpn_cls": 0.13718, "loss_rpn_bbox": 0.09757, "loss_cls": 0.46227, "acc": 92.4729, "loss_bbox": 0.26449, "loss_mask": 0.60337, "loss": 1.56488, "time": 0.68635}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 4479, "data_time": 0.26723, "loss_rpn_cls": 0.12472, "loss_rpn_bbox": 0.09172, "loss_cls": 0.49566, "acc": 91.81226, "loss_bbox": 0.29256, "loss_mask": 0.58454, "loss": 1.58919, "time": 0.68409}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 4479, "data_time": 0.24673, "loss_rpn_cls": 0.10935, "loss_rpn_bbox": 0.08768, "loss_cls": 0.48448, "acc": 91.75195, "loss_bbox": 0.30158, "loss_mask": 0.53942, "loss": 1.5225, "time": 0.67534}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 4671, "data_time": 0.25749, "loss_rpn_cls": 0.11317, "loss_rpn_bbox": 0.08947, "loss_cls": 0.52781, "acc": 90.61621, "loss_bbox": 0.33859, "loss_mask": 0.51977, "loss": 1.58882, "time": 0.69223}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 4671, "data_time": 0.25418, "loss_rpn_cls": 0.10551, "loss_rpn_bbox": 0.08667, "loss_cls": 0.52018, "acc": 90.46069, "loss_bbox": 0.34807, "loss_mask": 0.50652, "loss": 1.56696, "time": 0.68118}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 4671, "data_time": 0.25612, "loss_rpn_cls": 0.09855, "loss_rpn_bbox": 0.0848, "loss_cls": 0.49896, "acc": 90.43823, "loss_bbox": 0.35437, "loss_mask": 0.48789, "loss": 1.52457, "time": 0.68652}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 4671, "data_time": 0.24498, "loss_rpn_cls": 0.09692, "loss_rpn_bbox": 0.08415, "loss_cls": 0.49593, "acc": 90.3667, "loss_bbox": 0.34514, "loss_mask": 0.48827, "loss": 1.5104, "time": 0.69093}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 4671, "data_time": 0.25364, "loss_rpn_cls": 0.09984, "loss_rpn_bbox": 0.0841, "loss_cls": 0.48091, "acc": 90.52051, "loss_bbox": 0.33788, "loss_mask": 0.47199, "loss": 1.47472, "time": 0.6839}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 4673, "data_time": 0.25478, "loss_rpn_cls": 0.09126, "loss_rpn_bbox": 0.08583, "loss_cls": 0.46608, "acc": 90.19946, "loss_bbox": 0.34957, "loss_mask": 0.45106, "loss": 1.4438, "time": 0.69025}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 4681, "data_time": 0.25559, "loss_rpn_cls": 0.08764, "loss_rpn_bbox": 0.0845, "loss_cls": 0.47269, "acc": 89.66943, "loss_bbox": 0.36507, "loss_mask": 0.44162, "loss": 1.45152, "time": 0.69998}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 4681, "data_time": 0.2647, "loss_rpn_cls": 0.08801, "loss_rpn_bbox": 0.08469, "loss_cls": 0.46271, "acc": 89.94141, "loss_bbox": 0.34694, "loss_mask": 0.43679, "loss": 1.41915, "time": 0.69461}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 4681, "data_time": 0.2691, "loss_rpn_cls": 0.08492, "loss_rpn_bbox": 0.08359, "loss_cls": 0.46471, "acc": 89.729, "loss_bbox": 0.35073, "loss_mask": 0.42903, "loss": 1.41299, "time": 0.68803}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.02, "memory": 4681, "data_time": 0.25838, "loss_rpn_cls": 0.07946, "loss_rpn_bbox": 0.07985, "loss_cls": 0.44165, "acc": 89.99731, "loss_bbox": 0.34092, "loss_mask": 0.42229, "loss": 1.36417, "time": 0.69233}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.02, "memory": 4681, "data_time": 0.26437, "loss_rpn_cls": 0.0787, "loss_rpn_bbox": 0.07897, "loss_cls": 0.44175, "acc": 89.71973, "loss_bbox": 0.35484, "loss_mask": 0.42085, "loss": 1.37511, "time": 0.69033}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.02, "memory": 4681, "data_time": 0.2523, "loss_rpn_cls": 0.07869, "loss_rpn_bbox": 0.0777, "loss_cls": 0.44708, "acc": 89.65381, "loss_bbox": 0.34695, "loss_mask": 0.41005, "loss": 1.36046, "time": 0.68979}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.02, "memory": 4702, "data_time": 0.24128, "loss_rpn_cls": 0.07627, "loss_rpn_bbox": 0.07769, "loss_cls": 0.42722, "acc": 89.83081, "loss_bbox": 0.34764, "loss_mask": 0.40279, "loss": 1.33161, "time": 0.69546}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.02, "memory": 4702, "data_time": 0.2709, "loss_rpn_cls": 0.07258, "loss_rpn_bbox": 0.07554, "loss_cls": 0.42754, "acc": 89.86182, "loss_bbox": 0.34059, "loss_mask": 0.40225, "loss": 1.31848, "time": 0.69068}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.02, "memory": 4702, "data_time": 0.25406, "loss_rpn_cls": 0.0683, "loss_rpn_bbox": 0.07153, "loss_cls": 0.4133, "acc": 89.93359, "loss_bbox": 0.34357, "loss_mask": 0.39293, "loss": 1.28962, "time": 0.67904}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.02, "memory": 4702, "data_time": 0.25965, "loss_rpn_cls": 0.07029, "loss_rpn_bbox": 0.0798, "loss_cls": 0.42647, "acc": 89.47217, "loss_bbox": 0.35339, "loss_mask": 0.39749, "loss": 1.32745, "time": 0.69983}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.02, "memory": 4702, "data_time": 0.25854, "loss_rpn_cls": 0.07484, "loss_rpn_bbox": 0.08088, "loss_cls": 0.42136, "acc": 89.51392, "loss_bbox": 0.35182, "loss_mask": 0.38626, "loss": 1.31517, "time": 0.7058}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.02, "memory": 4702, "data_time": 0.2471, "loss_rpn_cls": 0.06599, "loss_rpn_bbox": 0.07059, "loss_cls": 0.40488, "acc": 90.22168, "loss_bbox": 0.32893, "loss_mask": 0.38261, "loss": 1.253, "time": 0.68236}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.02, "memory": 4702, "data_time": 0.25299, "loss_rpn_cls": 0.06785, "loss_rpn_bbox": 0.07207, "loss_cls": 0.39502, "acc": 90.2229, "loss_bbox": 0.32774, "loss_mask": 0.37996, "loss": 1.24264, "time": 0.68783}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.02, "memory": 4704, "data_time": 0.2568, "loss_rpn_cls": 0.07498, "loss_rpn_bbox": 0.08004, "loss_cls": 0.40307, "acc": 89.92065, "loss_bbox": 0.33343, "loss_mask": 0.3735, "loss": 1.26502, "time": 0.69667}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.02, "memory": 4704, "data_time": 0.24998, "loss_rpn_cls": 0.06944, "loss_rpn_bbox": 0.07123, "loss_cls": 0.38283, "acc": 90.55322, "loss_bbox": 0.32089, "loss_mask": 0.36548, "loss": 1.20987, "time": 0.67953}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.02, "memory": 4704, "data_time": 0.25401, "loss_rpn_cls": 0.0656, "loss_rpn_bbox": 0.07272, "loss_cls": 0.39603, "acc": 89.71289, "loss_bbox": 0.34846, "loss_mask": 0.36242, "loss": 1.24523, "time": 0.69755}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.02, "memory": 4704, "data_time": 0.25245, "loss_rpn_cls": 0.07571, "loss_rpn_bbox": 0.07964, "loss_cls": 0.3881, "acc": 90.11133, "loss_bbox": 0.33063, "loss_mask": 0.36747, "loss": 1.24154, "time": 0.69422}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.02, "memory": 4704, "data_time": 0.24953, "loss_rpn_cls": 0.06194, "loss_rpn_bbox": 0.07274, "loss_cls": 0.39485, "acc": 89.88037, "loss_bbox": 0.3381, "loss_mask": 0.37041, "loss": 1.23803, "time": 0.69183}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.02, "memory": 4704, "data_time": 0.24929, "loss_rpn_cls": 0.06863, "loss_rpn_bbox": 0.07398, "loss_cls": 0.38967, "acc": 89.95557, "loss_bbox": 0.33134, "loss_mask": 0.37171, "loss": 1.23533, "time": 0.69317}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 0.02, "memory": 4704, "data_time": 0.2629, "loss_rpn_cls": 0.0658, "loss_rpn_bbox": 0.07364, "loss_cls": 0.37494, "acc": 90.3999, "loss_bbox": 0.31645, "loss_mask": 0.36225, "loss": 1.19309, "time": 0.68945}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.02, "memory": 4704, "data_time": 0.2637, "loss_rpn_cls": 0.0683, "loss_rpn_bbox": 0.06925, "loss_cls": 0.38045, "acc": 90.22949, "loss_bbox": 0.32445, "loss_mask": 0.3635, "loss": 1.20595, "time": 0.69799}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 0.02, "memory": 4704, "data_time": 0.26274, "loss_rpn_cls": 0.07079, "loss_rpn_bbox": 0.07361, "loss_cls": 0.39148, "acc": 89.86646, "loss_bbox": 0.33087, "loss_mask": 0.36397, "loss": 1.23072, "time": 0.69424}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.02, "memory": 4704, "data_time": 0.25342, "loss_rpn_cls": 0.06836, "loss_rpn_bbox": 0.07576, "loss_cls": 0.38689, "acc": 90.17212, "loss_bbox": 0.32343, "loss_mask": 0.37157, "loss": 1.22601, "time": 0.68896}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 0.02, "memory": 4704, "data_time": 0.26403, "loss_rpn_cls": 0.0677, "loss_rpn_bbox": 0.07392, "loss_cls": 0.38219, "acc": 90.02759, "loss_bbox": 0.32708, "loss_mask": 0.36938, "loss": 1.22028, "time": 0.69282}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 0.02, "memory": 4704, "data_time": 0.24401, "loss_rpn_cls": 0.06371, "loss_rpn_bbox": 0.07191, "loss_cls": 0.36871, "acc": 90.33716, "loss_bbox": 0.32031, "loss_mask": 0.36183, "loss": 1.18646, "time": 0.6872}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 0.02, "memory": 4704, "data_time": 0.24636, "loss_rpn_cls": 0.06149, "loss_rpn_bbox": 0.07429, "loss_cls": 0.36656, "acc": 90.26636, "loss_bbox": 0.32183, "loss_mask": 0.35316, "loss": 1.17733, "time": 0.67847}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 0.02, "memory": 4704, "data_time": 0.2637, "loss_rpn_cls": 0.06231, "loss_rpn_bbox": 0.0698, "loss_cls": 0.37627, "acc": 90.19385, "loss_bbox": 0.32325, "loss_mask": 0.35708, "loss": 1.1887, "time": 0.68975}
{"mode": "train", "epoch": 1, "iter": 2050, "lr": 0.02, "memory": 4704, "data_time": 0.24902, "loss_rpn_cls": 0.06277, "loss_rpn_bbox": 0.07104, "loss_cls": 0.37445, "acc": 89.96387, "loss_bbox": 0.33456, "loss_mask": 0.35724, "loss": 1.20006, "time": 0.69527}
{"mode": "train", "epoch": 1, "iter": 2100, "lr": 0.02, "memory": 4704, "data_time": 0.25287, "loss_rpn_cls": 0.058, "loss_rpn_bbox": 0.06739, "loss_cls": 0.3565, "acc": 90.33301, "loss_bbox": 0.31861, "loss_mask": 0.34378, "loss": 1.14427, "time": 0.69111}
{"mode": "train", "epoch": 1, "iter": 2150, "lr": 0.02, "memory": 4704, "data_time": 0.24932, "loss_rpn_cls": 0.05938, "loss_rpn_bbox": 0.06805, "loss_cls": 0.36039, "acc": 90.26733, "loss_bbox": 0.31905, "loss_mask": 0.34839, "loss": 1.15525, "time": 0.67761}
{"mode": "train", "epoch": 1, "iter": 2200, "lr": 0.02, "memory": 4704, "data_time": 0.25591, "loss_rpn_cls": 0.06969, "loss_rpn_bbox": 0.07274, "loss_cls": 0.35876, "acc": 90.37036, "loss_bbox": 0.31061, "loss_mask": 0.34642, "loss": 1.15821, "time": 0.69147}
{"mode": "train", "epoch": 1, "iter": 2250, "lr": 0.02, "memory": 4704, "data_time": 0.26667, "loss_rpn_cls": 0.05762, "loss_rpn_bbox": 0.06989, "loss_cls": 0.34928, "acc": 90.49219, "loss_bbox": 0.31118, "loss_mask": 0.33689, "loss": 1.12486, "time": 0.69035}
{"mode": "train", "epoch": 1, "iter": 2300, "lr": 0.02, "memory": 4704, "data_time": 0.25573, "loss_rpn_cls": 0.06455, "loss_rpn_bbox": 0.0721, "loss_cls": 0.37146, "acc": 89.92554, "loss_bbox": 0.33333, "loss_mask": 0.35285, "loss": 1.1943, "time": 0.69262}
{"mode": "train", "epoch": 1, "iter": 2350, "lr": 0.02, "memory": 4704, "data_time": 0.24466, "loss_rpn_cls": 0.0604, "loss_rpn_bbox": 0.07072, "loss_cls": 0.35552, "acc": 90.44922, "loss_bbox": 0.31144, "loss_mask": 0.34246, "loss": 1.14055, "time": 0.67533}
{"mode": "train", "epoch": 1, "iter": 2400, "lr": 0.02, "memory": 4704, "data_time": 0.23617, "loss_rpn_cls": 0.06107, "loss_rpn_bbox": 0.07176, "loss_cls": 0.34456, "acc": 90.59961, "loss_bbox": 0.30523, "loss_mask": 0.34776, "loss": 1.13038, "time": 0.68441}
