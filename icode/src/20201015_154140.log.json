{"env_info": "sys.platform: linux\nPython: 3.7.9 (default, Aug 31 2020, 12:42:55) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.130\nGCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\nPyTorch: 1.4.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CUDA Runtime 10.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.1\n  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.5.0\nOpenCV: 4.4.0\nMMCV: 1.1.5\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.0\nMMDetection: 2.5.0+", "config": "dataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nannotations_root = 'annotations/'\nimage_root = '/root/userfolder/data/TCTAnnotatedData/'\nclasses = ('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n           'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n           'dysbacteriosis_herpes_act', 'ec')\nimg_norm_cfg = dict(\n    mean=[102.9801, 115.9465, 122.7717], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[102.9801, 115.9465, 122.7717],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=0,\n    train=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='annotations/train30000-cat10.json',\n        img_prefix='/root/userfolder/data/TCTAnnotatedData/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='annotations/val10000-cat10.json',\n        img_prefix='/root/userfolder/data/TCTAnnotatedData/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        classes=('normal', 'ascus', 'asch', 'lsil', 'hsil_scc_omn',\n                 'agc_adenocarcinoma_em', 'vaginalis', 'monilia',\n                 'dysbacteriosis_herpes_act', 'ec'),\n        ann_file='annotations/test10000-cat10.json',\n        img_prefix='/root/userfolder/data/TCTAnnotatedData/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(\n    type='SGD',\n    lr=0.001,\n    momentum=0.9,\n    weight_decay=0.0001,\n    paramwise_cfg=dict(bias_lr_mult=2.0, bias_decay_mult=0.0))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='constant',\n    warmup_iters=500,\n    warmup_ratio=0.3333333333333333,\n    step=[8, 11])\ntotal_epochs = 12\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nmodel = dict(\n    type='FCOS',\n    pretrained='open-mmlab://detectron/resnet50_caffe',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='caffe'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs=True,\n        extra_convs_on_inputs=False,\n        num_outs=5,\n        relu_before_extra_convs=True),\n    bbox_head=dict(\n        type='FCOSHead',\n        num_classes=10,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        strides=[8, 16, 32, 64, 128],\n        norm_cfg=None,\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='IoULoss', loss_weight=1.0),\n        loss_centerness=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)))\ntrain_cfg = dict(\n    assigner=dict(\n        type='MaxIoUAssigner',\n        pos_iou_thr=0.5,\n        neg_iou_thr=0.4,\n        min_pos_iou=0,\n        ignore_iof_thr=-1),\n    allowed_border=-1,\n    pos_weight=-1,\n    debug=False)\ntest_cfg = dict(\n    nms_pre=1000,\n    min_bbox_size=0,\n    score_thr=0.05,\n    nms=dict(type='nms', iou_threshold=0.5),\n    max_per_img=100)\nwork_dir = './work_dirs/fcos_r50_caffe_fpn_4x4_1x_coco'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "fcos_r50_caffe_fpn_4x4_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00033, "memory": 4893, "data_time": 0.97174, "loss_cls": 1.1169, "loss_bbox": 4.80374, "loss_centerness": 0.68568, "loss": 6.60632, "grad_norm": 40.06777, "time": 1.54023}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00033, "memory": 4893, "data_time": 0.94257, "loss_cls": 1.08528, "loss_bbox": 1.07084, "loss_centerness": 0.6726, "loss": 2.82872, "grad_norm": 17.89028, "time": 1.48648}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00033, "memory": 4894, "data_time": 0.93211, "loss_cls": 0.86649, "loss_bbox": 0.91267, "loss_centerness": 0.66688, "loss": 2.44604, "grad_norm": 16.48939, "time": 1.46}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00033, "memory": 4894, "data_time": 0.92799, "loss_cls": 0.72946, "loss_bbox": 0.90166, "loss_centerness": 0.66346, "loss": 2.29459, "grad_norm": 14.9817, "time": 1.46962}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00033, "memory": 4894, "data_time": 0.95515, "loss_cls": 0.66341, "loss_bbox": 0.85597, "loss_centerness": 0.6635, "loss": 2.18289, "grad_norm": 16.20928, "time": 1.4916}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00033, "memory": 4894, "data_time": 0.90593, "loss_cls": 0.6559, "loss_bbox": 0.82167, "loss_centerness": 0.66133, "loss": 2.13889, "grad_norm": 14.46684, "time": 1.47649}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00033, "memory": 4894, "data_time": 0.93499, "loss_cls": 0.64005, "loss_bbox": 0.7488, "loss_centerness": 0.65981, "loss": 2.04866, "grad_norm": 15.67503, "time": 1.48889}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00033, "memory": 4894, "data_time": 0.93835, "loss_cls": 0.64626, "loss_bbox": 0.70254, "loss_centerness": 0.65777, "loss": 2.00657, "grad_norm": 16.61306, "time": 1.4875}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00033, "memory": 4894, "data_time": 0.9708, "loss_cls": 0.62401, "loss_bbox": 0.73755, "loss_centerness": 0.65461, "loss": 2.01617, "grad_norm": 25.26474, "time": 1.50745}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00033, "memory": 4894, "data_time": 0.98368, "loss_cls": 0.63107, "loss_bbox": 0.66766, "loss_centerness": 0.65273, "loss": 1.95147, "grad_norm": 17.29188, "time": 1.51366}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.001, "memory": 4894, "data_time": 0.96757, "loss_cls": 0.63118, "loss_bbox": 1.38442, "loss_centerness": 0.64945, "loss": 2.66505, "grad_norm": 38.83149, "time": 1.4934}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.001, "memory": 4894, "data_time": 0.97772, "loss_cls": 0.62521, "loss_bbox": 0.83645, "loss_centerness": 0.64199, "loss": 2.10365, "grad_norm": 19.14085, "time": 1.50009}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.001, "memory": 4894, "data_time": 0.96253, "loss_cls": 0.61709, "loss_bbox": 0.81487, "loss_centerness": 0.6318, "loss": 2.06376, "grad_norm": 20.82835, "time": 1.498}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.001, "memory": 4894, "data_time": 0.93444, "loss_cls": 0.61796, "loss_bbox": 0.78568, "loss_centerness": 0.62395, "loss": 2.02759, "grad_norm": 22.19886, "time": 1.47423}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.001, "memory": 4894, "data_time": 0.93741, "loss_cls": 0.60546, "loss_bbox": 0.66191, "loss_centerness": 0.62056, "loss": 1.88792, "grad_norm": 13.0765, "time": 1.46885}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.001, "memory": 4894, "data_time": 0.92579, "loss_cls": 0.59924, "loss_bbox": 0.78165, "loss_centerness": 0.61772, "loss": 1.99861, "grad_norm": 20.31251, "time": 1.4836}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.001, "memory": 4894, "data_time": 0.91063, "loss_cls": 0.58825, "loss_bbox": 0.6747, "loss_centerness": 0.61522, "loss": 1.87817, "grad_norm": 16.58592, "time": 1.47942}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.001, "memory": 4894, "data_time": 0.91651, "loss_cls": 0.57539, "loss_bbox": 0.6553, "loss_centerness": 0.61504, "loss": 1.84573, "grad_norm": 15.65742, "time": 1.50329}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.001, "memory": 4894, "data_time": 0.91964, "loss_cls": 0.56231, "loss_bbox": 0.71182, "loss_centerness": 0.61414, "loss": 1.88827, "grad_norm": 20.50305, "time": 1.45183}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.001, "memory": 4894, "data_time": 0.86651, "loss_cls": 0.54859, "loss_bbox": 0.60167, "loss_centerness": 0.6124, "loss": 1.76265, "grad_norm": 12.91172, "time": 1.38451}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.001, "memory": 4894, "data_time": 0.87305, "loss_cls": 0.56333, "loss_bbox": 0.6157, "loss_centerness": 0.61107, "loss": 1.79009, "grad_norm": 14.98173, "time": 1.36953}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.001, "memory": 4894, "data_time": 0.94525, "loss_cls": 0.54004, "loss_bbox": 0.59064, "loss_centerness": 0.60796, "loss": 1.73864, "grad_norm": 13.80955, "time": 1.47469}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.001, "memory": 4894, "data_time": 1.00819, "loss_cls": 0.53147, "loss_bbox": 0.60073, "loss_centerness": 0.60878, "loss": 1.74098, "grad_norm": 15.36398, "time": 1.51996}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.001, "memory": 4894, "data_time": 0.97628, "loss_cls": 0.52856, "loss_bbox": 0.58014, "loss_centerness": 0.60938, "loss": 1.71808, "grad_norm": 13.23239, "time": 1.49242}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.001, "memory": 4894, "data_time": 0.9951, "loss_cls": 0.51889, "loss_bbox": 0.54865, "loss_centerness": 0.60485, "loss": 1.67239, "grad_norm": 12.44391, "time": 1.52559}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.001, "memory": 4894, "data_time": 1.02414, "loss_cls": 0.51736, "loss_bbox": 0.54794, "loss_centerness": 0.60607, "loss": 1.67136, "grad_norm": 12.26008, "time": 1.53766}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.001, "memory": 4894, "data_time": 0.98268, "loss_cls": 0.52135, "loss_bbox": 0.51535, "loss_centerness": 0.60599, "loss": 1.64269, "grad_norm": 9.93468, "time": 1.5152}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.001, "memory": 4894, "data_time": 0.99899, "loss_cls": 0.5107, "loss_bbox": 0.55838, "loss_centerness": 0.60474, "loss": 1.67382, "grad_norm": 13.29803, "time": 1.51693}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.001, "memory": 4894, "data_time": 0.99734, "loss_cls": 0.50652, "loss_bbox": 0.52154, "loss_centerness": 0.6047, "loss": 1.63276, "grad_norm": 10.13531, "time": 1.50271}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.001, "memory": 4894, "data_time": 0.93322, "loss_cls": 0.50995, "loss_bbox": 0.50821, "loss_centerness": 0.60517, "loss": 1.62334, "grad_norm": 9.78689, "time": 1.4431}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.001, "memory": 4894, "data_time": 1.00923, "loss_cls": 0.49648, "loss_bbox": 0.53787, "loss_centerness": 0.60256, "loss": 1.6369, "grad_norm": 13.87139, "time": 1.54755}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.001, "memory": 4894, "data_time": 1.11007, "loss_cls": 0.48839, "loss_bbox": 0.50686, "loss_centerness": 0.60378, "loss": 1.59903, "grad_norm": 11.36876, "time": 1.60417}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 0.001, "memory": 4894, "data_time": 1.17052, "loss_cls": 0.48741, "loss_bbox": 0.48754, "loss_centerness": 0.60192, "loss": 1.57686, "grad_norm": 9.73734, "time": 1.6735}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.001, "memory": 4894, "data_time": 1.12938, "loss_cls": 0.4828, "loss_bbox": 0.51762, "loss_centerness": 0.60298, "loss": 1.60341, "grad_norm": 12.07364, "time": 1.62238}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 0.001, "memory": 4894, "data_time": 0.94955, "loss_cls": 0.47721, "loss_bbox": 0.46002, "loss_centerness": 0.60031, "loss": 1.53755, "grad_norm": 7.10579, "time": 1.49719}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.001, "memory": 4894, "data_time": 0.93348, "loss_cls": 0.47836, "loss_bbox": 0.4866, "loss_centerness": 0.60182, "loss": 1.56678, "grad_norm": 8.55893, "time": 1.46903}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 0.001, "memory": 4894, "data_time": 0.96268, "loss_cls": 0.4802, "loss_bbox": 0.461, "loss_centerness": 0.60045, "loss": 1.54165, "grad_norm": 7.88922, "time": 1.48249}
{"mode": "val", "epoch": 1, "iter": 1875, "lr": 0.001, "bbox_mAP": 0.069, "bbox_mAP_50": 0.157, "bbox_mAP_75": 0.049, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.013, "bbox_mAP_l": 0.072, "bbox_mAP_copypaste": "0.069 0.157 0.049 -1.000 0.013 0.072"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.001, "memory": 4894, "data_time": 0.75887, "loss_cls": 0.4687, "loss_bbox": 0.486, "loss_centerness": 0.60258, "loss": 1.55728, "grad_norm": 10.19099, "time": 1.46992}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.001, "memory": 4894, "data_time": 0.70944, "loss_cls": 0.46385, "loss_bbox": 0.48016, "loss_centerness": 0.6006, "loss": 1.54461, "grad_norm": 10.26551, "time": 1.37479}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.001, "memory": 4894, "data_time": 0.72883, "loss_cls": 0.46028, "loss_bbox": 0.46509, "loss_centerness": 0.60105, "loss": 1.52641, "grad_norm": 7.76328, "time": 1.34992}
